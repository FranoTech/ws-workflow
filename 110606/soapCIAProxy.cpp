/* soapCIAProxy.cpp
   Generated by gSOAP 2.8.2 from CIA.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#include "soapCIAProxy.h"

CIAProxy::CIAProxy()
{	CIAProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CIAProxy::CIAProxy(const struct soap &_soap) : soap(_soap)
{ }

CIAProxy::CIAProxy(const char *url)
{	CIAProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

CIAProxy::CIAProxy(soap_mode iomode)
{	CIAProxy_init(iomode, iomode);
}

CIAProxy::CIAProxy(const char *url, soap_mode iomode)
{	CIAProxy_init(iomode, iomode);
	soap_endpoint = url;
}

CIAProxy::CIAProxy(soap_mode imode, soap_mode omode)
{	CIAProxy_init(imode, omode);
}

CIAProxy::~CIAProxy()
{ }

void CIAProxy::CIAProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:img", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void CIAProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void CIAProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Fault *CIAProxy::soap_fault()
{	return this->fault;
}

const char *CIAProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CIAProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CIAProxy::soap_close_socket()
{	return soap_closesock(this);
}

void CIAProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void CIAProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *CIAProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CIAProxy::Ipl1ChToMat(void *_, ns__ImageData &output)
{	struct soap *soap = this;
	struct ns__Ipl1ChToMat soap_tmp_ns__Ipl1ChToMat;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__Ipl1ChToMat._ = _;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__Ipl1ChToMat(soap, &soap_tmp_ns__Ipl1ChToMat);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Ipl1ChToMat(soap, &soap_tmp_ns__Ipl1ChToMat, "ns:Ipl1ChToMat", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Ipl1ChToMat(soap, &soap_tmp_ns__Ipl1ChToMat, "ns:Ipl1ChToMat", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&output)
		return soap_closesock(soap);
	output.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	output.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CIAProxy::MatToIpl1Ch(void *_, ns__ImageData &output)
{	struct soap *soap = this;
	struct ns__MatToIpl1Ch soap_tmp_ns__MatToIpl1Ch;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__MatToIpl1Ch._ = _;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__MatToIpl1Ch(soap, &soap_tmp_ns__MatToIpl1Ch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__MatToIpl1Ch(soap, &soap_tmp_ns__MatToIpl1Ch, "ns:MatToIpl1Ch", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__MatToIpl1Ch(soap, &soap_tmp_ns__MatToIpl1Ch, "ns:MatToIpl1Ch", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&output)
		return soap_closesock(soap);
	output.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	output.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CIAProxy::BinaryThreshold(double threshold, double maxValue, ns__ImageData &output)
{	struct soap *soap = this;
	struct ns__BinaryThreshold soap_tmp_ns__BinaryThreshold;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__BinaryThreshold.threshold = threshold;
	soap_tmp_ns__BinaryThreshold.maxValue = maxValue;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__BinaryThreshold(soap, &soap_tmp_ns__BinaryThreshold);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__BinaryThreshold(soap, &soap_tmp_ns__BinaryThreshold, "ns:BinaryThreshold", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__BinaryThreshold(soap, &soap_tmp_ns__BinaryThreshold, "ns:BinaryThreshold", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&output)
		return soap_closesock(soap);
	output.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	output.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CIAProxy::MorphOpen(void *_, ns__ImageData &output)
{	struct soap *soap = this;
	struct ns__MorphOpen soap_tmp_ns__MorphOpen;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__MorphOpen._ = _;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__MorphOpen(soap, &soap_tmp_ns__MorphOpen);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__MorphOpen(soap, &soap_tmp_ns__MorphOpen, "ns:MorphOpen", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__MorphOpen(soap, &soap_tmp_ns__MorphOpen, "ns:MorphOpen", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&output)
		return soap_closesock(soap);
	output.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	output.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
