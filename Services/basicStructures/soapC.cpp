/* soapC.cpp
   Generated by gSOAP 2.8.14 from BasicStructures.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.14 2013-03-16 23:48:16 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns__MatDetail:
		return soap_in_ns__MatDetail(soap, NULL, NULL, "ns:MatDetail");
	case SOAP_TYPE_ns__accessPixelValue:
		return soap_in_ns__accessPixelValue(soap, NULL, NULL, "ns:accessPixelValue");
	case SOAP_TYPE_ns__accessPixelValueResponse:
		return soap_in_ns__accessPixelValueResponse(soap, NULL, NULL, "ns:accessPixelValueResponse");
	case SOAP_TYPE_ns__printAllMatValue:
		return soap_in_ns__printAllMatValue(soap, NULL, NULL, "ns:printAllMatValue");
	case SOAP_TYPE_ns__printAllMatValueResponse:
		return soap_in_ns__printAllMatValueResponse(soap, NULL, NULL, "ns:printAllMatValueResponse");
	case SOAP_TYPE_ns__getMatDetail:
		return soap_in_ns__getMatDetail(soap, NULL, NULL, "ns:getMatDetail");
	case SOAP_TYPE_ns__ones:
		return soap_in_ns__ones(soap, NULL, NULL, "ns:ones");
	case SOAP_TYPE_ns__onesResponse:
		return soap_in_ns__onesResponse(soap, NULL, NULL, "ns:onesResponse");
	case SOAP_TYPE_ns__zeros:
		return soap_in_ns__zeros(soap, NULL, NULL, "ns:zeros");
	case SOAP_TYPE_ns__zerosResponse:
		return soap_in_ns__zerosResponse(soap, NULL, NULL, "ns:zerosResponse");
	case SOAP_TYPE_ns__dot:
		return soap_in_ns__dot(soap, NULL, NULL, "ns:dot");
	case SOAP_TYPE_ns__dotResponse:
		return soap_in_ns__dotResponse(soap, NULL, NULL, "ns:dotResponse");
	case SOAP_TYPE_ns__cross:
		return soap_in_ns__cross(soap, NULL, NULL, "ns:cross");
	case SOAP_TYPE_ns__crossResponse:
		return soap_in_ns__crossResponse(soap, NULL, NULL, "ns:crossResponse");
	case SOAP_TYPE_ns__mul:
		return soap_in_ns__mul(soap, NULL, NULL, "ns:mul");
	case SOAP_TYPE_ns__mulResponse:
		return soap_in_ns__mulResponse(soap, NULL, NULL, "ns:mulResponse");
	case SOAP_TYPE_ns__Inverse:
		return soap_in_ns__Inverse(soap, NULL, NULL, "ns:Inverse");
	case SOAP_TYPE_ns__InverseResponse:
		return soap_in_ns__InverseResponse(soap, NULL, NULL, "ns:InverseResponse");
	case SOAP_TYPE_ns__createMat:
		return soap_in_ns__createMat(soap, NULL, NULL, "ns:createMat");
	case SOAP_TYPE_ns__createMatResponse:
		return soap_in_ns__createMatResponse(soap, NULL, NULL, "ns:createMatResponse");
	case SOAP_TYPE_ns__convertTo:
		return soap_in_ns__convertTo(soap, NULL, NULL, "ns:convertTo");
	case SOAP_TYPE_ns__convertToResponse:
		return soap_in_ns__convertToResponse(soap, NULL, NULL, "ns:convertToResponse");
	case SOAP_TYPE_ns__colRange:
		return soap_in_ns__colRange(soap, NULL, NULL, "ns:colRange");
	case SOAP_TYPE_ns__colRangeResponse:
		return soap_in_ns__colRangeResponse(soap, NULL, NULL, "ns:colRangeResponse");
	case SOAP_TYPE_ns__rowRange:
		return soap_in_ns__rowRange(soap, NULL, NULL, "ns:rowRange");
	case SOAP_TYPE_ns__rowRangeResponse:
		return soap_in_ns__rowRangeResponse(soap, NULL, NULL, "ns:rowRangeResponse");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:MatDetail"))
		{	*type = SOAP_TYPE_ns__MatDetail;
			return soap_in_ns__MatDetail(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:accessPixelValue"))
		{	*type = SOAP_TYPE_ns__accessPixelValue;
			return soap_in_ns__accessPixelValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:accessPixelValueResponse"))
		{	*type = SOAP_TYPE_ns__accessPixelValueResponse;
			return soap_in_ns__accessPixelValueResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:printAllMatValue"))
		{	*type = SOAP_TYPE_ns__printAllMatValue;
			return soap_in_ns__printAllMatValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:printAllMatValueResponse"))
		{	*type = SOAP_TYPE_ns__printAllMatValueResponse;
			return soap_in_ns__printAllMatValueResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getMatDetail"))
		{	*type = SOAP_TYPE_ns__getMatDetail;
			return soap_in_ns__getMatDetail(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ones"))
		{	*type = SOAP_TYPE_ns__ones;
			return soap_in_ns__ones(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:onesResponse"))
		{	*type = SOAP_TYPE_ns__onesResponse;
			return soap_in_ns__onesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:zeros"))
		{	*type = SOAP_TYPE_ns__zeros;
			return soap_in_ns__zeros(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:zerosResponse"))
		{	*type = SOAP_TYPE_ns__zerosResponse;
			return soap_in_ns__zerosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:dot"))
		{	*type = SOAP_TYPE_ns__dot;
			return soap_in_ns__dot(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:dotResponse"))
		{	*type = SOAP_TYPE_ns__dotResponse;
			return soap_in_ns__dotResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:cross"))
		{	*type = SOAP_TYPE_ns__cross;
			return soap_in_ns__cross(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:crossResponse"))
		{	*type = SOAP_TYPE_ns__crossResponse;
			return soap_in_ns__crossResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:mul"))
		{	*type = SOAP_TYPE_ns__mul;
			return soap_in_ns__mul(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:mulResponse"))
		{	*type = SOAP_TYPE_ns__mulResponse;
			return soap_in_ns__mulResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Inverse"))
		{	*type = SOAP_TYPE_ns__Inverse;
			return soap_in_ns__Inverse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:InverseResponse"))
		{	*type = SOAP_TYPE_ns__InverseResponse;
			return soap_in_ns__InverseResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:createMat"))
		{	*type = SOAP_TYPE_ns__createMat;
			return soap_in_ns__createMat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:createMatResponse"))
		{	*type = SOAP_TYPE_ns__createMatResponse;
			return soap_in_ns__createMatResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:convertTo"))
		{	*type = SOAP_TYPE_ns__convertTo;
			return soap_in_ns__convertTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:convertToResponse"))
		{	*type = SOAP_TYPE_ns__convertToResponse;
			return soap_in_ns__convertToResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:colRange"))
		{	*type = SOAP_TYPE_ns__colRange;
			return soap_in_ns__colRange(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:colRangeResponse"))
		{	*type = SOAP_TYPE_ns__colRangeResponse;
			return soap_in_ns__colRangeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:rowRange"))
		{	*type = SOAP_TYPE_ns__rowRange;
			return soap_in_ns__rowRange(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:rowRangeResponse"))
		{	*type = SOAP_TYPE_ns__rowRangeResponse;
			return soap_in_ns__rowRangeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns__MatDetail:
		return ((ns__MatDetail *)ptr)->soap_out(soap, tag, id, "ns:MatDetail");
	case SOAP_TYPE_ns__accessPixelValue:
		return soap_out_ns__accessPixelValue(soap, tag, id, (const struct ns__accessPixelValue *)ptr, "ns:accessPixelValue");
	case SOAP_TYPE_ns__accessPixelValueResponse:
		return soap_out_ns__accessPixelValueResponse(soap, tag, id, (const struct ns__accessPixelValueResponse *)ptr, "ns:accessPixelValueResponse");
	case SOAP_TYPE_ns__printAllMatValue:
		return soap_out_ns__printAllMatValue(soap, tag, id, (const struct ns__printAllMatValue *)ptr, "ns:printAllMatValue");
	case SOAP_TYPE_ns__printAllMatValueResponse:
		return soap_out_ns__printAllMatValueResponse(soap, tag, id, (const struct ns__printAllMatValueResponse *)ptr, "ns:printAllMatValueResponse");
	case SOAP_TYPE_ns__getMatDetail:
		return soap_out_ns__getMatDetail(soap, tag, id, (const struct ns__getMatDetail *)ptr, "ns:getMatDetail");
	case SOAP_TYPE_ns__ones:
		return soap_out_ns__ones(soap, tag, id, (const struct ns__ones *)ptr, "ns:ones");
	case SOAP_TYPE_ns__onesResponse:
		return soap_out_ns__onesResponse(soap, tag, id, (const struct ns__onesResponse *)ptr, "ns:onesResponse");
	case SOAP_TYPE_ns__zeros:
		return soap_out_ns__zeros(soap, tag, id, (const struct ns__zeros *)ptr, "ns:zeros");
	case SOAP_TYPE_ns__zerosResponse:
		return soap_out_ns__zerosResponse(soap, tag, id, (const struct ns__zerosResponse *)ptr, "ns:zerosResponse");
	case SOAP_TYPE_ns__dot:
		return soap_out_ns__dot(soap, tag, id, (const struct ns__dot *)ptr, "ns:dot");
	case SOAP_TYPE_ns__dotResponse:
		return soap_out_ns__dotResponse(soap, tag, id, (const struct ns__dotResponse *)ptr, "ns:dotResponse");
	case SOAP_TYPE_ns__cross:
		return soap_out_ns__cross(soap, tag, id, (const struct ns__cross *)ptr, "ns:cross");
	case SOAP_TYPE_ns__crossResponse:
		return soap_out_ns__crossResponse(soap, tag, id, (const struct ns__crossResponse *)ptr, "ns:crossResponse");
	case SOAP_TYPE_ns__mul:
		return soap_out_ns__mul(soap, tag, id, (const struct ns__mul *)ptr, "ns:mul");
	case SOAP_TYPE_ns__mulResponse:
		return soap_out_ns__mulResponse(soap, tag, id, (const struct ns__mulResponse *)ptr, "ns:mulResponse");
	case SOAP_TYPE_ns__Inverse:
		return soap_out_ns__Inverse(soap, tag, id, (const struct ns__Inverse *)ptr, "ns:Inverse");
	case SOAP_TYPE_ns__InverseResponse:
		return soap_out_ns__InverseResponse(soap, tag, id, (const struct ns__InverseResponse *)ptr, "ns:InverseResponse");
	case SOAP_TYPE_ns__createMat:
		return soap_out_ns__createMat(soap, tag, id, (const struct ns__createMat *)ptr, "ns:createMat");
	case SOAP_TYPE_ns__createMatResponse:
		return soap_out_ns__createMatResponse(soap, tag, id, (const struct ns__createMatResponse *)ptr, "ns:createMatResponse");
	case SOAP_TYPE_ns__convertTo:
		return soap_out_ns__convertTo(soap, tag, id, (const struct ns__convertTo *)ptr, "ns:convertTo");
	case SOAP_TYPE_ns__convertToResponse:
		return soap_out_ns__convertToResponse(soap, tag, id, (const struct ns__convertToResponse *)ptr, "ns:convertToResponse");
	case SOAP_TYPE_ns__colRange:
		return soap_out_ns__colRange(soap, tag, id, (const struct ns__colRange *)ptr, "ns:colRange");
	case SOAP_TYPE_ns__colRangeResponse:
		return soap_out_ns__colRangeResponse(soap, tag, id, (const struct ns__colRangeResponse *)ptr, "ns:colRangeResponse");
	case SOAP_TYPE_ns__rowRange:
		return soap_out_ns__rowRange(soap, tag, id, (const struct ns__rowRange *)ptr, "ns:rowRange");
	case SOAP_TYPE_ns__rowRangeResponse:
		return soap_out_ns__rowRangeResponse(soap, tag, id, (const struct ns__rowRangeResponse *)ptr, "ns:rowRangeResponse");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns__MatDetail:
		((ns__MatDetail *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__accessPixelValue:
		soap_serialize_ns__accessPixelValue(soap, (const struct ns__accessPixelValue *)ptr);
		break;
	case SOAP_TYPE_ns__accessPixelValueResponse:
		soap_serialize_ns__accessPixelValueResponse(soap, (const struct ns__accessPixelValueResponse *)ptr);
		break;
	case SOAP_TYPE_ns__printAllMatValue:
		soap_serialize_ns__printAllMatValue(soap, (const struct ns__printAllMatValue *)ptr);
		break;
	case SOAP_TYPE_ns__printAllMatValueResponse:
		soap_serialize_ns__printAllMatValueResponse(soap, (const struct ns__printAllMatValueResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getMatDetail:
		soap_serialize_ns__getMatDetail(soap, (const struct ns__getMatDetail *)ptr);
		break;
	case SOAP_TYPE_ns__ones:
		soap_serialize_ns__ones(soap, (const struct ns__ones *)ptr);
		break;
	case SOAP_TYPE_ns__onesResponse:
		soap_serialize_ns__onesResponse(soap, (const struct ns__onesResponse *)ptr);
		break;
	case SOAP_TYPE_ns__zeros:
		soap_serialize_ns__zeros(soap, (const struct ns__zeros *)ptr);
		break;
	case SOAP_TYPE_ns__zerosResponse:
		soap_serialize_ns__zerosResponse(soap, (const struct ns__zerosResponse *)ptr);
		break;
	case SOAP_TYPE_ns__dot:
		soap_serialize_ns__dot(soap, (const struct ns__dot *)ptr);
		break;
	case SOAP_TYPE_ns__dotResponse:
		soap_serialize_ns__dotResponse(soap, (const struct ns__dotResponse *)ptr);
		break;
	case SOAP_TYPE_ns__cross:
		soap_serialize_ns__cross(soap, (const struct ns__cross *)ptr);
		break;
	case SOAP_TYPE_ns__crossResponse:
		soap_serialize_ns__crossResponse(soap, (const struct ns__crossResponse *)ptr);
		break;
	case SOAP_TYPE_ns__mul:
		soap_serialize_ns__mul(soap, (const struct ns__mul *)ptr);
		break;
	case SOAP_TYPE_ns__mulResponse:
		soap_serialize_ns__mulResponse(soap, (const struct ns__mulResponse *)ptr);
		break;
	case SOAP_TYPE_ns__Inverse:
		soap_serialize_ns__Inverse(soap, (const struct ns__Inverse *)ptr);
		break;
	case SOAP_TYPE_ns__InverseResponse:
		soap_serialize_ns__InverseResponse(soap, (const struct ns__InverseResponse *)ptr);
		break;
	case SOAP_TYPE_ns__createMat:
		soap_serialize_ns__createMat(soap, (const struct ns__createMat *)ptr);
		break;
	case SOAP_TYPE_ns__createMatResponse:
		soap_serialize_ns__createMatResponse(soap, (const struct ns__createMatResponse *)ptr);
		break;
	case SOAP_TYPE_ns__convertTo:
		soap_serialize_ns__convertTo(soap, (const struct ns__convertTo *)ptr);
		break;
	case SOAP_TYPE_ns__convertToResponse:
		soap_serialize_ns__convertToResponse(soap, (const struct ns__convertToResponse *)ptr);
		break;
	case SOAP_TYPE_ns__colRange:
		soap_serialize_ns__colRange(soap, (const struct ns__colRange *)ptr);
		break;
	case SOAP_TYPE_ns__colRangeResponse:
		soap_serialize_ns__colRangeResponse(soap, (const struct ns__colRangeResponse *)ptr);
		break;
	case SOAP_TYPE_ns__rowRange:
		soap_serialize_ns__rowRange(soap, (const struct ns__rowRange *)ptr);
		break;
	case SOAP_TYPE_ns__rowRangeResponse:
		soap_serialize_ns__rowRangeResponse(soap, (const struct ns__rowRangeResponse *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__MatDetail:
		return (void*)soap_instantiate_ns__MatDetail(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__rowRangeResponse:
		return (void*)soap_instantiate_ns__rowRangeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__rowRange:
		return (void*)soap_instantiate_ns__rowRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__colRangeResponse:
		return (void*)soap_instantiate_ns__colRangeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__colRange:
		return (void*)soap_instantiate_ns__colRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__convertToResponse:
		return (void*)soap_instantiate_ns__convertToResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__convertTo:
		return (void*)soap_instantiate_ns__convertTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__createMatResponse:
		return (void*)soap_instantiate_ns__createMatResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__createMat:
		return (void*)soap_instantiate_ns__createMat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__InverseResponse:
		return (void*)soap_instantiate_ns__InverseResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Inverse:
		return (void*)soap_instantiate_ns__Inverse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__mulResponse:
		return (void*)soap_instantiate_ns__mulResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__mul:
		return (void*)soap_instantiate_ns__mul(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__crossResponse:
		return (void*)soap_instantiate_ns__crossResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__cross:
		return (void*)soap_instantiate_ns__cross(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__dotResponse:
		return (void*)soap_instantiate_ns__dotResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__dot:
		return (void*)soap_instantiate_ns__dot(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__zerosResponse:
		return (void*)soap_instantiate_ns__zerosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__zeros:
		return (void*)soap_instantiate_ns__zeros(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__onesResponse:
		return (void*)soap_instantiate_ns__onesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ones:
		return (void*)soap_instantiate_ns__ones(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getMatDetail:
		return (void*)soap_instantiate_ns__getMatDetail(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__printAllMatValueResponse:
		return (void*)soap_instantiate_ns__printAllMatValueResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__printAllMatValue:
		return (void*)soap_instantiate_ns__printAllMatValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__accessPixelValueResponse:
		return (void*)soap_instantiate_ns__accessPixelValueResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__accessPixelValue:
		return (void*)soap_instantiate_ns__accessPixelValue(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns__MatDetail:
		if (p->size < 0)
			SOAP_DELETE((ns__MatDetail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__MatDetail*)p->ptr);
		break;
	case SOAP_TYPE_ns__rowRangeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__rowRangeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__rowRangeResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__rowRange:
		if (p->size < 0)
			SOAP_DELETE((struct ns__rowRange*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__rowRange*)p->ptr);
		break;
	case SOAP_TYPE_ns__colRangeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__colRangeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__colRangeResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__colRange:
		if (p->size < 0)
			SOAP_DELETE((struct ns__colRange*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__colRange*)p->ptr);
		break;
	case SOAP_TYPE_ns__convertToResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__convertToResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__convertToResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__convertTo:
		if (p->size < 0)
			SOAP_DELETE((struct ns__convertTo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__convertTo*)p->ptr);
		break;
	case SOAP_TYPE_ns__createMatResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__createMatResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__createMatResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__createMat:
		if (p->size < 0)
			SOAP_DELETE((struct ns__createMat*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__createMat*)p->ptr);
		break;
	case SOAP_TYPE_ns__InverseResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__InverseResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__InverseResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Inverse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Inverse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Inverse*)p->ptr);
		break;
	case SOAP_TYPE_ns__mulResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__mulResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__mulResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__mul:
		if (p->size < 0)
			SOAP_DELETE((struct ns__mul*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__mul*)p->ptr);
		break;
	case SOAP_TYPE_ns__crossResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__crossResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__crossResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__cross:
		if (p->size < 0)
			SOAP_DELETE((struct ns__cross*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__cross*)p->ptr);
		break;
	case SOAP_TYPE_ns__dotResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__dotResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__dotResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__dot:
		if (p->size < 0)
			SOAP_DELETE((struct ns__dot*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__dot*)p->ptr);
		break;
	case SOAP_TYPE_ns__zerosResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__zerosResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__zerosResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__zeros:
		if (p->size < 0)
			SOAP_DELETE((struct ns__zeros*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__zeros*)p->ptr);
		break;
	case SOAP_TYPE_ns__onesResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__onesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__onesResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__ones:
		if (p->size < 0)
			SOAP_DELETE((struct ns__ones*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__ones*)p->ptr);
		break;
	case SOAP_TYPE_ns__getMatDetail:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getMatDetail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getMatDetail*)p->ptr);
		break;
	case SOAP_TYPE_ns__printAllMatValueResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__printAllMatValueResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__printAllMatValueResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__printAllMatValue:
		if (p->size < 0)
			SOAP_DELETE((struct ns__printAllMatValue*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__printAllMatValue*)p->ptr);
		break;
	case SOAP_TYPE_ns__accessPixelValueResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__accessPixelValueResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__accessPixelValueResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__accessPixelValue:
		if (p->size < 0)
			SOAP_DELETE((struct ns__accessPixelValue*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__accessPixelValue*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void ns__MatDetail::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->ns__MatDetail::columns);
	soap_default_int(soap, &this->ns__MatDetail::rows);
	soap_default_std__string(soap, &this->ns__MatDetail::depth);
	soap_default_std__string(soap, &this->ns__MatDetail::type);
	soap_default_int(soap, &this->ns__MatDetail::channel);
	soap_default_bool(soap, &this->ns__MatDetail::empty);
}

void ns__MatDetail::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__MatDetail::depth);
	soap_serialize_std__string(soap, &this->ns__MatDetail::type);
#endif
}

int ns__MatDetail::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__MatDetail(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MatDetail(struct soap *soap, const char *tag, int id, const ns__MatDetail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__MatDetail), type))
		return soap->error;
	if (soap_out_int(soap, "columns", -1, &(a->ns__MatDetail::columns), ""))
		return soap->error;
	if (soap_out_int(soap, "rows", -1, &(a->ns__MatDetail::rows), ""))
		return soap->error;
	if (soap_out_std__string(soap, "depth", -1, &(a->ns__MatDetail::depth), ""))
		return soap->error;
	if (soap_out_std__string(soap, "type", -1, &(a->ns__MatDetail::type), ""))
		return soap->error;
	if (soap_out_int(soap, "channel", -1, &(a->ns__MatDetail::channel), ""))
		return soap->error;
	if (soap_out_bool(soap, "empty", -1, &(a->ns__MatDetail::empty), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__MatDetail::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__MatDetail(soap, tag, this, type);
}

SOAP_FMAC3 ns__MatDetail * SOAP_FMAC4 soap_in_ns__MatDetail(struct soap *soap, const char *tag, ns__MatDetail *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__MatDetail *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__MatDetail, sizeof(ns__MatDetail), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__MatDetail)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__MatDetail *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_columns1 = 1;
	size_t soap_flag_rows1 = 1;
	size_t soap_flag_depth1 = 1;
	size_t soap_flag_type1 = 1;
	size_t soap_flag_channel1 = 1;
	size_t soap_flag_empty1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_columns1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "columns", &(a->ns__MatDetail::columns), "xsd:int"))
				{	soap_flag_columns1--;
					continue;
				}
			if (soap_flag_rows1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rows", &(a->ns__MatDetail::rows), "xsd:int"))
				{	soap_flag_rows1--;
					continue;
				}
			if (soap_flag_depth1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "depth", &(a->ns__MatDetail::depth), "xsd:string"))
				{	soap_flag_depth1--;
					continue;
				}
			if (soap_flag_type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "type", &(a->ns__MatDetail::type), "xsd:string"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_channel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "channel", &(a->ns__MatDetail::channel), "xsd:int"))
				{	soap_flag_channel1--;
					continue;
				}
			if (soap_flag_empty1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "empty", &(a->ns__MatDetail::empty), "xsd:boolean"))
				{	soap_flag_empty1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__MatDetail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__MatDetail, 0, sizeof(ns__MatDetail), 0, soap_copy_ns__MatDetail);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_columns1 > 0 || soap_flag_rows1 > 0 || soap_flag_depth1 > 0 || soap_flag_type1 > 0 || soap_flag_channel1 > 0 || soap_flag_empty1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__MatDetail::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__MatDetail);
	if (this->soap_out(soap, tag?tag:"ns:MatDetail", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__MatDetail::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__MatDetail(soap, this, tag, type);
}

SOAP_FMAC3 ns__MatDetail * SOAP_FMAC4 soap_get_ns__MatDetail(struct soap *soap, ns__MatDetail *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__MatDetail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__MatDetail * SOAP_FMAC2 soap_instantiate_ns__MatDetail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__MatDetail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__MatDetail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__MatDetail);
		if (size)
			*size = sizeof(ns__MatDetail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__MatDetail, n);
		if (size)
			*size = n * sizeof(ns__MatDetail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__MatDetail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MatDetail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__MatDetail %p -> %p\n", q, p));
	*(ns__MatDetail*)p = *(ns__MatDetail*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__accessPixelValue(struct soap *soap, struct ns__accessPixelValue *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->returnType);
	a->intToSet = 0;
	a->floatToSet = 0;
	a->pixelI = 0;
	a->pixelJ = 0;
	a->channel = 0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__accessPixelValue(struct soap *soap, const struct ns__accessPixelValue *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->returnType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__accessPixelValue(struct soap *soap, const char *tag, int id, const struct ns__accessPixelValue *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__accessPixelValue), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "returnType", -1, &a->returnType, ""))
		return soap->error;
	if (soap_out_int(soap, "intToSet", -1, &a->intToSet, ""))
		return soap->error;
	if (soap_out_float(soap, "floatToSet", -1, &a->floatToSet, ""))
		return soap->error;
	if (soap_out_int(soap, "pixelI", -1, &a->pixelI, ""))
		return soap->error;
	if (soap_out_int(soap, "pixelJ", -1, &a->pixelJ, ""))
		return soap->error;
	if (soap_out_int(soap, "channel", -1, &a->channel, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__accessPixelValue * SOAP_FMAC4 soap_in_ns__accessPixelValue(struct soap *soap, const char *tag, struct ns__accessPixelValue *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_returnType = 1;
	size_t soap_flag_intToSet = 1;
	size_t soap_flag_floatToSet = 1;
	size_t soap_flag_pixelI = 1;
	size_t soap_flag_pixelJ = 1;
	size_t soap_flag_channel = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__accessPixelValue *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__accessPixelValue, sizeof(struct ns__accessPixelValue), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__accessPixelValue(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_returnType && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "returnType", &a->returnType, "xsd:string"))
				{	soap_flag_returnType--;
					continue;
				}
			if (soap_flag_intToSet && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "intToSet", &a->intToSet, "xsd:int"))
				{	soap_flag_intToSet--;
					continue;
				}
			if (soap_flag_floatToSet && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "floatToSet", &a->floatToSet, "xsd:float"))
				{	soap_flag_floatToSet--;
					continue;
				}
			if (soap_flag_pixelI && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "pixelI", &a->pixelI, "xsd:int"))
				{	soap_flag_pixelI--;
					continue;
				}
			if (soap_flag_pixelJ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "pixelJ", &a->pixelJ, "xsd:int"))
				{	soap_flag_pixelJ--;
					continue;
				}
			if (soap_flag_channel && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "channel", &a->channel, "xsd:int"))
				{	soap_flag_channel--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__accessPixelValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__accessPixelValue, 0, sizeof(struct ns__accessPixelValue), 0, soap_copy_ns__accessPixelValue);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_returnType > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__accessPixelValue(struct soap *soap, const struct ns__accessPixelValue *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__accessPixelValue);
	if (soap_out_ns__accessPixelValue(soap, tag?tag:"ns:accessPixelValue", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__accessPixelValue * SOAP_FMAC4 soap_get_ns__accessPixelValue(struct soap *soap, struct ns__accessPixelValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__accessPixelValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__accessPixelValue * SOAP_FMAC2 soap_instantiate_ns__accessPixelValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__accessPixelValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__accessPixelValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__accessPixelValue);
		if (size)
			*size = sizeof(struct ns__accessPixelValue);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__accessPixelValue, n);
		if (size)
			*size = n * sizeof(struct ns__accessPixelValue);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__accessPixelValue*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__accessPixelValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__accessPixelValue %p -> %p\n", q, p));
	*(struct ns__accessPixelValue*)p = *(struct ns__accessPixelValue*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__accessPixelValueResponse(struct soap *soap, struct ns__accessPixelValueResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__accessPixelValueResponse(struct soap *soap, const struct ns__accessPixelValueResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__accessPixelValueResponse(struct soap *soap, const char *tag, int id, const struct ns__accessPixelValueResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__accessPixelValueResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__accessPixelValueResponse * SOAP_FMAC4 soap_in_ns__accessPixelValueResponse(struct soap *soap, const char *tag, struct ns__accessPixelValueResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__accessPixelValueResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__accessPixelValueResponse, sizeof(struct ns__accessPixelValueResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__accessPixelValueResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__accessPixelValueResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__accessPixelValueResponse, 0, sizeof(struct ns__accessPixelValueResponse), 0, soap_copy_ns__accessPixelValueResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__accessPixelValueResponse(struct soap *soap, const struct ns__accessPixelValueResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__accessPixelValueResponse);
	if (soap_out_ns__accessPixelValueResponse(soap, tag?tag:"ns:accessPixelValueResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__accessPixelValueResponse * SOAP_FMAC4 soap_get_ns__accessPixelValueResponse(struct soap *soap, struct ns__accessPixelValueResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__accessPixelValueResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__accessPixelValueResponse * SOAP_FMAC2 soap_instantiate_ns__accessPixelValueResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__accessPixelValueResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__accessPixelValueResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__accessPixelValueResponse);
		if (size)
			*size = sizeof(struct ns__accessPixelValueResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__accessPixelValueResponse, n);
		if (size)
			*size = n * sizeof(struct ns__accessPixelValueResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__accessPixelValueResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__accessPixelValueResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__accessPixelValueResponse %p -> %p\n", q, p));
	*(struct ns__accessPixelValueResponse*)p = *(struct ns__accessPixelValueResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__printAllMatValue(struct soap *soap, struct ns__printAllMatValue *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__printAllMatValue(struct soap *soap, const struct ns__printAllMatValue *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__printAllMatValue(struct soap *soap, const char *tag, int id, const struct ns__printAllMatValue *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__printAllMatValue), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__printAllMatValue * SOAP_FMAC4 soap_in_ns__printAllMatValue(struct soap *soap, const char *tag, struct ns__printAllMatValue *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__printAllMatValue *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__printAllMatValue, sizeof(struct ns__printAllMatValue), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__printAllMatValue(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__printAllMatValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__printAllMatValue, 0, sizeof(struct ns__printAllMatValue), 0, soap_copy_ns__printAllMatValue);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__printAllMatValue(struct soap *soap, const struct ns__printAllMatValue *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__printAllMatValue);
	if (soap_out_ns__printAllMatValue(soap, tag?tag:"ns:printAllMatValue", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__printAllMatValue * SOAP_FMAC4 soap_get_ns__printAllMatValue(struct soap *soap, struct ns__printAllMatValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__printAllMatValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__printAllMatValue * SOAP_FMAC2 soap_instantiate_ns__printAllMatValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__printAllMatValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__printAllMatValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__printAllMatValue);
		if (size)
			*size = sizeof(struct ns__printAllMatValue);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__printAllMatValue, n);
		if (size)
			*size = n * sizeof(struct ns__printAllMatValue);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__printAllMatValue*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__printAllMatValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__printAllMatValue %p -> %p\n", q, p));
	*(struct ns__printAllMatValue*)p = *(struct ns__printAllMatValue*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__printAllMatValueResponse(struct soap *soap, struct ns__printAllMatValueResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMat);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__printAllMatValueResponse(struct soap *soap, const struct ns__printAllMatValueResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMat);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__printAllMatValueResponse(struct soap *soap, const char *tag, int id, const struct ns__printAllMatValueResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__printAllMatValueResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMat", -1, &a->OutputMat, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__printAllMatValueResponse * SOAP_FMAC4 soap_in_ns__printAllMatValueResponse(struct soap *soap, const char *tag, struct ns__printAllMatValueResponse *a, const char *type)
{
	size_t soap_flag_OutputMat = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__printAllMatValueResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__printAllMatValueResponse, sizeof(struct ns__printAllMatValueResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__printAllMatValueResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMat", &a->OutputMat, "xsd:string"))
				{	soap_flag_OutputMat--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__printAllMatValueResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__printAllMatValueResponse, 0, sizeof(struct ns__printAllMatValueResponse), 0, soap_copy_ns__printAllMatValueResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMat > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__printAllMatValueResponse(struct soap *soap, const struct ns__printAllMatValueResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__printAllMatValueResponse);
	if (soap_out_ns__printAllMatValueResponse(soap, tag?tag:"ns:printAllMatValueResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__printAllMatValueResponse * SOAP_FMAC4 soap_get_ns__printAllMatValueResponse(struct soap *soap, struct ns__printAllMatValueResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__printAllMatValueResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__printAllMatValueResponse * SOAP_FMAC2 soap_instantiate_ns__printAllMatValueResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__printAllMatValueResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__printAllMatValueResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__printAllMatValueResponse);
		if (size)
			*size = sizeof(struct ns__printAllMatValueResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__printAllMatValueResponse, n);
		if (size)
			*size = n * sizeof(struct ns__printAllMatValueResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__printAllMatValueResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__printAllMatValueResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__printAllMatValueResponse %p -> %p\n", q, p));
	*(struct ns__printAllMatValueResponse*)p = *(struct ns__printAllMatValueResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getMatDetail(struct soap *soap, struct ns__getMatDetail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getMatDetail(struct soap *soap, const struct ns__getMatDetail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getMatDetail(struct soap *soap, const char *tag, int id, const struct ns__getMatDetail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getMatDetail), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getMatDetail * SOAP_FMAC4 soap_in_ns__getMatDetail(struct soap *soap, const char *tag, struct ns__getMatDetail *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getMatDetail *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getMatDetail, sizeof(struct ns__getMatDetail), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__getMatDetail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getMatDetail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getMatDetail, 0, sizeof(struct ns__getMatDetail), 0, soap_copy_ns__getMatDetail);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getMatDetail(struct soap *soap, const struct ns__getMatDetail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getMatDetail);
	if (soap_out_ns__getMatDetail(soap, tag?tag:"ns:getMatDetail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getMatDetail * SOAP_FMAC4 soap_get_ns__getMatDetail(struct soap *soap, struct ns__getMatDetail *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getMatDetail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getMatDetail * SOAP_FMAC2 soap_instantiate_ns__getMatDetail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getMatDetail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getMatDetail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getMatDetail);
		if (size)
			*size = sizeof(struct ns__getMatDetail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getMatDetail, n);
		if (size)
			*size = n * sizeof(struct ns__getMatDetail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getMatDetail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getMatDetail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getMatDetail %p -> %p\n", q, p));
	*(struct ns__getMatDetail*)p = *(struct ns__getMatDetail*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ones(struct soap *soap, struct ns__ones *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->rows = 0;
	a->columns = 0;
	a->fillWith = 0;
	soap_default_std__string(soap, &a->type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ones(struct soap *soap, const struct ns__ones *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ones(struct soap *soap, const char *tag, int id, const struct ns__ones *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ones), type))
		return soap->error;
	if (soap_out_int(soap, "rows", -1, &a->rows, ""))
		return soap->error;
	if (soap_out_int(soap, "columns", -1, &a->columns, ""))
		return soap->error;
	if (soap_out_int(soap, "fillWith", -1, &a->fillWith, ""))
		return soap->error;
	if (soap_out_std__string(soap, "type", -1, &a->type, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__ones * SOAP_FMAC4 soap_in_ns__ones(struct soap *soap, const char *tag, struct ns__ones *a, const char *type)
{
	size_t soap_flag_rows = 1;
	size_t soap_flag_columns = 1;
	size_t soap_flag_fillWith = 1;
	size_t soap_flag_type = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__ones *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ones, sizeof(struct ns__ones), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__ones(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rows", &a->rows, "xsd:int"))
				{	soap_flag_rows--;
					continue;
				}
			if (soap_flag_columns && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "columns", &a->columns, "xsd:int"))
				{	soap_flag_columns--;
					continue;
				}
			if (soap_flag_fillWith && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "fillWith", &a->fillWith, "xsd:int"))
				{	soap_flag_fillWith--;
					continue;
				}
			if (soap_flag_type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "type", &a->type, "xsd:string"))
				{	soap_flag_type--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__ones *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ones, 0, sizeof(struct ns__ones), 0, soap_copy_ns__ones);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ones(struct soap *soap, const struct ns__ones *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__ones);
	if (soap_out_ns__ones(soap, tag?tag:"ns:ones", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ones * SOAP_FMAC4 soap_get_ns__ones(struct soap *soap, struct ns__ones *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ones(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__ones * SOAP_FMAC2 soap_instantiate_ns__ones(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ones(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ones, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__ones);
		if (size)
			*size = sizeof(struct ns__ones);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__ones, n);
		if (size)
			*size = n * sizeof(struct ns__ones);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__ones*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ones(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__ones %p -> %p\n", q, p));
	*(struct ns__ones*)p = *(struct ns__ones*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__onesResponse(struct soap *soap, struct ns__onesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__onesResponse(struct soap *soap, const struct ns__onesResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__onesResponse(struct soap *soap, const char *tag, int id, const struct ns__onesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__onesResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__onesResponse * SOAP_FMAC4 soap_in_ns__onesResponse(struct soap *soap, const char *tag, struct ns__onesResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__onesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__onesResponse, sizeof(struct ns__onesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__onesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__onesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__onesResponse, 0, sizeof(struct ns__onesResponse), 0, soap_copy_ns__onesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__onesResponse(struct soap *soap, const struct ns__onesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__onesResponse);
	if (soap_out_ns__onesResponse(soap, tag?tag:"ns:onesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__onesResponse * SOAP_FMAC4 soap_get_ns__onesResponse(struct soap *soap, struct ns__onesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__onesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__onesResponse * SOAP_FMAC2 soap_instantiate_ns__onesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__onesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__onesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__onesResponse);
		if (size)
			*size = sizeof(struct ns__onesResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__onesResponse, n);
		if (size)
			*size = n * sizeof(struct ns__onesResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__onesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__onesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__onesResponse %p -> %p\n", q, p));
	*(struct ns__onesResponse*)p = *(struct ns__onesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__zeros(struct soap *soap, struct ns__zeros *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->rows = 0;
	a->columns = 0;
	soap_default_std__string(soap, &a->type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__zeros(struct soap *soap, const struct ns__zeros *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__zeros(struct soap *soap, const char *tag, int id, const struct ns__zeros *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__zeros), type))
		return soap->error;
	if (soap_out_int(soap, "rows", -1, &a->rows, ""))
		return soap->error;
	if (soap_out_int(soap, "columns", -1, &a->columns, ""))
		return soap->error;
	if (soap_out_std__string(soap, "type", -1, &a->type, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__zeros * SOAP_FMAC4 soap_in_ns__zeros(struct soap *soap, const char *tag, struct ns__zeros *a, const char *type)
{
	size_t soap_flag_rows = 1;
	size_t soap_flag_columns = 1;
	size_t soap_flag_type = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__zeros *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__zeros, sizeof(struct ns__zeros), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__zeros(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rows", &a->rows, "xsd:int"))
				{	soap_flag_rows--;
					continue;
				}
			if (soap_flag_columns && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "columns", &a->columns, "xsd:int"))
				{	soap_flag_columns--;
					continue;
				}
			if (soap_flag_type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "type", &a->type, "xsd:string"))
				{	soap_flag_type--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__zeros *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__zeros, 0, sizeof(struct ns__zeros), 0, soap_copy_ns__zeros);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__zeros(struct soap *soap, const struct ns__zeros *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__zeros);
	if (soap_out_ns__zeros(soap, tag?tag:"ns:zeros", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__zeros * SOAP_FMAC4 soap_get_ns__zeros(struct soap *soap, struct ns__zeros *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__zeros(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__zeros * SOAP_FMAC2 soap_instantiate_ns__zeros(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__zeros(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__zeros, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__zeros);
		if (size)
			*size = sizeof(struct ns__zeros);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__zeros, n);
		if (size)
			*size = n * sizeof(struct ns__zeros);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__zeros*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__zeros(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__zeros %p -> %p\n", q, p));
	*(struct ns__zeros*)p = *(struct ns__zeros*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__zerosResponse(struct soap *soap, struct ns__zerosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__zerosResponse(struct soap *soap, const struct ns__zerosResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__zerosResponse(struct soap *soap, const char *tag, int id, const struct ns__zerosResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__zerosResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__zerosResponse * SOAP_FMAC4 soap_in_ns__zerosResponse(struct soap *soap, const char *tag, struct ns__zerosResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__zerosResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__zerosResponse, sizeof(struct ns__zerosResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__zerosResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__zerosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__zerosResponse, 0, sizeof(struct ns__zerosResponse), 0, soap_copy_ns__zerosResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__zerosResponse(struct soap *soap, const struct ns__zerosResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__zerosResponse);
	if (soap_out_ns__zerosResponse(soap, tag?tag:"ns:zerosResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__zerosResponse * SOAP_FMAC4 soap_get_ns__zerosResponse(struct soap *soap, struct ns__zerosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__zerosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__zerosResponse * SOAP_FMAC2 soap_instantiate_ns__zerosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__zerosResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__zerosResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__zerosResponse);
		if (size)
			*size = sizeof(struct ns__zerosResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__zerosResponse, n);
		if (size)
			*size = n * sizeof(struct ns__zerosResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__zerosResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__zerosResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__zerosResponse %p -> %p\n", q, p));
	*(struct ns__zerosResponse*)p = *(struct ns__zerosResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__dot(struct soap *soap, struct ns__dot *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->AnotherMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__dot(struct soap *soap, const struct ns__dot *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->AnotherMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__dot(struct soap *soap, const char *tag, int id, const struct ns__dot *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__dot), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "AnotherMatFilename", -1, &a->AnotherMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__dot * SOAP_FMAC4 soap_in_ns__dot(struct soap *soap, const char *tag, struct ns__dot *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_AnotherMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__dot *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__dot, sizeof(struct ns__dot), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__dot(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_AnotherMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "AnotherMatFilename", &a->AnotherMatFilename, "xsd:string"))
				{	soap_flag_AnotherMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__dot *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__dot, 0, sizeof(struct ns__dot), 0, soap_copy_ns__dot);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_AnotherMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__dot(struct soap *soap, const struct ns__dot *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__dot);
	if (soap_out_ns__dot(soap, tag?tag:"ns:dot", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__dot * SOAP_FMAC4 soap_get_ns__dot(struct soap *soap, struct ns__dot *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__dot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__dot * SOAP_FMAC2 soap_instantiate_ns__dot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__dot(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__dot, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__dot);
		if (size)
			*size = sizeof(struct ns__dot);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__dot, n);
		if (size)
			*size = n * sizeof(struct ns__dot);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__dot*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__dot(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__dot %p -> %p\n", q, p));
	*(struct ns__dot*)p = *(struct ns__dot*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__dotResponse(struct soap *soap, struct ns__dotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__dotResponse(struct soap *soap, const struct ns__dotResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__dotResponse(struct soap *soap, const char *tag, int id, const struct ns__dotResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__dotResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__dotResponse * SOAP_FMAC4 soap_in_ns__dotResponse(struct soap *soap, const char *tag, struct ns__dotResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__dotResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__dotResponse, sizeof(struct ns__dotResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__dotResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__dotResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__dotResponse, 0, sizeof(struct ns__dotResponse), 0, soap_copy_ns__dotResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__dotResponse(struct soap *soap, const struct ns__dotResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__dotResponse);
	if (soap_out_ns__dotResponse(soap, tag?tag:"ns:dotResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__dotResponse * SOAP_FMAC4 soap_get_ns__dotResponse(struct soap *soap, struct ns__dotResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__dotResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__dotResponse * SOAP_FMAC2 soap_instantiate_ns__dotResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__dotResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__dotResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__dotResponse);
		if (size)
			*size = sizeof(struct ns__dotResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__dotResponse, n);
		if (size)
			*size = n * sizeof(struct ns__dotResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__dotResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__dotResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__dotResponse %p -> %p\n", q, p));
	*(struct ns__dotResponse*)p = *(struct ns__dotResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__cross(struct soap *soap, struct ns__cross *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->AnotherMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__cross(struct soap *soap, const struct ns__cross *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->AnotherMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__cross(struct soap *soap, const char *tag, int id, const struct ns__cross *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__cross), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "AnotherMatFilename", -1, &a->AnotherMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__cross * SOAP_FMAC4 soap_in_ns__cross(struct soap *soap, const char *tag, struct ns__cross *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_AnotherMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__cross *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__cross, sizeof(struct ns__cross), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__cross(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_AnotherMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "AnotherMatFilename", &a->AnotherMatFilename, "xsd:string"))
				{	soap_flag_AnotherMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__cross *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__cross, 0, sizeof(struct ns__cross), 0, soap_copy_ns__cross);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_AnotherMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__cross(struct soap *soap, const struct ns__cross *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__cross);
	if (soap_out_ns__cross(soap, tag?tag:"ns:cross", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__cross * SOAP_FMAC4 soap_get_ns__cross(struct soap *soap, struct ns__cross *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__cross(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__cross * SOAP_FMAC2 soap_instantiate_ns__cross(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__cross(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__cross, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__cross);
		if (size)
			*size = sizeof(struct ns__cross);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__cross, n);
		if (size)
			*size = n * sizeof(struct ns__cross);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__cross*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__cross(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__cross %p -> %p\n", q, p));
	*(struct ns__cross*)p = *(struct ns__cross*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__crossResponse(struct soap *soap, struct ns__crossResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__crossResponse(struct soap *soap, const struct ns__crossResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__crossResponse(struct soap *soap, const char *tag, int id, const struct ns__crossResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__crossResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__crossResponse * SOAP_FMAC4 soap_in_ns__crossResponse(struct soap *soap, const char *tag, struct ns__crossResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__crossResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__crossResponse, sizeof(struct ns__crossResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__crossResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__crossResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__crossResponse, 0, sizeof(struct ns__crossResponse), 0, soap_copy_ns__crossResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__crossResponse(struct soap *soap, const struct ns__crossResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__crossResponse);
	if (soap_out_ns__crossResponse(soap, tag?tag:"ns:crossResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__crossResponse * SOAP_FMAC4 soap_get_ns__crossResponse(struct soap *soap, struct ns__crossResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__crossResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__crossResponse * SOAP_FMAC2 soap_instantiate_ns__crossResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__crossResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__crossResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__crossResponse);
		if (size)
			*size = sizeof(struct ns__crossResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__crossResponse, n);
		if (size)
			*size = n * sizeof(struct ns__crossResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__crossResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__crossResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__crossResponse %p -> %p\n", q, p));
	*(struct ns__crossResponse*)p = *(struct ns__crossResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__mul(struct soap *soap, struct ns__mul *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->AnotherMatFilename);
	a->scale_D = 1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__mul(struct soap *soap, const struct ns__mul *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->AnotherMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__mul(struct soap *soap, const char *tag, int id, const struct ns__mul *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__mul), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "AnotherMatFilename", -1, &a->AnotherMatFilename, ""))
		return soap->error;
	if (soap_out_double(soap, "scale-D", -1, &a->scale_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__mul * SOAP_FMAC4 soap_in_ns__mul(struct soap *soap, const char *tag, struct ns__mul *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_AnotherMatFilename = 1;
	size_t soap_flag_scale_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__mul *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__mul, sizeof(struct ns__mul), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__mul(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_AnotherMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "AnotherMatFilename", &a->AnotherMatFilename, "xsd:string"))
				{	soap_flag_AnotherMatFilename--;
					continue;
				}
			if (soap_flag_scale_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "scale-D", &a->scale_D, "xsd:double"))
				{	soap_flag_scale_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__mul *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__mul, 0, sizeof(struct ns__mul), 0, soap_copy_ns__mul);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_AnotherMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__mul(struct soap *soap, const struct ns__mul *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__mul);
	if (soap_out_ns__mul(soap, tag?tag:"ns:mul", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__mul * SOAP_FMAC4 soap_get_ns__mul(struct soap *soap, struct ns__mul *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__mul(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__mul * SOAP_FMAC2 soap_instantiate_ns__mul(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__mul(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__mul, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__mul);
		if (size)
			*size = sizeof(struct ns__mul);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__mul, n);
		if (size)
			*size = n * sizeof(struct ns__mul);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__mul*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__mul(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__mul %p -> %p\n", q, p));
	*(struct ns__mul*)p = *(struct ns__mul*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__mulResponse(struct soap *soap, struct ns__mulResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__mulResponse(struct soap *soap, const struct ns__mulResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__mulResponse(struct soap *soap, const char *tag, int id, const struct ns__mulResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__mulResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__mulResponse * SOAP_FMAC4 soap_in_ns__mulResponse(struct soap *soap, const char *tag, struct ns__mulResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__mulResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__mulResponse, sizeof(struct ns__mulResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__mulResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__mulResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__mulResponse, 0, sizeof(struct ns__mulResponse), 0, soap_copy_ns__mulResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__mulResponse(struct soap *soap, const struct ns__mulResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__mulResponse);
	if (soap_out_ns__mulResponse(soap, tag?tag:"ns:mulResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__mulResponse * SOAP_FMAC4 soap_get_ns__mulResponse(struct soap *soap, struct ns__mulResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__mulResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__mulResponse * SOAP_FMAC2 soap_instantiate_ns__mulResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__mulResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__mulResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__mulResponse);
		if (size)
			*size = sizeof(struct ns__mulResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__mulResponse, n);
		if (size)
			*size = n * sizeof(struct ns__mulResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__mulResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__mulResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__mulResponse %p -> %p\n", q, p));
	*(struct ns__mulResponse*)p = *(struct ns__mulResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Inverse(struct soap *soap, struct ns__Inverse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->InvMethod_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Inverse(struct soap *soap, const struct ns__Inverse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->InvMethod_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Inverse(struct soap *soap, const char *tag, int id, const struct ns__Inverse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Inverse), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "InvMethod-D", -1, &a->InvMethod_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Inverse * SOAP_FMAC4 soap_in_ns__Inverse(struct soap *soap, const char *tag, struct ns__Inverse *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_InvMethod_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Inverse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Inverse, sizeof(struct ns__Inverse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Inverse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_InvMethod_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InvMethod-D", &a->InvMethod_D, "xsd:string"))
				{	soap_flag_InvMethod_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Inverse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Inverse, 0, sizeof(struct ns__Inverse), 0, soap_copy_ns__Inverse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_InvMethod_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Inverse(struct soap *soap, const struct ns__Inverse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Inverse);
	if (soap_out_ns__Inverse(soap, tag?tag:"ns:Inverse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Inverse * SOAP_FMAC4 soap_get_ns__Inverse(struct soap *soap, struct ns__Inverse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Inverse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Inverse * SOAP_FMAC2 soap_instantiate_ns__Inverse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Inverse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Inverse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Inverse);
		if (size)
			*size = sizeof(struct ns__Inverse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Inverse, n);
		if (size)
			*size = n * sizeof(struct ns__Inverse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Inverse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Inverse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Inverse %p -> %p\n", q, p));
	*(struct ns__Inverse*)p = *(struct ns__Inverse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__InverseResponse(struct soap *soap, struct ns__InverseResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__InverseResponse(struct soap *soap, const struct ns__InverseResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__InverseResponse(struct soap *soap, const char *tag, int id, const struct ns__InverseResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__InverseResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__InverseResponse * SOAP_FMAC4 soap_in_ns__InverseResponse(struct soap *soap, const char *tag, struct ns__InverseResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__InverseResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__InverseResponse, sizeof(struct ns__InverseResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__InverseResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__InverseResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__InverseResponse, 0, sizeof(struct ns__InverseResponse), 0, soap_copy_ns__InverseResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__InverseResponse(struct soap *soap, const struct ns__InverseResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__InverseResponse);
	if (soap_out_ns__InverseResponse(soap, tag?tag:"ns:InverseResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__InverseResponse * SOAP_FMAC4 soap_get_ns__InverseResponse(struct soap *soap, struct ns__InverseResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__InverseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__InverseResponse * SOAP_FMAC2 soap_instantiate_ns__InverseResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__InverseResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__InverseResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__InverseResponse);
		if (size)
			*size = sizeof(struct ns__InverseResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__InverseResponse, n);
		if (size)
			*size = n * sizeof(struct ns__InverseResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__InverseResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__InverseResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__InverseResponse %p -> %p\n", q, p));
	*(struct ns__InverseResponse*)p = *(struct ns__InverseResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__createMat(struct soap *soap, struct ns__createMat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->rows = 0;
	a->columns = 0;
	soap_default_std__string(soap, &a->type);
	a->scalar = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__createMat(struct soap *soap, const struct ns__createMat *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__createMat(struct soap *soap, const char *tag, int id, const struct ns__createMat *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__createMat), type))
		return soap->error;
	if (soap_out_int(soap, "rows", -1, &a->rows, ""))
		return soap->error;
	if (soap_out_int(soap, "columns", -1, &a->columns, ""))
		return soap->error;
	if (soap_out_std__string(soap, "type", -1, &a->type, ""))
		return soap->error;
	if (soap_out_int(soap, "scalar", -1, &a->scalar, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__createMat * SOAP_FMAC4 soap_in_ns__createMat(struct soap *soap, const char *tag, struct ns__createMat *a, const char *type)
{
	size_t soap_flag_rows = 1;
	size_t soap_flag_columns = 1;
	size_t soap_flag_type = 1;
	size_t soap_flag_scalar = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__createMat *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__createMat, sizeof(struct ns__createMat), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__createMat(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rows", &a->rows, "xsd:int"))
				{	soap_flag_rows--;
					continue;
				}
			if (soap_flag_columns && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "columns", &a->columns, "xsd:int"))
				{	soap_flag_columns--;
					continue;
				}
			if (soap_flag_type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "type", &a->type, "xsd:string"))
				{	soap_flag_type--;
					continue;
				}
			if (soap_flag_scalar && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "scalar", &a->scalar, "xsd:int"))
				{	soap_flag_scalar--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__createMat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__createMat, 0, sizeof(struct ns__createMat), 0, soap_copy_ns__createMat);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__createMat(struct soap *soap, const struct ns__createMat *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__createMat);
	if (soap_out_ns__createMat(soap, tag?tag:"ns:createMat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__createMat * SOAP_FMAC4 soap_get_ns__createMat(struct soap *soap, struct ns__createMat *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__createMat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__createMat * SOAP_FMAC2 soap_instantiate_ns__createMat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__createMat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__createMat, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__createMat);
		if (size)
			*size = sizeof(struct ns__createMat);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__createMat, n);
		if (size)
			*size = n * sizeof(struct ns__createMat);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__createMat*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__createMat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__createMat %p -> %p\n", q, p));
	*(struct ns__createMat*)p = *(struct ns__createMat*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__createMatResponse(struct soap *soap, struct ns__createMatResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__createMatResponse(struct soap *soap, const struct ns__createMatResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__createMatResponse(struct soap *soap, const char *tag, int id, const struct ns__createMatResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__createMatResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__createMatResponse * SOAP_FMAC4 soap_in_ns__createMatResponse(struct soap *soap, const char *tag, struct ns__createMatResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__createMatResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__createMatResponse, sizeof(struct ns__createMatResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__createMatResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__createMatResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__createMatResponse, 0, sizeof(struct ns__createMatResponse), 0, soap_copy_ns__createMatResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__createMatResponse(struct soap *soap, const struct ns__createMatResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__createMatResponse);
	if (soap_out_ns__createMatResponse(soap, tag?tag:"ns:createMatResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__createMatResponse * SOAP_FMAC4 soap_get_ns__createMatResponse(struct soap *soap, struct ns__createMatResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__createMatResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__createMatResponse * SOAP_FMAC2 soap_instantiate_ns__createMatResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__createMatResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__createMatResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__createMatResponse);
		if (size)
			*size = sizeof(struct ns__createMatResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__createMatResponse, n);
		if (size)
			*size = n * sizeof(struct ns__createMatResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__createMatResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__createMatResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__createMatResponse %p -> %p\n", q, p));
	*(struct ns__createMatResponse*)p = *(struct ns__createMatResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__convertTo(struct soap *soap, struct ns__convertTo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	a->types = "CV_32FC1";
	a->alpha_D = 1;
	a->beta_D = 0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__convertTo(struct soap *soap, const struct ns__convertTo *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->types);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__convertTo(struct soap *soap, const char *tag, int id, const struct ns__convertTo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__convertTo), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "types", -1, &a->types, ""))
		return soap->error;
	if (soap_out_double(soap, "alpha-D", -1, &a->alpha_D, ""))
		return soap->error;
	if (soap_out_double(soap, "beta-D", -1, &a->beta_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__convertTo * SOAP_FMAC4 soap_in_ns__convertTo(struct soap *soap, const char *tag, struct ns__convertTo *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_types = 1;
	size_t soap_flag_alpha_D = 1;
	size_t soap_flag_beta_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__convertTo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__convertTo, sizeof(struct ns__convertTo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__convertTo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_types && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "types", &a->types, "xsd:string"))
				{	soap_flag_types--;
					continue;
				}
			if (soap_flag_alpha_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "alpha-D", &a->alpha_D, "xsd:double"))
				{	soap_flag_alpha_D--;
					continue;
				}
			if (soap_flag_beta_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "beta-D", &a->beta_D, "xsd:double"))
				{	soap_flag_beta_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__convertTo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__convertTo, 0, sizeof(struct ns__convertTo), 0, soap_copy_ns__convertTo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__convertTo(struct soap *soap, const struct ns__convertTo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__convertTo);
	if (soap_out_ns__convertTo(soap, tag?tag:"ns:convertTo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__convertTo * SOAP_FMAC4 soap_get_ns__convertTo(struct soap *soap, struct ns__convertTo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__convertTo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__convertTo * SOAP_FMAC2 soap_instantiate_ns__convertTo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__convertTo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__convertTo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__convertTo);
		if (size)
			*size = sizeof(struct ns__convertTo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__convertTo, n);
		if (size)
			*size = n * sizeof(struct ns__convertTo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__convertTo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__convertTo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__convertTo %p -> %p\n", q, p));
	*(struct ns__convertTo*)p = *(struct ns__convertTo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__convertToResponse(struct soap *soap, struct ns__convertToResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__convertToResponse(struct soap *soap, const struct ns__convertToResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__convertToResponse(struct soap *soap, const char *tag, int id, const struct ns__convertToResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__convertToResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__convertToResponse * SOAP_FMAC4 soap_in_ns__convertToResponse(struct soap *soap, const char *tag, struct ns__convertToResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__convertToResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__convertToResponse, sizeof(struct ns__convertToResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__convertToResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__convertToResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__convertToResponse, 0, sizeof(struct ns__convertToResponse), 0, soap_copy_ns__convertToResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__convertToResponse(struct soap *soap, const struct ns__convertToResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__convertToResponse);
	if (soap_out_ns__convertToResponse(soap, tag?tag:"ns:convertToResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__convertToResponse * SOAP_FMAC4 soap_get_ns__convertToResponse(struct soap *soap, struct ns__convertToResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__convertToResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__convertToResponse * SOAP_FMAC2 soap_instantiate_ns__convertToResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__convertToResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__convertToResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__convertToResponse);
		if (size)
			*size = sizeof(struct ns__convertToResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__convertToResponse, n);
		if (size)
			*size = n * sizeof(struct ns__convertToResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__convertToResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__convertToResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__convertToResponse %p -> %p\n", q, p));
	*(struct ns__convertToResponse*)p = *(struct ns__convertToResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__colRange(struct soap *soap, struct ns__colRange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_int(soap, &a->startCol);
	soap_default_int(soap, &a->endCol);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__colRange(struct soap *soap, const struct ns__colRange *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__colRange(struct soap *soap, const char *tag, int id, const struct ns__colRange *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__colRange), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "startCol", -1, &a->startCol, ""))
		return soap->error;
	if (soap_out_int(soap, "endCol", -1, &a->endCol, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__colRange * SOAP_FMAC4 soap_in_ns__colRange(struct soap *soap, const char *tag, struct ns__colRange *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_startCol = 1;
	size_t soap_flag_endCol = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__colRange *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__colRange, sizeof(struct ns__colRange), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__colRange(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_startCol && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "startCol", &a->startCol, "xsd:int"))
				{	soap_flag_startCol--;
					continue;
				}
			if (soap_flag_endCol && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "endCol", &a->endCol, "xsd:int"))
				{	soap_flag_endCol--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__colRange *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__colRange, 0, sizeof(struct ns__colRange), 0, soap_copy_ns__colRange);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_startCol > 0 || soap_flag_endCol > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__colRange(struct soap *soap, const struct ns__colRange *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__colRange);
	if (soap_out_ns__colRange(soap, tag?tag:"ns:colRange", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__colRange * SOAP_FMAC4 soap_get_ns__colRange(struct soap *soap, struct ns__colRange *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__colRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__colRange * SOAP_FMAC2 soap_instantiate_ns__colRange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__colRange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__colRange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__colRange);
		if (size)
			*size = sizeof(struct ns__colRange);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__colRange, n);
		if (size)
			*size = n * sizeof(struct ns__colRange);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__colRange*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__colRange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__colRange %p -> %p\n", q, p));
	*(struct ns__colRange*)p = *(struct ns__colRange*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__colRangeResponse(struct soap *soap, struct ns__colRangeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__colRangeResponse(struct soap *soap, const struct ns__colRangeResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__colRangeResponse(struct soap *soap, const char *tag, int id, const struct ns__colRangeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__colRangeResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__colRangeResponse * SOAP_FMAC4 soap_in_ns__colRangeResponse(struct soap *soap, const char *tag, struct ns__colRangeResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__colRangeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__colRangeResponse, sizeof(struct ns__colRangeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__colRangeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__colRangeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__colRangeResponse, 0, sizeof(struct ns__colRangeResponse), 0, soap_copy_ns__colRangeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__colRangeResponse(struct soap *soap, const struct ns__colRangeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__colRangeResponse);
	if (soap_out_ns__colRangeResponse(soap, tag?tag:"ns:colRangeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__colRangeResponse * SOAP_FMAC4 soap_get_ns__colRangeResponse(struct soap *soap, struct ns__colRangeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__colRangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__colRangeResponse * SOAP_FMAC2 soap_instantiate_ns__colRangeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__colRangeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__colRangeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__colRangeResponse);
		if (size)
			*size = sizeof(struct ns__colRangeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__colRangeResponse, n);
		if (size)
			*size = n * sizeof(struct ns__colRangeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__colRangeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__colRangeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__colRangeResponse %p -> %p\n", q, p));
	*(struct ns__colRangeResponse*)p = *(struct ns__colRangeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__rowRange(struct soap *soap, struct ns__rowRange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_int(soap, &a->startCol);
	soap_default_int(soap, &a->endCol);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__rowRange(struct soap *soap, const struct ns__rowRange *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__rowRange(struct soap *soap, const char *tag, int id, const struct ns__rowRange *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__rowRange), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "startCol", -1, &a->startCol, ""))
		return soap->error;
	if (soap_out_int(soap, "endCol", -1, &a->endCol, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__rowRange * SOAP_FMAC4 soap_in_ns__rowRange(struct soap *soap, const char *tag, struct ns__rowRange *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_startCol = 1;
	size_t soap_flag_endCol = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__rowRange *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__rowRange, sizeof(struct ns__rowRange), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__rowRange(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_startCol && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "startCol", &a->startCol, "xsd:int"))
				{	soap_flag_startCol--;
					continue;
				}
			if (soap_flag_endCol && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "endCol", &a->endCol, "xsd:int"))
				{	soap_flag_endCol--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__rowRange *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__rowRange, 0, sizeof(struct ns__rowRange), 0, soap_copy_ns__rowRange);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_startCol > 0 || soap_flag_endCol > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__rowRange(struct soap *soap, const struct ns__rowRange *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__rowRange);
	if (soap_out_ns__rowRange(soap, tag?tag:"ns:rowRange", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__rowRange * SOAP_FMAC4 soap_get_ns__rowRange(struct soap *soap, struct ns__rowRange *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__rowRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__rowRange * SOAP_FMAC2 soap_instantiate_ns__rowRange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__rowRange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__rowRange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__rowRange);
		if (size)
			*size = sizeof(struct ns__rowRange);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__rowRange, n);
		if (size)
			*size = n * sizeof(struct ns__rowRange);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__rowRange*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__rowRange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__rowRange %p -> %p\n", q, p));
	*(struct ns__rowRange*)p = *(struct ns__rowRange*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__rowRangeResponse(struct soap *soap, struct ns__rowRangeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__rowRangeResponse(struct soap *soap, const struct ns__rowRangeResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__rowRangeResponse(struct soap *soap, const char *tag, int id, const struct ns__rowRangeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__rowRangeResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__rowRangeResponse * SOAP_FMAC4 soap_in_ns__rowRangeResponse(struct soap *soap, const char *tag, struct ns__rowRangeResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__rowRangeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__rowRangeResponse, sizeof(struct ns__rowRangeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__rowRangeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__rowRangeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__rowRangeResponse, 0, sizeof(struct ns__rowRangeResponse), 0, soap_copy_ns__rowRangeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__rowRangeResponse(struct soap *soap, const struct ns__rowRangeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__rowRangeResponse);
	if (soap_out_ns__rowRangeResponse(soap, tag?tag:"ns:rowRangeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__rowRangeResponse * SOAP_FMAC4 soap_get_ns__rowRangeResponse(struct soap *soap, struct ns__rowRangeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__rowRangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__rowRangeResponse * SOAP_FMAC2 soap_instantiate_ns__rowRangeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__rowRangeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__rowRangeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__rowRangeResponse);
		if (size)
			*size = sizeof(struct ns__rowRangeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__rowRangeResponse, n);
		if (size)
			*size = n * sizeof(struct ns__rowRangeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__rowRangeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__rowRangeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__rowRangeResponse %p -> %p\n", q, p));
	*(struct ns__rowRangeResponse*)p = *(struct ns__rowRangeResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
