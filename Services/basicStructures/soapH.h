/* soapH.h
   Generated by gSOAP 2.8.14 from BasicStructures.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin(soap), soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin(soap), soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_begin(soap), soap_serialize_float(soap, data), soap_begin_send(soap) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_begin(soap), soap_serialize_double(soap, data), soap_begin_send(soap) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_begin(soap), soap_serialize_bool(soap, data), soap_begin_send(soap) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_begin(soap), soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__MatDetail
#define SOAP_TYPE_ns__MatDetail (7)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MatDetail(struct soap*, const char*, int, const ns__MatDetail *, const char*);
SOAP_FMAC3 ns__MatDetail * SOAP_FMAC4 soap_in_ns__MatDetail(struct soap*, const char*, ns__MatDetail *, const char*);

#ifndef soap_write_ns__MatDetail
#define soap_write_ns__MatDetail(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns:MatDetail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns__MatDetail * SOAP_FMAC4 soap_get_ns__MatDetail(struct soap*, ns__MatDetail *, const char*, const char*);

#ifndef soap_read_ns__MatDetail
#define soap_read_ns__MatDetail(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__MatDetail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns__MatDetail * SOAP_FMAC2 soap_instantiate_ns__MatDetail(struct soap*, int, const char*, const char*, size_t*);

inline ns__MatDetail * soap_new_ns__MatDetail(struct soap *soap, int n = -1) { return soap_instantiate_ns__MatDetail(soap, n, NULL, NULL, NULL); }

inline ns__MatDetail * soap_new_req_ns__MatDetail(struct soap *soap, int columns, int rows, std::string& depth, std::string& type, int channel, bool empty) { ns__MatDetail *_p = soap_instantiate_ns__MatDetail(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__MatDetail::columns = columns; _p->ns__MatDetail::rows = rows; _p->ns__MatDetail::depth = depth; _p->ns__MatDetail::type = type; _p->ns__MatDetail::channel = channel; _p->ns__MatDetail::empty = empty; } return _p; }

inline ns__MatDetail * soap_new_set_ns__MatDetail(struct soap *soap, int columns, int rows, std::string& depth, std::string& type, int channel, bool empty) { ns__MatDetail *_p = soap_instantiate_ns__MatDetail(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__MatDetail::columns = columns; _p->ns__MatDetail::rows = rows; _p->ns__MatDetail::depth = depth; _p->ns__MatDetail::type = type; _p->ns__MatDetail::channel = channel; _p->ns__MatDetail::empty = empty; } return _p; }

inline void soap_delete_ns__MatDetail(struct soap *soap, ns__MatDetail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MatDetail(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__accessPixelValue
#define SOAP_TYPE_ns__accessPixelValue (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__accessPixelValue(struct soap*, struct ns__accessPixelValue *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__accessPixelValue(struct soap*, const struct ns__accessPixelValue *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__accessPixelValue(struct soap*, const char*, int, const struct ns__accessPixelValue *, const char*);
SOAP_FMAC3 struct ns__accessPixelValue * SOAP_FMAC4 soap_in_ns__accessPixelValue(struct soap*, const char*, struct ns__accessPixelValue *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__accessPixelValue(struct soap*, const struct ns__accessPixelValue *, const char*, const char*);

#ifndef soap_write_ns__accessPixelValue
#define soap_write_ns__accessPixelValue(soap, data) ( soap_begin(soap), soap_serialize_ns__accessPixelValue(soap, data), soap_begin_send(soap) || soap_put_ns__accessPixelValue(soap, data, "ns:accessPixelValue", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__accessPixelValue * SOAP_FMAC4 soap_get_ns__accessPixelValue(struct soap*, struct ns__accessPixelValue *, const char*, const char*);

#ifndef soap_read_ns__accessPixelValue
#define soap_read_ns__accessPixelValue(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__accessPixelValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__accessPixelValue * SOAP_FMAC2 soap_instantiate_ns__accessPixelValue(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__accessPixelValue * soap_new_ns__accessPixelValue(struct soap *soap, int n = -1) { return soap_instantiate_ns__accessPixelValue(soap, n, NULL, NULL, NULL); }

inline struct ns__accessPixelValue * soap_new_req_ns__accessPixelValue(struct soap *soap, std::string& InputMatFilename, std::string& returnType, int intToSet, float floatToSet, int pixelI, int pixelJ, int channel) { struct ns__accessPixelValue *_p = soap_instantiate_ns__accessPixelValue(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__accessPixelValue(soap, _p); _p->InputMatFilename = InputMatFilename; _p->returnType = returnType; _p->intToSet = intToSet; _p->floatToSet = floatToSet; _p->pixelI = pixelI; _p->pixelJ = pixelJ; _p->channel = channel; } return _p; }

inline struct ns__accessPixelValue * soap_new_set_ns__accessPixelValue(struct soap *soap, std::string& InputMatFilename, std::string& returnType, int intToSet, float floatToSet, int pixelI, int pixelJ, int channel) { struct ns__accessPixelValue *_p = soap_instantiate_ns__accessPixelValue(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__accessPixelValue(soap, _p); _p->InputMatFilename = InputMatFilename; _p->returnType = returnType; _p->intToSet = intToSet; _p->floatToSet = floatToSet; _p->pixelI = pixelI; _p->pixelJ = pixelJ; _p->channel = channel; } return _p; }

inline void soap_delete_ns__accessPixelValue(struct soap *soap, struct ns__accessPixelValue *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__accessPixelValue(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__accessPixelValueResponse
#define SOAP_TYPE_ns__accessPixelValueResponse (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__accessPixelValueResponse(struct soap*, struct ns__accessPixelValueResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__accessPixelValueResponse(struct soap*, const struct ns__accessPixelValueResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__accessPixelValueResponse(struct soap*, const char*, int, const struct ns__accessPixelValueResponse *, const char*);
SOAP_FMAC3 struct ns__accessPixelValueResponse * SOAP_FMAC4 soap_in_ns__accessPixelValueResponse(struct soap*, const char*, struct ns__accessPixelValueResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__accessPixelValueResponse(struct soap*, const struct ns__accessPixelValueResponse *, const char*, const char*);

#ifndef soap_write_ns__accessPixelValueResponse
#define soap_write_ns__accessPixelValueResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__accessPixelValueResponse(soap, data), soap_begin_send(soap) || soap_put_ns__accessPixelValueResponse(soap, data, "ns:accessPixelValueResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__accessPixelValueResponse * SOAP_FMAC4 soap_get_ns__accessPixelValueResponse(struct soap*, struct ns__accessPixelValueResponse *, const char*, const char*);

#ifndef soap_read_ns__accessPixelValueResponse
#define soap_read_ns__accessPixelValueResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__accessPixelValueResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__accessPixelValueResponse * SOAP_FMAC2 soap_instantiate_ns__accessPixelValueResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__accessPixelValueResponse * soap_new_ns__accessPixelValueResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__accessPixelValueResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__accessPixelValueResponse * soap_new_req_ns__accessPixelValueResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__accessPixelValueResponse *_p = soap_instantiate_ns__accessPixelValueResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__accessPixelValueResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__accessPixelValueResponse * soap_new_set_ns__accessPixelValueResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__accessPixelValueResponse *_p = soap_instantiate_ns__accessPixelValueResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__accessPixelValueResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__accessPixelValueResponse(struct soap *soap, struct ns__accessPixelValueResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__accessPixelValueResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__printAllMatValue
#define SOAP_TYPE_ns__printAllMatValue (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__printAllMatValue(struct soap*, struct ns__printAllMatValue *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__printAllMatValue(struct soap*, const struct ns__printAllMatValue *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__printAllMatValue(struct soap*, const char*, int, const struct ns__printAllMatValue *, const char*);
SOAP_FMAC3 struct ns__printAllMatValue * SOAP_FMAC4 soap_in_ns__printAllMatValue(struct soap*, const char*, struct ns__printAllMatValue *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__printAllMatValue(struct soap*, const struct ns__printAllMatValue *, const char*, const char*);

#ifndef soap_write_ns__printAllMatValue
#define soap_write_ns__printAllMatValue(soap, data) ( soap_begin(soap), soap_serialize_ns__printAllMatValue(soap, data), soap_begin_send(soap) || soap_put_ns__printAllMatValue(soap, data, "ns:printAllMatValue", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__printAllMatValue * SOAP_FMAC4 soap_get_ns__printAllMatValue(struct soap*, struct ns__printAllMatValue *, const char*, const char*);

#ifndef soap_read_ns__printAllMatValue
#define soap_read_ns__printAllMatValue(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__printAllMatValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__printAllMatValue * SOAP_FMAC2 soap_instantiate_ns__printAllMatValue(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__printAllMatValue * soap_new_ns__printAllMatValue(struct soap *soap, int n = -1) { return soap_instantiate_ns__printAllMatValue(soap, n, NULL, NULL, NULL); }

inline struct ns__printAllMatValue * soap_new_req_ns__printAllMatValue(struct soap *soap, std::string& InputMatFilename) { struct ns__printAllMatValue *_p = soap_instantiate_ns__printAllMatValue(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__printAllMatValue(soap, _p); _p->InputMatFilename = InputMatFilename; } return _p; }

inline struct ns__printAllMatValue * soap_new_set_ns__printAllMatValue(struct soap *soap, std::string& InputMatFilename) { struct ns__printAllMatValue *_p = soap_instantiate_ns__printAllMatValue(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__printAllMatValue(soap, _p); _p->InputMatFilename = InputMatFilename; } return _p; }

inline void soap_delete_ns__printAllMatValue(struct soap *soap, struct ns__printAllMatValue *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__printAllMatValue(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__printAllMatValueResponse
#define SOAP_TYPE_ns__printAllMatValueResponse (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__printAllMatValueResponse(struct soap*, struct ns__printAllMatValueResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__printAllMatValueResponse(struct soap*, const struct ns__printAllMatValueResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__printAllMatValueResponse(struct soap*, const char*, int, const struct ns__printAllMatValueResponse *, const char*);
SOAP_FMAC3 struct ns__printAllMatValueResponse * SOAP_FMAC4 soap_in_ns__printAllMatValueResponse(struct soap*, const char*, struct ns__printAllMatValueResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__printAllMatValueResponse(struct soap*, const struct ns__printAllMatValueResponse *, const char*, const char*);

#ifndef soap_write_ns__printAllMatValueResponse
#define soap_write_ns__printAllMatValueResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__printAllMatValueResponse(soap, data), soap_begin_send(soap) || soap_put_ns__printAllMatValueResponse(soap, data, "ns:printAllMatValueResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__printAllMatValueResponse * SOAP_FMAC4 soap_get_ns__printAllMatValueResponse(struct soap*, struct ns__printAllMatValueResponse *, const char*, const char*);

#ifndef soap_read_ns__printAllMatValueResponse
#define soap_read_ns__printAllMatValueResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__printAllMatValueResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__printAllMatValueResponse * SOAP_FMAC2 soap_instantiate_ns__printAllMatValueResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__printAllMatValueResponse * soap_new_ns__printAllMatValueResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__printAllMatValueResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__printAllMatValueResponse * soap_new_req_ns__printAllMatValueResponse(struct soap *soap, std::string& OutputMat) { struct ns__printAllMatValueResponse *_p = soap_instantiate_ns__printAllMatValueResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__printAllMatValueResponse(soap, _p); _p->OutputMat = OutputMat; } return _p; }

inline struct ns__printAllMatValueResponse * soap_new_set_ns__printAllMatValueResponse(struct soap *soap, std::string& OutputMat) { struct ns__printAllMatValueResponse *_p = soap_instantiate_ns__printAllMatValueResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__printAllMatValueResponse(soap, _p); _p->OutputMat = OutputMat; } return _p; }

inline void soap_delete_ns__printAllMatValueResponse(struct soap *soap, struct ns__printAllMatValueResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__printAllMatValueResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getMatDetail
#define SOAP_TYPE_ns__getMatDetail (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getMatDetail(struct soap*, struct ns__getMatDetail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getMatDetail(struct soap*, const struct ns__getMatDetail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getMatDetail(struct soap*, const char*, int, const struct ns__getMatDetail *, const char*);
SOAP_FMAC3 struct ns__getMatDetail * SOAP_FMAC4 soap_in_ns__getMatDetail(struct soap*, const char*, struct ns__getMatDetail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getMatDetail(struct soap*, const struct ns__getMatDetail *, const char*, const char*);

#ifndef soap_write_ns__getMatDetail
#define soap_write_ns__getMatDetail(soap, data) ( soap_begin(soap), soap_serialize_ns__getMatDetail(soap, data), soap_begin_send(soap) || soap_put_ns__getMatDetail(soap, data, "ns:getMatDetail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__getMatDetail * SOAP_FMAC4 soap_get_ns__getMatDetail(struct soap*, struct ns__getMatDetail *, const char*, const char*);

#ifndef soap_read_ns__getMatDetail
#define soap_read_ns__getMatDetail(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getMatDetail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__getMatDetail * SOAP_FMAC2 soap_instantiate_ns__getMatDetail(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getMatDetail * soap_new_ns__getMatDetail(struct soap *soap, int n = -1) { return soap_instantiate_ns__getMatDetail(soap, n, NULL, NULL, NULL); }

inline struct ns__getMatDetail * soap_new_req_ns__getMatDetail(struct soap *soap, std::string& InputMatFilename) { struct ns__getMatDetail *_p = soap_instantiate_ns__getMatDetail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getMatDetail(soap, _p); _p->InputMatFilename = InputMatFilename; } return _p; }

inline struct ns__getMatDetail * soap_new_set_ns__getMatDetail(struct soap *soap, std::string& InputMatFilename) { struct ns__getMatDetail *_p = soap_instantiate_ns__getMatDetail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getMatDetail(soap, _p); _p->InputMatFilename = InputMatFilename; } return _p; }

inline void soap_delete_ns__getMatDetail(struct soap *soap, struct ns__getMatDetail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getMatDetail(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__ones
#define SOAP_TYPE_ns__ones (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ones(struct soap*, struct ns__ones *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ones(struct soap*, const struct ns__ones *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ones(struct soap*, const char*, int, const struct ns__ones *, const char*);
SOAP_FMAC3 struct ns__ones * SOAP_FMAC4 soap_in_ns__ones(struct soap*, const char*, struct ns__ones *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ones(struct soap*, const struct ns__ones *, const char*, const char*);

#ifndef soap_write_ns__ones
#define soap_write_ns__ones(soap, data) ( soap_begin(soap), soap_serialize_ns__ones(soap, data), soap_begin_send(soap) || soap_put_ns__ones(soap, data, "ns:ones", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__ones * SOAP_FMAC4 soap_get_ns__ones(struct soap*, struct ns__ones *, const char*, const char*);

#ifndef soap_read_ns__ones
#define soap_read_ns__ones(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__ones(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__ones * SOAP_FMAC2 soap_instantiate_ns__ones(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ones * soap_new_ns__ones(struct soap *soap, int n = -1) { return soap_instantiate_ns__ones(soap, n, NULL, NULL, NULL); }

inline struct ns__ones * soap_new_req_ns__ones(struct soap *soap, int rows, int columns, int fillWith, std::string& type) { struct ns__ones *_p = soap_instantiate_ns__ones(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__ones(soap, _p); _p->rows = rows; _p->columns = columns; _p->fillWith = fillWith; _p->type = type; } return _p; }

inline struct ns__ones * soap_new_set_ns__ones(struct soap *soap, int rows, int columns, int fillWith, std::string& type) { struct ns__ones *_p = soap_instantiate_ns__ones(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__ones(soap, _p); _p->rows = rows; _p->columns = columns; _p->fillWith = fillWith; _p->type = type; } return _p; }

inline void soap_delete_ns__ones(struct soap *soap, struct ns__ones *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ones(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__onesResponse
#define SOAP_TYPE_ns__onesResponse (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__onesResponse(struct soap*, struct ns__onesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__onesResponse(struct soap*, const struct ns__onesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__onesResponse(struct soap*, const char*, int, const struct ns__onesResponse *, const char*);
SOAP_FMAC3 struct ns__onesResponse * SOAP_FMAC4 soap_in_ns__onesResponse(struct soap*, const char*, struct ns__onesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__onesResponse(struct soap*, const struct ns__onesResponse *, const char*, const char*);

#ifndef soap_write_ns__onesResponse
#define soap_write_ns__onesResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__onesResponse(soap, data), soap_begin_send(soap) || soap_put_ns__onesResponse(soap, data, "ns:onesResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__onesResponse * SOAP_FMAC4 soap_get_ns__onesResponse(struct soap*, struct ns__onesResponse *, const char*, const char*);

#ifndef soap_read_ns__onesResponse
#define soap_read_ns__onesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__onesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__onesResponse * SOAP_FMAC2 soap_instantiate_ns__onesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__onesResponse * soap_new_ns__onesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__onesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__onesResponse * soap_new_req_ns__onesResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__onesResponse *_p = soap_instantiate_ns__onesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__onesResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__onesResponse * soap_new_set_ns__onesResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__onesResponse *_p = soap_instantiate_ns__onesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__onesResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__onesResponse(struct soap *soap, struct ns__onesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__onesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__zeros
#define SOAP_TYPE_ns__zeros (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__zeros(struct soap*, struct ns__zeros *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__zeros(struct soap*, const struct ns__zeros *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__zeros(struct soap*, const char*, int, const struct ns__zeros *, const char*);
SOAP_FMAC3 struct ns__zeros * SOAP_FMAC4 soap_in_ns__zeros(struct soap*, const char*, struct ns__zeros *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__zeros(struct soap*, const struct ns__zeros *, const char*, const char*);

#ifndef soap_write_ns__zeros
#define soap_write_ns__zeros(soap, data) ( soap_begin(soap), soap_serialize_ns__zeros(soap, data), soap_begin_send(soap) || soap_put_ns__zeros(soap, data, "ns:zeros", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__zeros * SOAP_FMAC4 soap_get_ns__zeros(struct soap*, struct ns__zeros *, const char*, const char*);

#ifndef soap_read_ns__zeros
#define soap_read_ns__zeros(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__zeros(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__zeros * SOAP_FMAC2 soap_instantiate_ns__zeros(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__zeros * soap_new_ns__zeros(struct soap *soap, int n = -1) { return soap_instantiate_ns__zeros(soap, n, NULL, NULL, NULL); }

inline struct ns__zeros * soap_new_req_ns__zeros(struct soap *soap, int rows, int columns, std::string& type) { struct ns__zeros *_p = soap_instantiate_ns__zeros(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__zeros(soap, _p); _p->rows = rows; _p->columns = columns; _p->type = type; } return _p; }

inline struct ns__zeros * soap_new_set_ns__zeros(struct soap *soap, int rows, int columns, std::string& type) { struct ns__zeros *_p = soap_instantiate_ns__zeros(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__zeros(soap, _p); _p->rows = rows; _p->columns = columns; _p->type = type; } return _p; }

inline void soap_delete_ns__zeros(struct soap *soap, struct ns__zeros *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__zeros(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__zerosResponse
#define SOAP_TYPE_ns__zerosResponse (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__zerosResponse(struct soap*, struct ns__zerosResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__zerosResponse(struct soap*, const struct ns__zerosResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__zerosResponse(struct soap*, const char*, int, const struct ns__zerosResponse *, const char*);
SOAP_FMAC3 struct ns__zerosResponse * SOAP_FMAC4 soap_in_ns__zerosResponse(struct soap*, const char*, struct ns__zerosResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__zerosResponse(struct soap*, const struct ns__zerosResponse *, const char*, const char*);

#ifndef soap_write_ns__zerosResponse
#define soap_write_ns__zerosResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__zerosResponse(soap, data), soap_begin_send(soap) || soap_put_ns__zerosResponse(soap, data, "ns:zerosResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__zerosResponse * SOAP_FMAC4 soap_get_ns__zerosResponse(struct soap*, struct ns__zerosResponse *, const char*, const char*);

#ifndef soap_read_ns__zerosResponse
#define soap_read_ns__zerosResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__zerosResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__zerosResponse * SOAP_FMAC2 soap_instantiate_ns__zerosResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__zerosResponse * soap_new_ns__zerosResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__zerosResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__zerosResponse * soap_new_req_ns__zerosResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__zerosResponse *_p = soap_instantiate_ns__zerosResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__zerosResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__zerosResponse * soap_new_set_ns__zerosResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__zerosResponse *_p = soap_instantiate_ns__zerosResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__zerosResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__zerosResponse(struct soap *soap, struct ns__zerosResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__zerosResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__dot
#define SOAP_TYPE_ns__dot (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__dot(struct soap*, struct ns__dot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__dot(struct soap*, const struct ns__dot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__dot(struct soap*, const char*, int, const struct ns__dot *, const char*);
SOAP_FMAC3 struct ns__dot * SOAP_FMAC4 soap_in_ns__dot(struct soap*, const char*, struct ns__dot *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__dot(struct soap*, const struct ns__dot *, const char*, const char*);

#ifndef soap_write_ns__dot
#define soap_write_ns__dot(soap, data) ( soap_begin(soap), soap_serialize_ns__dot(soap, data), soap_begin_send(soap) || soap_put_ns__dot(soap, data, "ns:dot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__dot * SOAP_FMAC4 soap_get_ns__dot(struct soap*, struct ns__dot *, const char*, const char*);

#ifndef soap_read_ns__dot
#define soap_read_ns__dot(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__dot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__dot * SOAP_FMAC2 soap_instantiate_ns__dot(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__dot * soap_new_ns__dot(struct soap *soap, int n = -1) { return soap_instantiate_ns__dot(soap, n, NULL, NULL, NULL); }

inline struct ns__dot * soap_new_req_ns__dot(struct soap *soap, std::string& InputMatFilename, std::string& AnotherMatFilename) { struct ns__dot *_p = soap_instantiate_ns__dot(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__dot(soap, _p); _p->InputMatFilename = InputMatFilename; _p->AnotherMatFilename = AnotherMatFilename; } return _p; }

inline struct ns__dot * soap_new_set_ns__dot(struct soap *soap, std::string& InputMatFilename, std::string& AnotherMatFilename) { struct ns__dot *_p = soap_instantiate_ns__dot(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__dot(soap, _p); _p->InputMatFilename = InputMatFilename; _p->AnotherMatFilename = AnotherMatFilename; } return _p; }

inline void soap_delete_ns__dot(struct soap *soap, struct ns__dot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__dot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__dotResponse
#define SOAP_TYPE_ns__dotResponse (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__dotResponse(struct soap*, struct ns__dotResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__dotResponse(struct soap*, const struct ns__dotResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__dotResponse(struct soap*, const char*, int, const struct ns__dotResponse *, const char*);
SOAP_FMAC3 struct ns__dotResponse * SOAP_FMAC4 soap_in_ns__dotResponse(struct soap*, const char*, struct ns__dotResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__dotResponse(struct soap*, const struct ns__dotResponse *, const char*, const char*);

#ifndef soap_write_ns__dotResponse
#define soap_write_ns__dotResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__dotResponse(soap, data), soap_begin_send(soap) || soap_put_ns__dotResponse(soap, data, "ns:dotResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__dotResponse * SOAP_FMAC4 soap_get_ns__dotResponse(struct soap*, struct ns__dotResponse *, const char*, const char*);

#ifndef soap_read_ns__dotResponse
#define soap_read_ns__dotResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__dotResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__dotResponse * SOAP_FMAC2 soap_instantiate_ns__dotResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__dotResponse * soap_new_ns__dotResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__dotResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__dotResponse * soap_new_req_ns__dotResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__dotResponse *_p = soap_instantiate_ns__dotResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__dotResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__dotResponse * soap_new_set_ns__dotResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__dotResponse *_p = soap_instantiate_ns__dotResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__dotResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__dotResponse(struct soap *soap, struct ns__dotResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__dotResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__cross
#define SOAP_TYPE_ns__cross (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__cross(struct soap*, struct ns__cross *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__cross(struct soap*, const struct ns__cross *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__cross(struct soap*, const char*, int, const struct ns__cross *, const char*);
SOAP_FMAC3 struct ns__cross * SOAP_FMAC4 soap_in_ns__cross(struct soap*, const char*, struct ns__cross *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__cross(struct soap*, const struct ns__cross *, const char*, const char*);

#ifndef soap_write_ns__cross
#define soap_write_ns__cross(soap, data) ( soap_begin(soap), soap_serialize_ns__cross(soap, data), soap_begin_send(soap) || soap_put_ns__cross(soap, data, "ns:cross", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__cross * SOAP_FMAC4 soap_get_ns__cross(struct soap*, struct ns__cross *, const char*, const char*);

#ifndef soap_read_ns__cross
#define soap_read_ns__cross(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__cross(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__cross * SOAP_FMAC2 soap_instantiate_ns__cross(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__cross * soap_new_ns__cross(struct soap *soap, int n = -1) { return soap_instantiate_ns__cross(soap, n, NULL, NULL, NULL); }

inline struct ns__cross * soap_new_req_ns__cross(struct soap *soap, std::string& InputMatFilename, std::string& AnotherMatFilename) { struct ns__cross *_p = soap_instantiate_ns__cross(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__cross(soap, _p); _p->InputMatFilename = InputMatFilename; _p->AnotherMatFilename = AnotherMatFilename; } return _p; }

inline struct ns__cross * soap_new_set_ns__cross(struct soap *soap, std::string& InputMatFilename, std::string& AnotherMatFilename) { struct ns__cross *_p = soap_instantiate_ns__cross(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__cross(soap, _p); _p->InputMatFilename = InputMatFilename; _p->AnotherMatFilename = AnotherMatFilename; } return _p; }

inline void soap_delete_ns__cross(struct soap *soap, struct ns__cross *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__cross(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__crossResponse
#define SOAP_TYPE_ns__crossResponse (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__crossResponse(struct soap*, struct ns__crossResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__crossResponse(struct soap*, const struct ns__crossResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__crossResponse(struct soap*, const char*, int, const struct ns__crossResponse *, const char*);
SOAP_FMAC3 struct ns__crossResponse * SOAP_FMAC4 soap_in_ns__crossResponse(struct soap*, const char*, struct ns__crossResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__crossResponse(struct soap*, const struct ns__crossResponse *, const char*, const char*);

#ifndef soap_write_ns__crossResponse
#define soap_write_ns__crossResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__crossResponse(soap, data), soap_begin_send(soap) || soap_put_ns__crossResponse(soap, data, "ns:crossResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__crossResponse * SOAP_FMAC4 soap_get_ns__crossResponse(struct soap*, struct ns__crossResponse *, const char*, const char*);

#ifndef soap_read_ns__crossResponse
#define soap_read_ns__crossResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__crossResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__crossResponse * SOAP_FMAC2 soap_instantiate_ns__crossResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__crossResponse * soap_new_ns__crossResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__crossResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__crossResponse * soap_new_req_ns__crossResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__crossResponse *_p = soap_instantiate_ns__crossResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__crossResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__crossResponse * soap_new_set_ns__crossResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__crossResponse *_p = soap_instantiate_ns__crossResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__crossResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__crossResponse(struct soap *soap, struct ns__crossResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__crossResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__mul
#define SOAP_TYPE_ns__mul (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__mul(struct soap*, struct ns__mul *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__mul(struct soap*, const struct ns__mul *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__mul(struct soap*, const char*, int, const struct ns__mul *, const char*);
SOAP_FMAC3 struct ns__mul * SOAP_FMAC4 soap_in_ns__mul(struct soap*, const char*, struct ns__mul *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__mul(struct soap*, const struct ns__mul *, const char*, const char*);

#ifndef soap_write_ns__mul
#define soap_write_ns__mul(soap, data) ( soap_begin(soap), soap_serialize_ns__mul(soap, data), soap_begin_send(soap) || soap_put_ns__mul(soap, data, "ns:mul", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__mul * SOAP_FMAC4 soap_get_ns__mul(struct soap*, struct ns__mul *, const char*, const char*);

#ifndef soap_read_ns__mul
#define soap_read_ns__mul(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__mul(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__mul * SOAP_FMAC2 soap_instantiate_ns__mul(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__mul * soap_new_ns__mul(struct soap *soap, int n = -1) { return soap_instantiate_ns__mul(soap, n, NULL, NULL, NULL); }

inline struct ns__mul * soap_new_req_ns__mul(struct soap *soap, std::string& InputMatFilename, std::string& AnotherMatFilename, double scale_D) { struct ns__mul *_p = soap_instantiate_ns__mul(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__mul(soap, _p); _p->InputMatFilename = InputMatFilename; _p->AnotherMatFilename = AnotherMatFilename; _p->scale_D = scale_D; } return _p; }

inline struct ns__mul * soap_new_set_ns__mul(struct soap *soap, std::string& InputMatFilename, std::string& AnotherMatFilename, double scale_D) { struct ns__mul *_p = soap_instantiate_ns__mul(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__mul(soap, _p); _p->InputMatFilename = InputMatFilename; _p->AnotherMatFilename = AnotherMatFilename; _p->scale_D = scale_D; } return _p; }

inline void soap_delete_ns__mul(struct soap *soap, struct ns__mul *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__mul(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__mulResponse
#define SOAP_TYPE_ns__mulResponse (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__mulResponse(struct soap*, struct ns__mulResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__mulResponse(struct soap*, const struct ns__mulResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__mulResponse(struct soap*, const char*, int, const struct ns__mulResponse *, const char*);
SOAP_FMAC3 struct ns__mulResponse * SOAP_FMAC4 soap_in_ns__mulResponse(struct soap*, const char*, struct ns__mulResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__mulResponse(struct soap*, const struct ns__mulResponse *, const char*, const char*);

#ifndef soap_write_ns__mulResponse
#define soap_write_ns__mulResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__mulResponse(soap, data), soap_begin_send(soap) || soap_put_ns__mulResponse(soap, data, "ns:mulResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__mulResponse * SOAP_FMAC4 soap_get_ns__mulResponse(struct soap*, struct ns__mulResponse *, const char*, const char*);

#ifndef soap_read_ns__mulResponse
#define soap_read_ns__mulResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__mulResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__mulResponse * SOAP_FMAC2 soap_instantiate_ns__mulResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__mulResponse * soap_new_ns__mulResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__mulResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__mulResponse * soap_new_req_ns__mulResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__mulResponse *_p = soap_instantiate_ns__mulResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__mulResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__mulResponse * soap_new_set_ns__mulResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__mulResponse *_p = soap_instantiate_ns__mulResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__mulResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__mulResponse(struct soap *soap, struct ns__mulResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__mulResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__Inverse
#define SOAP_TYPE_ns__Inverse (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Inverse(struct soap*, struct ns__Inverse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Inverse(struct soap*, const struct ns__Inverse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Inverse(struct soap*, const char*, int, const struct ns__Inverse *, const char*);
SOAP_FMAC3 struct ns__Inverse * SOAP_FMAC4 soap_in_ns__Inverse(struct soap*, const char*, struct ns__Inverse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Inverse(struct soap*, const struct ns__Inverse *, const char*, const char*);

#ifndef soap_write_ns__Inverse
#define soap_write_ns__Inverse(soap, data) ( soap_begin(soap), soap_serialize_ns__Inverse(soap, data), soap_begin_send(soap) || soap_put_ns__Inverse(soap, data, "ns:Inverse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__Inverse * SOAP_FMAC4 soap_get_ns__Inverse(struct soap*, struct ns__Inverse *, const char*, const char*);

#ifndef soap_read_ns__Inverse
#define soap_read_ns__Inverse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__Inverse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__Inverse * SOAP_FMAC2 soap_instantiate_ns__Inverse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Inverse * soap_new_ns__Inverse(struct soap *soap, int n = -1) { return soap_instantiate_ns__Inverse(soap, n, NULL, NULL, NULL); }

inline struct ns__Inverse * soap_new_req_ns__Inverse(struct soap *soap, std::string& InputMatFilename, std::string& InvMethod_D) { struct ns__Inverse *_p = soap_instantiate_ns__Inverse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Inverse(soap, _p); _p->InputMatFilename = InputMatFilename; _p->InvMethod_D = InvMethod_D; } return _p; }

inline struct ns__Inverse * soap_new_set_ns__Inverse(struct soap *soap, std::string& InputMatFilename, std::string& InvMethod_D) { struct ns__Inverse *_p = soap_instantiate_ns__Inverse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Inverse(soap, _p); _p->InputMatFilename = InputMatFilename; _p->InvMethod_D = InvMethod_D; } return _p; }

inline void soap_delete_ns__Inverse(struct soap *soap, struct ns__Inverse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Inverse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__InverseResponse
#define SOAP_TYPE_ns__InverseResponse (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__InverseResponse(struct soap*, struct ns__InverseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__InverseResponse(struct soap*, const struct ns__InverseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__InverseResponse(struct soap*, const char*, int, const struct ns__InverseResponse *, const char*);
SOAP_FMAC3 struct ns__InverseResponse * SOAP_FMAC4 soap_in_ns__InverseResponse(struct soap*, const char*, struct ns__InverseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__InverseResponse(struct soap*, const struct ns__InverseResponse *, const char*, const char*);

#ifndef soap_write_ns__InverseResponse
#define soap_write_ns__InverseResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__InverseResponse(soap, data), soap_begin_send(soap) || soap_put_ns__InverseResponse(soap, data, "ns:InverseResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__InverseResponse * SOAP_FMAC4 soap_get_ns__InverseResponse(struct soap*, struct ns__InverseResponse *, const char*, const char*);

#ifndef soap_read_ns__InverseResponse
#define soap_read_ns__InverseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__InverseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__InverseResponse * SOAP_FMAC2 soap_instantiate_ns__InverseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__InverseResponse * soap_new_ns__InverseResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__InverseResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__InverseResponse * soap_new_req_ns__InverseResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__InverseResponse *_p = soap_instantiate_ns__InverseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__InverseResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__InverseResponse * soap_new_set_ns__InverseResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__InverseResponse *_p = soap_instantiate_ns__InverseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__InverseResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__InverseResponse(struct soap *soap, struct ns__InverseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__InverseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__createMat
#define SOAP_TYPE_ns__createMat (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__createMat(struct soap*, struct ns__createMat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__createMat(struct soap*, const struct ns__createMat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__createMat(struct soap*, const char*, int, const struct ns__createMat *, const char*);
SOAP_FMAC3 struct ns__createMat * SOAP_FMAC4 soap_in_ns__createMat(struct soap*, const char*, struct ns__createMat *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__createMat(struct soap*, const struct ns__createMat *, const char*, const char*);

#ifndef soap_write_ns__createMat
#define soap_write_ns__createMat(soap, data) ( soap_begin(soap), soap_serialize_ns__createMat(soap, data), soap_begin_send(soap) || soap_put_ns__createMat(soap, data, "ns:createMat", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__createMat * SOAP_FMAC4 soap_get_ns__createMat(struct soap*, struct ns__createMat *, const char*, const char*);

#ifndef soap_read_ns__createMat
#define soap_read_ns__createMat(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__createMat(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__createMat * SOAP_FMAC2 soap_instantiate_ns__createMat(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__createMat * soap_new_ns__createMat(struct soap *soap, int n = -1) { return soap_instantiate_ns__createMat(soap, n, NULL, NULL, NULL); }

inline struct ns__createMat * soap_new_req_ns__createMat(struct soap *soap, int rows, int columns, std::string& type, int scalar) { struct ns__createMat *_p = soap_instantiate_ns__createMat(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__createMat(soap, _p); _p->rows = rows; _p->columns = columns; _p->type = type; _p->scalar = scalar; } return _p; }

inline struct ns__createMat * soap_new_set_ns__createMat(struct soap *soap, int rows, int columns, std::string& type, int scalar) { struct ns__createMat *_p = soap_instantiate_ns__createMat(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__createMat(soap, _p); _p->rows = rows; _p->columns = columns; _p->type = type; _p->scalar = scalar; } return _p; }

inline void soap_delete_ns__createMat(struct soap *soap, struct ns__createMat *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__createMat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__createMatResponse
#define SOAP_TYPE_ns__createMatResponse (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__createMatResponse(struct soap*, struct ns__createMatResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__createMatResponse(struct soap*, const struct ns__createMatResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__createMatResponse(struct soap*, const char*, int, const struct ns__createMatResponse *, const char*);
SOAP_FMAC3 struct ns__createMatResponse * SOAP_FMAC4 soap_in_ns__createMatResponse(struct soap*, const char*, struct ns__createMatResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__createMatResponse(struct soap*, const struct ns__createMatResponse *, const char*, const char*);

#ifndef soap_write_ns__createMatResponse
#define soap_write_ns__createMatResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__createMatResponse(soap, data), soap_begin_send(soap) || soap_put_ns__createMatResponse(soap, data, "ns:createMatResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__createMatResponse * SOAP_FMAC4 soap_get_ns__createMatResponse(struct soap*, struct ns__createMatResponse *, const char*, const char*);

#ifndef soap_read_ns__createMatResponse
#define soap_read_ns__createMatResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__createMatResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__createMatResponse * SOAP_FMAC2 soap_instantiate_ns__createMatResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__createMatResponse * soap_new_ns__createMatResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__createMatResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__createMatResponse * soap_new_req_ns__createMatResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__createMatResponse *_p = soap_instantiate_ns__createMatResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__createMatResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__createMatResponse * soap_new_set_ns__createMatResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__createMatResponse *_p = soap_instantiate_ns__createMatResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__createMatResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__createMatResponse(struct soap *soap, struct ns__createMatResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__createMatResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__convertTo
#define SOAP_TYPE_ns__convertTo (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__convertTo(struct soap*, struct ns__convertTo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__convertTo(struct soap*, const struct ns__convertTo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__convertTo(struct soap*, const char*, int, const struct ns__convertTo *, const char*);
SOAP_FMAC3 struct ns__convertTo * SOAP_FMAC4 soap_in_ns__convertTo(struct soap*, const char*, struct ns__convertTo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__convertTo(struct soap*, const struct ns__convertTo *, const char*, const char*);

#ifndef soap_write_ns__convertTo
#define soap_write_ns__convertTo(soap, data) ( soap_begin(soap), soap_serialize_ns__convertTo(soap, data), soap_begin_send(soap) || soap_put_ns__convertTo(soap, data, "ns:convertTo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__convertTo * SOAP_FMAC4 soap_get_ns__convertTo(struct soap*, struct ns__convertTo *, const char*, const char*);

#ifndef soap_read_ns__convertTo
#define soap_read_ns__convertTo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__convertTo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__convertTo * SOAP_FMAC2 soap_instantiate_ns__convertTo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__convertTo * soap_new_ns__convertTo(struct soap *soap, int n = -1) { return soap_instantiate_ns__convertTo(soap, n, NULL, NULL, NULL); }

inline struct ns__convertTo * soap_new_req_ns__convertTo(struct soap *soap, std::string& InputMatFilename, std::string& types, double alpha_D, double beta_D) { struct ns__convertTo *_p = soap_instantiate_ns__convertTo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__convertTo(soap, _p); _p->InputMatFilename = InputMatFilename; _p->types = types; _p->alpha_D = alpha_D; _p->beta_D = beta_D; } return _p; }

inline struct ns__convertTo * soap_new_set_ns__convertTo(struct soap *soap, std::string& InputMatFilename, std::string& types, double alpha_D, double beta_D) { struct ns__convertTo *_p = soap_instantiate_ns__convertTo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__convertTo(soap, _p); _p->InputMatFilename = InputMatFilename; _p->types = types; _p->alpha_D = alpha_D; _p->beta_D = beta_D; } return _p; }

inline void soap_delete_ns__convertTo(struct soap *soap, struct ns__convertTo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__convertTo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__convertToResponse
#define SOAP_TYPE_ns__convertToResponse (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__convertToResponse(struct soap*, struct ns__convertToResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__convertToResponse(struct soap*, const struct ns__convertToResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__convertToResponse(struct soap*, const char*, int, const struct ns__convertToResponse *, const char*);
SOAP_FMAC3 struct ns__convertToResponse * SOAP_FMAC4 soap_in_ns__convertToResponse(struct soap*, const char*, struct ns__convertToResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__convertToResponse(struct soap*, const struct ns__convertToResponse *, const char*, const char*);

#ifndef soap_write_ns__convertToResponse
#define soap_write_ns__convertToResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__convertToResponse(soap, data), soap_begin_send(soap) || soap_put_ns__convertToResponse(soap, data, "ns:convertToResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__convertToResponse * SOAP_FMAC4 soap_get_ns__convertToResponse(struct soap*, struct ns__convertToResponse *, const char*, const char*);

#ifndef soap_read_ns__convertToResponse
#define soap_read_ns__convertToResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__convertToResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__convertToResponse * SOAP_FMAC2 soap_instantiate_ns__convertToResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__convertToResponse * soap_new_ns__convertToResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__convertToResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__convertToResponse * soap_new_req_ns__convertToResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__convertToResponse *_p = soap_instantiate_ns__convertToResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__convertToResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__convertToResponse * soap_new_set_ns__convertToResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__convertToResponse *_p = soap_instantiate_ns__convertToResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__convertToResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__convertToResponse(struct soap *soap, struct ns__convertToResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__convertToResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__colRange
#define SOAP_TYPE_ns__colRange (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__colRange(struct soap*, struct ns__colRange *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__colRange(struct soap*, const struct ns__colRange *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__colRange(struct soap*, const char*, int, const struct ns__colRange *, const char*);
SOAP_FMAC3 struct ns__colRange * SOAP_FMAC4 soap_in_ns__colRange(struct soap*, const char*, struct ns__colRange *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__colRange(struct soap*, const struct ns__colRange *, const char*, const char*);

#ifndef soap_write_ns__colRange
#define soap_write_ns__colRange(soap, data) ( soap_begin(soap), soap_serialize_ns__colRange(soap, data), soap_begin_send(soap) || soap_put_ns__colRange(soap, data, "ns:colRange", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__colRange * SOAP_FMAC4 soap_get_ns__colRange(struct soap*, struct ns__colRange *, const char*, const char*);

#ifndef soap_read_ns__colRange
#define soap_read_ns__colRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__colRange(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__colRange * SOAP_FMAC2 soap_instantiate_ns__colRange(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__colRange * soap_new_ns__colRange(struct soap *soap, int n = -1) { return soap_instantiate_ns__colRange(soap, n, NULL, NULL, NULL); }

inline struct ns__colRange * soap_new_req_ns__colRange(struct soap *soap, std::string& InputMatFilename, int startCol, int endCol) { struct ns__colRange *_p = soap_instantiate_ns__colRange(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__colRange(soap, _p); _p->InputMatFilename = InputMatFilename; _p->startCol = startCol; _p->endCol = endCol; } return _p; }

inline struct ns__colRange * soap_new_set_ns__colRange(struct soap *soap, std::string& InputMatFilename, int startCol, int endCol) { struct ns__colRange *_p = soap_instantiate_ns__colRange(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__colRange(soap, _p); _p->InputMatFilename = InputMatFilename; _p->startCol = startCol; _p->endCol = endCol; } return _p; }

inline void soap_delete_ns__colRange(struct soap *soap, struct ns__colRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__colRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__colRangeResponse
#define SOAP_TYPE_ns__colRangeResponse (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__colRangeResponse(struct soap*, struct ns__colRangeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__colRangeResponse(struct soap*, const struct ns__colRangeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__colRangeResponse(struct soap*, const char*, int, const struct ns__colRangeResponse *, const char*);
SOAP_FMAC3 struct ns__colRangeResponse * SOAP_FMAC4 soap_in_ns__colRangeResponse(struct soap*, const char*, struct ns__colRangeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__colRangeResponse(struct soap*, const struct ns__colRangeResponse *, const char*, const char*);

#ifndef soap_write_ns__colRangeResponse
#define soap_write_ns__colRangeResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__colRangeResponse(soap, data), soap_begin_send(soap) || soap_put_ns__colRangeResponse(soap, data, "ns:colRangeResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__colRangeResponse * SOAP_FMAC4 soap_get_ns__colRangeResponse(struct soap*, struct ns__colRangeResponse *, const char*, const char*);

#ifndef soap_read_ns__colRangeResponse
#define soap_read_ns__colRangeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__colRangeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__colRangeResponse * SOAP_FMAC2 soap_instantiate_ns__colRangeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__colRangeResponse * soap_new_ns__colRangeResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__colRangeResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__colRangeResponse * soap_new_req_ns__colRangeResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__colRangeResponse *_p = soap_instantiate_ns__colRangeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__colRangeResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__colRangeResponse * soap_new_set_ns__colRangeResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__colRangeResponse *_p = soap_instantiate_ns__colRangeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__colRangeResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__colRangeResponse(struct soap *soap, struct ns__colRangeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__colRangeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__rowRange
#define SOAP_TYPE_ns__rowRange (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__rowRange(struct soap*, struct ns__rowRange *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__rowRange(struct soap*, const struct ns__rowRange *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__rowRange(struct soap*, const char*, int, const struct ns__rowRange *, const char*);
SOAP_FMAC3 struct ns__rowRange * SOAP_FMAC4 soap_in_ns__rowRange(struct soap*, const char*, struct ns__rowRange *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__rowRange(struct soap*, const struct ns__rowRange *, const char*, const char*);

#ifndef soap_write_ns__rowRange
#define soap_write_ns__rowRange(soap, data) ( soap_begin(soap), soap_serialize_ns__rowRange(soap, data), soap_begin_send(soap) || soap_put_ns__rowRange(soap, data, "ns:rowRange", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__rowRange * SOAP_FMAC4 soap_get_ns__rowRange(struct soap*, struct ns__rowRange *, const char*, const char*);

#ifndef soap_read_ns__rowRange
#define soap_read_ns__rowRange(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__rowRange(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__rowRange * SOAP_FMAC2 soap_instantiate_ns__rowRange(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__rowRange * soap_new_ns__rowRange(struct soap *soap, int n = -1) { return soap_instantiate_ns__rowRange(soap, n, NULL, NULL, NULL); }

inline struct ns__rowRange * soap_new_req_ns__rowRange(struct soap *soap, std::string& InputMatFilename, int startCol, int endCol) { struct ns__rowRange *_p = soap_instantiate_ns__rowRange(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__rowRange(soap, _p); _p->InputMatFilename = InputMatFilename; _p->startCol = startCol; _p->endCol = endCol; } return _p; }

inline struct ns__rowRange * soap_new_set_ns__rowRange(struct soap *soap, std::string& InputMatFilename, int startCol, int endCol) { struct ns__rowRange *_p = soap_instantiate_ns__rowRange(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__rowRange(soap, _p); _p->InputMatFilename = InputMatFilename; _p->startCol = startCol; _p->endCol = endCol; } return _p; }

inline void soap_delete_ns__rowRange(struct soap *soap, struct ns__rowRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__rowRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__rowRangeResponse
#define SOAP_TYPE_ns__rowRangeResponse (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__rowRangeResponse(struct soap*, struct ns__rowRangeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__rowRangeResponse(struct soap*, const struct ns__rowRangeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__rowRangeResponse(struct soap*, const char*, int, const struct ns__rowRangeResponse *, const char*);
SOAP_FMAC3 struct ns__rowRangeResponse * SOAP_FMAC4 soap_in_ns__rowRangeResponse(struct soap*, const char*, struct ns__rowRangeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__rowRangeResponse(struct soap*, const struct ns__rowRangeResponse *, const char*, const char*);

#ifndef soap_write_ns__rowRangeResponse
#define soap_write_ns__rowRangeResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__rowRangeResponse(soap, data), soap_begin_send(soap) || soap_put_ns__rowRangeResponse(soap, data, "ns:rowRangeResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__rowRangeResponse * SOAP_FMAC4 soap_get_ns__rowRangeResponse(struct soap*, struct ns__rowRangeResponse *, const char*, const char*);

#ifndef soap_read_ns__rowRangeResponse
#define soap_read_ns__rowRangeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__rowRangeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__rowRangeResponse * SOAP_FMAC2 soap_instantiate_ns__rowRangeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__rowRangeResponse * soap_new_ns__rowRangeResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__rowRangeResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__rowRangeResponse * soap_new_req_ns__rowRangeResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__rowRangeResponse *_p = soap_instantiate_ns__rowRangeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__rowRangeResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__rowRangeResponse * soap_new_set_ns__rowRangeResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__rowRangeResponse *_p = soap_instantiate_ns__rowRangeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__rowRangeResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__rowRangeResponse(struct soap *soap, struct ns__rowRangeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__rowRangeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin(soap), soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin(soap), soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

/* End of soapH.h */
