/* soapClient.cpp
   Generated by gSOAP 2.8.8 from StructuralAnalysis.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.8 2012-09-19 07:42:20 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__findContours(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, std::string mode, std::string method, int offsetX_D, int offsetY_D, std::string &OutputMatFilename)
{	struct ns__findContours soap_tmp_ns__findContours;
	struct ns__findContoursResponse *soap_tmp_ns__findContoursResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/StructuralAnalysisServer";
	soap->encodingStyle = "";
	soap_tmp_ns__findContours.InputMatFilename = InputMatFilename;
	soap_tmp_ns__findContours.mode = mode;
	soap_tmp_ns__findContours.method = method;
	soap_tmp_ns__findContours.offsetX_D = offsetX_D;
	soap_tmp_ns__findContours.offsetY_D = offsetY_D;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__findContours(soap, &soap_tmp_ns__findContours);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__findContours(soap, &soap_tmp_ns__findContours, "ns:findContours", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__findContours(soap, &soap_tmp_ns__findContours, "ns:findContours", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&OutputMatFilename)
		return soap_closesock(soap);
	soap_default_std__string(soap, &OutputMatFilename);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__findContoursResponse = soap_get_ns__findContoursResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	OutputMatFilename = soap_tmp_ns__findContoursResponse->OutputMatFilename;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__resize(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, int dstRows, int dstCols, double fx_D, double fy_D, std::string interpolation_D, std::string &OutputMatFilename)
{	struct ns__resize soap_tmp_ns__resize;
	struct ns__resizeResponse *soap_tmp_ns__resizeResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/StructuralAnalysisServer";
	soap->encodingStyle = "";
	soap_tmp_ns__resize.InputMatFilename = InputMatFilename;
	soap_tmp_ns__resize.dstRows = dstRows;
	soap_tmp_ns__resize.dstCols = dstCols;
	soap_tmp_ns__resize.fx_D = fx_D;
	soap_tmp_ns__resize.fy_D = fy_D;
	soap_tmp_ns__resize.interpolation_D = interpolation_D;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__resize(soap, &soap_tmp_ns__resize);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__resize(soap, &soap_tmp_ns__resize, "ns:resize", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__resize(soap, &soap_tmp_ns__resize, "ns:resize", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&OutputMatFilename)
		return soap_closesock(soap);
	soap_default_std__string(soap, &OutputMatFilename);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__resizeResponse = soap_get_ns__resizeResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	OutputMatFilename = soap_tmp_ns__resizeResponse->OutputMatFilename;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
