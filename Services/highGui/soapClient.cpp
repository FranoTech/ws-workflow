/* soapClient.cpp
   Generated by gSOAP 2.8.14 from highGUI.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.14 2013-03-16 23:40:32 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__imRead(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, int flag, std::string &OutputMatFilename)
{	struct ns__imRead soap_tmp_ns__imRead;
	struct ns__imReadResponse *soap_tmp_ns__imReadResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/highGUIServer";
	soap->encodingStyle = "";
	soap_tmp_ns__imRead.InputMatFilename = InputMatFilename;
	soap_tmp_ns__imRead.flag = flag;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__imRead(soap, &soap_tmp_ns__imRead);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__imRead(soap, &soap_tmp_ns__imRead, "ns:imRead", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__imRead(soap, &soap_tmp_ns__imRead, "ns:imRead", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&OutputMatFilename)
		return soap_closesock(soap);
	soap_default_std__string(soap, &OutputMatFilename);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__imReadResponse = soap_get_ns__imReadResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	OutputMatFilename = soap_tmp_ns__imReadResponse->OutputMatFilename;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__imWrite(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, std::string fileExtension, std::string &OutputMatFilename)
{	struct ns__imWrite soap_tmp_ns__imWrite;
	struct ns__imWriteResponse *soap_tmp_ns__imWriteResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/highGUIServer";
	soap->encodingStyle = "";
	soap_tmp_ns__imWrite.InputMatFilename = InputMatFilename;
	soap_tmp_ns__imWrite.fileExtension = fileExtension;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__imWrite(soap, &soap_tmp_ns__imWrite);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__imWrite(soap, &soap_tmp_ns__imWrite, "ns:imWrite", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__imWrite(soap, &soap_tmp_ns__imWrite, "ns:imWrite", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&OutputMatFilename)
		return soap_closesock(soap);
	soap_default_std__string(soap, &OutputMatFilename);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__imWriteResponse = soap_get_ns__imWriteResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	OutputMatFilename = soap_tmp_ns__imWriteResponse->OutputMatFilename;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__viewImage(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, ns__base64Binary &image)
{	struct ns__viewImage soap_tmp_ns__viewImage;
	struct ns__viewImageResponse *soap_tmp_ns__viewImageResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/highGUIServer";
	soap->encodingStyle = "";
	soap_tmp_ns__viewImage.InputMatFilename = InputMatFilename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__viewImage(soap, &soap_tmp_ns__viewImage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__viewImage(soap, &soap_tmp_ns__viewImage, "ns:viewImage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__viewImage(soap, &soap_tmp_ns__viewImage, "ns:viewImage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&image)
		return soap_closesock(soap);
	image.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__viewImageResponse = soap_get_ns__viewImageResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	image = soap_tmp_ns__viewImageResponse->image;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
