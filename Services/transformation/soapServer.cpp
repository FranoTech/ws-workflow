/* soapServer.cpp
   Generated by gSOAP 2.8.8 from ImageTransformations.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.8 2012-09-19 07:43:51 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:Threshold"))
		return soap_serve_ns__Threshold(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:cvtColor"))
		return soap_serve_ns__cvtColor(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:integral"))
		return soap_serve_ns__integral(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:adaptiveThreshold"))
		return soap_serve_ns__adaptiveThreshold(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:adjustBrighnessAndContrast"))
		return soap_serve_ns__adjustBrighnessAndContrast(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:watershed"))
		return soap_serve_ns__watershed(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__Threshold(struct soap *soap)
{	struct ns__Threshold soap_tmp_ns__Threshold;
	struct ns__ThresholdResponse soap_tmp_ns__ThresholdResponse;
	soap_default_ns__ThresholdResponse(soap, &soap_tmp_ns__ThresholdResponse);
	soap_default_ns__Threshold(soap, &soap_tmp_ns__Threshold);
	soap->encodingStyle = "";
	if (!soap_get_ns__Threshold(soap, &soap_tmp_ns__Threshold, "ns:Threshold", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__Threshold(soap, soap_tmp_ns__Threshold.InputMatFilename, soap_tmp_ns__Threshold.thresholdValue, soap_tmp_ns__Threshold.maxValue, soap_tmp_ns__Threshold.thresholdType, soap_tmp_ns__ThresholdResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__ThresholdResponse(soap, &soap_tmp_ns__ThresholdResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ThresholdResponse(soap, &soap_tmp_ns__ThresholdResponse, "ns:ThresholdResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ThresholdResponse(soap, &soap_tmp_ns__ThresholdResponse, "ns:ThresholdResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__cvtColor(struct soap *soap)
{	struct ns__cvtColor soap_tmp_ns__cvtColor;
	struct ns__cvtColorResponse soap_tmp_ns__cvtColorResponse;
	soap_default_ns__cvtColorResponse(soap, &soap_tmp_ns__cvtColorResponse);
	soap_default_ns__cvtColor(soap, &soap_tmp_ns__cvtColor);
	soap->encodingStyle = "";
	if (!soap_get_ns__cvtColor(soap, &soap_tmp_ns__cvtColor, "ns:cvtColor", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__cvtColor(soap, soap_tmp_ns__cvtColor.InputMatFilename, soap_tmp_ns__cvtColor.code, soap_tmp_ns__cvtColor.dstChannel_D, soap_tmp_ns__cvtColorResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__cvtColorResponse(soap, &soap_tmp_ns__cvtColorResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__cvtColorResponse(soap, &soap_tmp_ns__cvtColorResponse, "ns:cvtColorResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__cvtColorResponse(soap, &soap_tmp_ns__cvtColorResponse, "ns:cvtColorResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__integral(struct soap *soap)
{	struct ns__integral soap_tmp_ns__integral;
	struct ns__integralResponse soap_tmp_ns__integralResponse;
	soap_default_ns__integralResponse(soap, &soap_tmp_ns__integralResponse);
	soap_default_ns__integral(soap, &soap_tmp_ns__integral);
	soap->encodingStyle = "";
	if (!soap_get_ns__integral(soap, &soap_tmp_ns__integral, "ns:integral", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__integral(soap, soap_tmp_ns__integral.InputMatFilename, soap_tmp_ns__integral.sdepth_D, soap_tmp_ns__integralResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__integralResponse(soap, &soap_tmp_ns__integralResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__integralResponse(soap, &soap_tmp_ns__integralResponse, "ns:integralResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__integralResponse(soap, &soap_tmp_ns__integralResponse, "ns:integralResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__adaptiveThreshold(struct soap *soap)
{	struct ns__adaptiveThreshold soap_tmp_ns__adaptiveThreshold;
	struct ns__adaptiveThresholdResponse soap_tmp_ns__adaptiveThresholdResponse;
	soap_default_ns__adaptiveThresholdResponse(soap, &soap_tmp_ns__adaptiveThresholdResponse);
	soap_default_ns__adaptiveThreshold(soap, &soap_tmp_ns__adaptiveThreshold);
	soap->encodingStyle = "";
	if (!soap_get_ns__adaptiveThreshold(soap, &soap_tmp_ns__adaptiveThreshold, "ns:adaptiveThreshold", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__adaptiveThreshold(soap, soap_tmp_ns__adaptiveThreshold.InputMatFilename, soap_tmp_ns__adaptiveThreshold.adaptiveMethod, soap_tmp_ns__adaptiveThreshold.maxValue, soap_tmp_ns__adaptiveThreshold.thresholdType, soap_tmp_ns__adaptiveThreshold.blockSize, soap_tmp_ns__adaptiveThreshold.C, soap_tmp_ns__adaptiveThresholdResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__adaptiveThresholdResponse(soap, &soap_tmp_ns__adaptiveThresholdResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__adaptiveThresholdResponse(soap, &soap_tmp_ns__adaptiveThresholdResponse, "ns:adaptiveThresholdResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__adaptiveThresholdResponse(soap, &soap_tmp_ns__adaptiveThresholdResponse, "ns:adaptiveThresholdResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__adjustBrighnessAndContrast(struct soap *soap)
{	struct ns__adjustBrighnessAndContrast soap_tmp_ns__adjustBrighnessAndContrast;
	struct ns__adjustBrighnessAndContrastResponse soap_tmp_ns__adjustBrighnessAndContrastResponse;
	soap_default_ns__adjustBrighnessAndContrastResponse(soap, &soap_tmp_ns__adjustBrighnessAndContrastResponse);
	soap_default_ns__adjustBrighnessAndContrast(soap, &soap_tmp_ns__adjustBrighnessAndContrast);
	soap->encodingStyle = "";
	if (!soap_get_ns__adjustBrighnessAndContrast(soap, &soap_tmp_ns__adjustBrighnessAndContrast, "ns:adjustBrighnessAndContrast", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__adjustBrighnessAndContrast(soap, soap_tmp_ns__adjustBrighnessAndContrast.InputMatFilename, soap_tmp_ns__adjustBrighnessAndContrast.alpha, soap_tmp_ns__adjustBrighnessAndContrast.beta, soap_tmp_ns__adjustBrighnessAndContrastResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__adjustBrighnessAndContrastResponse(soap, &soap_tmp_ns__adjustBrighnessAndContrastResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__adjustBrighnessAndContrastResponse(soap, &soap_tmp_ns__adjustBrighnessAndContrastResponse, "ns:adjustBrighnessAndContrastResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__adjustBrighnessAndContrastResponse(soap, &soap_tmp_ns__adjustBrighnessAndContrastResponse, "ns:adjustBrighnessAndContrastResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__watershed(struct soap *soap)
{	struct ns__watershed soap_tmp_ns__watershed;
	struct ns__watershedResponse soap_tmp_ns__watershedResponse;
	soap_default_ns__watershedResponse(soap, &soap_tmp_ns__watershedResponse);
	soap_default_ns__watershed(soap, &soap_tmp_ns__watershed);
	soap->encodingStyle = "";
	if (!soap_get_ns__watershed(soap, &soap_tmp_ns__watershed, "ns:watershed", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__watershed(soap, soap_tmp_ns__watershed.InputMatFilename, soap_tmp_ns__watershed.MarkerMatFilename, soap_tmp_ns__watershedResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__watershedResponse(soap, &soap_tmp_ns__watershedResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__watershedResponse(soap, &soap_tmp_ns__watershedResponse, "ns:watershedResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__watershedResponse(soap, &soap_tmp_ns__watershedResponse, "ns:watershedResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
