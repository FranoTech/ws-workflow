/* soapH.h
   Generated by gSOAP 2.8.14 from ImageTransformations.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin(soap), soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin(soap), soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_begin(soap), soap_serialize_float(soap, data), soap_begin_send(soap) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_begin(soap), soap_serialize_double(soap, data), soap_begin_send(soap) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_begin(soap), soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__watershed
#define SOAP_TYPE_ns__watershed (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__watershed(struct soap*, struct ns__watershed *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__watershed(struct soap*, const struct ns__watershed *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__watershed(struct soap*, const char*, int, const struct ns__watershed *, const char*);
SOAP_FMAC3 struct ns__watershed * SOAP_FMAC4 soap_in_ns__watershed(struct soap*, const char*, struct ns__watershed *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__watershed(struct soap*, const struct ns__watershed *, const char*, const char*);

#ifndef soap_write_ns__watershed
#define soap_write_ns__watershed(soap, data) ( soap_begin(soap), soap_serialize_ns__watershed(soap, data), soap_begin_send(soap) || soap_put_ns__watershed(soap, data, "ns:watershed", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__watershed * SOAP_FMAC4 soap_get_ns__watershed(struct soap*, struct ns__watershed *, const char*, const char*);

#ifndef soap_read_ns__watershed
#define soap_read_ns__watershed(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__watershed(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__watershed * SOAP_FMAC2 soap_instantiate_ns__watershed(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__watershed * soap_new_ns__watershed(struct soap *soap, int n = -1) { return soap_instantiate_ns__watershed(soap, n, NULL, NULL, NULL); }

inline struct ns__watershed * soap_new_req_ns__watershed(struct soap *soap, std::string& InputMatFilename, std::string& MarkerMatFilename) { struct ns__watershed *_p = soap_instantiate_ns__watershed(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__watershed(soap, _p); _p->InputMatFilename = InputMatFilename; _p->MarkerMatFilename = MarkerMatFilename; } return _p; }

inline struct ns__watershed * soap_new_set_ns__watershed(struct soap *soap, std::string& InputMatFilename, std::string& MarkerMatFilename) { struct ns__watershed *_p = soap_instantiate_ns__watershed(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__watershed(soap, _p); _p->InputMatFilename = InputMatFilename; _p->MarkerMatFilename = MarkerMatFilename; } return _p; }

inline void soap_delete_ns__watershed(struct soap *soap, struct ns__watershed *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__watershed(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__watershedResponse
#define SOAP_TYPE_ns__watershedResponse (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__watershedResponse(struct soap*, struct ns__watershedResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__watershedResponse(struct soap*, const struct ns__watershedResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__watershedResponse(struct soap*, const char*, int, const struct ns__watershedResponse *, const char*);
SOAP_FMAC3 struct ns__watershedResponse * SOAP_FMAC4 soap_in_ns__watershedResponse(struct soap*, const char*, struct ns__watershedResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__watershedResponse(struct soap*, const struct ns__watershedResponse *, const char*, const char*);

#ifndef soap_write_ns__watershedResponse
#define soap_write_ns__watershedResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__watershedResponse(soap, data), soap_begin_send(soap) || soap_put_ns__watershedResponse(soap, data, "ns:watershedResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__watershedResponse * SOAP_FMAC4 soap_get_ns__watershedResponse(struct soap*, struct ns__watershedResponse *, const char*, const char*);

#ifndef soap_read_ns__watershedResponse
#define soap_read_ns__watershedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__watershedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__watershedResponse * SOAP_FMAC2 soap_instantiate_ns__watershedResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__watershedResponse * soap_new_ns__watershedResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__watershedResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__watershedResponse * soap_new_req_ns__watershedResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__watershedResponse *_p = soap_instantiate_ns__watershedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__watershedResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__watershedResponse * soap_new_set_ns__watershedResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__watershedResponse *_p = soap_instantiate_ns__watershedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__watershedResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__watershedResponse(struct soap *soap, struct ns__watershedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__watershedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__adjustBrighnessAndContrast
#define SOAP_TYPE_ns__adjustBrighnessAndContrast (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__adjustBrighnessAndContrast(struct soap*, struct ns__adjustBrighnessAndContrast *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__adjustBrighnessAndContrast(struct soap*, const struct ns__adjustBrighnessAndContrast *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__adjustBrighnessAndContrast(struct soap*, const char*, int, const struct ns__adjustBrighnessAndContrast *, const char*);
SOAP_FMAC3 struct ns__adjustBrighnessAndContrast * SOAP_FMAC4 soap_in_ns__adjustBrighnessAndContrast(struct soap*, const char*, struct ns__adjustBrighnessAndContrast *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__adjustBrighnessAndContrast(struct soap*, const struct ns__adjustBrighnessAndContrast *, const char*, const char*);

#ifndef soap_write_ns__adjustBrighnessAndContrast
#define soap_write_ns__adjustBrighnessAndContrast(soap, data) ( soap_begin(soap), soap_serialize_ns__adjustBrighnessAndContrast(soap, data), soap_begin_send(soap) || soap_put_ns__adjustBrighnessAndContrast(soap, data, "ns:adjustBrighnessAndContrast", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__adjustBrighnessAndContrast * SOAP_FMAC4 soap_get_ns__adjustBrighnessAndContrast(struct soap*, struct ns__adjustBrighnessAndContrast *, const char*, const char*);

#ifndef soap_read_ns__adjustBrighnessAndContrast
#define soap_read_ns__adjustBrighnessAndContrast(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__adjustBrighnessAndContrast(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__adjustBrighnessAndContrast * SOAP_FMAC2 soap_instantiate_ns__adjustBrighnessAndContrast(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__adjustBrighnessAndContrast * soap_new_ns__adjustBrighnessAndContrast(struct soap *soap, int n = -1) { return soap_instantiate_ns__adjustBrighnessAndContrast(soap, n, NULL, NULL, NULL); }

inline struct ns__adjustBrighnessAndContrast * soap_new_req_ns__adjustBrighnessAndContrast(struct soap *soap, std::string& InputMatFilename, double alpha, int beta) { struct ns__adjustBrighnessAndContrast *_p = soap_instantiate_ns__adjustBrighnessAndContrast(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__adjustBrighnessAndContrast(soap, _p); _p->InputMatFilename = InputMatFilename; _p->alpha = alpha; _p->beta = beta; } return _p; }

inline struct ns__adjustBrighnessAndContrast * soap_new_set_ns__adjustBrighnessAndContrast(struct soap *soap, std::string& InputMatFilename, double alpha, int beta) { struct ns__adjustBrighnessAndContrast *_p = soap_instantiate_ns__adjustBrighnessAndContrast(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__adjustBrighnessAndContrast(soap, _p); _p->InputMatFilename = InputMatFilename; _p->alpha = alpha; _p->beta = beta; } return _p; }

inline void soap_delete_ns__adjustBrighnessAndContrast(struct soap *soap, struct ns__adjustBrighnessAndContrast *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__adjustBrighnessAndContrast(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__adjustBrighnessAndContrastResponse
#define SOAP_TYPE_ns__adjustBrighnessAndContrastResponse (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__adjustBrighnessAndContrastResponse(struct soap*, struct ns__adjustBrighnessAndContrastResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__adjustBrighnessAndContrastResponse(struct soap*, const struct ns__adjustBrighnessAndContrastResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__adjustBrighnessAndContrastResponse(struct soap*, const char*, int, const struct ns__adjustBrighnessAndContrastResponse *, const char*);
SOAP_FMAC3 struct ns__adjustBrighnessAndContrastResponse * SOAP_FMAC4 soap_in_ns__adjustBrighnessAndContrastResponse(struct soap*, const char*, struct ns__adjustBrighnessAndContrastResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__adjustBrighnessAndContrastResponse(struct soap*, const struct ns__adjustBrighnessAndContrastResponse *, const char*, const char*);

#ifndef soap_write_ns__adjustBrighnessAndContrastResponse
#define soap_write_ns__adjustBrighnessAndContrastResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__adjustBrighnessAndContrastResponse(soap, data), soap_begin_send(soap) || soap_put_ns__adjustBrighnessAndContrastResponse(soap, data, "ns:adjustBrighnessAndContrastResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__adjustBrighnessAndContrastResponse * SOAP_FMAC4 soap_get_ns__adjustBrighnessAndContrastResponse(struct soap*, struct ns__adjustBrighnessAndContrastResponse *, const char*, const char*);

#ifndef soap_read_ns__adjustBrighnessAndContrastResponse
#define soap_read_ns__adjustBrighnessAndContrastResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__adjustBrighnessAndContrastResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__adjustBrighnessAndContrastResponse * SOAP_FMAC2 soap_instantiate_ns__adjustBrighnessAndContrastResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__adjustBrighnessAndContrastResponse * soap_new_ns__adjustBrighnessAndContrastResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__adjustBrighnessAndContrastResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__adjustBrighnessAndContrastResponse * soap_new_req_ns__adjustBrighnessAndContrastResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__adjustBrighnessAndContrastResponse *_p = soap_instantiate_ns__adjustBrighnessAndContrastResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__adjustBrighnessAndContrastResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__adjustBrighnessAndContrastResponse * soap_new_set_ns__adjustBrighnessAndContrastResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__adjustBrighnessAndContrastResponse *_p = soap_instantiate_ns__adjustBrighnessAndContrastResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__adjustBrighnessAndContrastResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__adjustBrighnessAndContrastResponse(struct soap *soap, struct ns__adjustBrighnessAndContrastResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__adjustBrighnessAndContrastResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__adaptiveThreshold
#define SOAP_TYPE_ns__adaptiveThreshold (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__adaptiveThreshold(struct soap*, struct ns__adaptiveThreshold *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__adaptiveThreshold(struct soap*, const struct ns__adaptiveThreshold *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__adaptiveThreshold(struct soap*, const char*, int, const struct ns__adaptiveThreshold *, const char*);
SOAP_FMAC3 struct ns__adaptiveThreshold * SOAP_FMAC4 soap_in_ns__adaptiveThreshold(struct soap*, const char*, struct ns__adaptiveThreshold *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__adaptiveThreshold(struct soap*, const struct ns__adaptiveThreshold *, const char*, const char*);

#ifndef soap_write_ns__adaptiveThreshold
#define soap_write_ns__adaptiveThreshold(soap, data) ( soap_begin(soap), soap_serialize_ns__adaptiveThreshold(soap, data), soap_begin_send(soap) || soap_put_ns__adaptiveThreshold(soap, data, "ns:adaptiveThreshold", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__adaptiveThreshold * SOAP_FMAC4 soap_get_ns__adaptiveThreshold(struct soap*, struct ns__adaptiveThreshold *, const char*, const char*);

#ifndef soap_read_ns__adaptiveThreshold
#define soap_read_ns__adaptiveThreshold(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__adaptiveThreshold(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__adaptiveThreshold * SOAP_FMAC2 soap_instantiate_ns__adaptiveThreshold(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__adaptiveThreshold * soap_new_ns__adaptiveThreshold(struct soap *soap, int n = -1) { return soap_instantiate_ns__adaptiveThreshold(soap, n, NULL, NULL, NULL); }

inline struct ns__adaptiveThreshold * soap_new_req_ns__adaptiveThreshold(struct soap *soap, std::string& InputMatFilename, std::string& adaptiveMethod, double maxValue, std::string& thresholdType, int blockSize, double C) { struct ns__adaptiveThreshold *_p = soap_instantiate_ns__adaptiveThreshold(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__adaptiveThreshold(soap, _p); _p->InputMatFilename = InputMatFilename; _p->adaptiveMethod = adaptiveMethod; _p->maxValue = maxValue; _p->thresholdType = thresholdType; _p->blockSize = blockSize; _p->C = C; } return _p; }

inline struct ns__adaptiveThreshold * soap_new_set_ns__adaptiveThreshold(struct soap *soap, std::string& InputMatFilename, std::string& adaptiveMethod, double maxValue, std::string& thresholdType, int blockSize, double C) { struct ns__adaptiveThreshold *_p = soap_instantiate_ns__adaptiveThreshold(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__adaptiveThreshold(soap, _p); _p->InputMatFilename = InputMatFilename; _p->adaptiveMethod = adaptiveMethod; _p->maxValue = maxValue; _p->thresholdType = thresholdType; _p->blockSize = blockSize; _p->C = C; } return _p; }

inline void soap_delete_ns__adaptiveThreshold(struct soap *soap, struct ns__adaptiveThreshold *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__adaptiveThreshold(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__adaptiveThresholdResponse
#define SOAP_TYPE_ns__adaptiveThresholdResponse (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__adaptiveThresholdResponse(struct soap*, struct ns__adaptiveThresholdResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__adaptiveThresholdResponse(struct soap*, const struct ns__adaptiveThresholdResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__adaptiveThresholdResponse(struct soap*, const char*, int, const struct ns__adaptiveThresholdResponse *, const char*);
SOAP_FMAC3 struct ns__adaptiveThresholdResponse * SOAP_FMAC4 soap_in_ns__adaptiveThresholdResponse(struct soap*, const char*, struct ns__adaptiveThresholdResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__adaptiveThresholdResponse(struct soap*, const struct ns__adaptiveThresholdResponse *, const char*, const char*);

#ifndef soap_write_ns__adaptiveThresholdResponse
#define soap_write_ns__adaptiveThresholdResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__adaptiveThresholdResponse(soap, data), soap_begin_send(soap) || soap_put_ns__adaptiveThresholdResponse(soap, data, "ns:adaptiveThresholdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__adaptiveThresholdResponse * SOAP_FMAC4 soap_get_ns__adaptiveThresholdResponse(struct soap*, struct ns__adaptiveThresholdResponse *, const char*, const char*);

#ifndef soap_read_ns__adaptiveThresholdResponse
#define soap_read_ns__adaptiveThresholdResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__adaptiveThresholdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__adaptiveThresholdResponse * SOAP_FMAC2 soap_instantiate_ns__adaptiveThresholdResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__adaptiveThresholdResponse * soap_new_ns__adaptiveThresholdResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__adaptiveThresholdResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__adaptiveThresholdResponse * soap_new_req_ns__adaptiveThresholdResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__adaptiveThresholdResponse *_p = soap_instantiate_ns__adaptiveThresholdResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__adaptiveThresholdResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__adaptiveThresholdResponse * soap_new_set_ns__adaptiveThresholdResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__adaptiveThresholdResponse *_p = soap_instantiate_ns__adaptiveThresholdResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__adaptiveThresholdResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__adaptiveThresholdResponse(struct soap *soap, struct ns__adaptiveThresholdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__adaptiveThresholdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__integral
#define SOAP_TYPE_ns__integral (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__integral(struct soap*, struct ns__integral *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__integral(struct soap*, const struct ns__integral *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__integral(struct soap*, const char*, int, const struct ns__integral *, const char*);
SOAP_FMAC3 struct ns__integral * SOAP_FMAC4 soap_in_ns__integral(struct soap*, const char*, struct ns__integral *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__integral(struct soap*, const struct ns__integral *, const char*, const char*);

#ifndef soap_write_ns__integral
#define soap_write_ns__integral(soap, data) ( soap_begin(soap), soap_serialize_ns__integral(soap, data), soap_begin_send(soap) || soap_put_ns__integral(soap, data, "ns:integral", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__integral * SOAP_FMAC4 soap_get_ns__integral(struct soap*, struct ns__integral *, const char*, const char*);

#ifndef soap_read_ns__integral
#define soap_read_ns__integral(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__integral(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__integral * SOAP_FMAC2 soap_instantiate_ns__integral(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__integral * soap_new_ns__integral(struct soap *soap, int n = -1) { return soap_instantiate_ns__integral(soap, n, NULL, NULL, NULL); }

inline struct ns__integral * soap_new_req_ns__integral(struct soap *soap, std::string& InputMatFilename, int sdepth_D) { struct ns__integral *_p = soap_instantiate_ns__integral(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__integral(soap, _p); _p->InputMatFilename = InputMatFilename; _p->sdepth_D = sdepth_D; } return _p; }

inline struct ns__integral * soap_new_set_ns__integral(struct soap *soap, std::string& InputMatFilename, int sdepth_D) { struct ns__integral *_p = soap_instantiate_ns__integral(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__integral(soap, _p); _p->InputMatFilename = InputMatFilename; _p->sdepth_D = sdepth_D; } return _p; }

inline void soap_delete_ns__integral(struct soap *soap, struct ns__integral *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__integral(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__integralResponse
#define SOAP_TYPE_ns__integralResponse (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__integralResponse(struct soap*, struct ns__integralResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__integralResponse(struct soap*, const struct ns__integralResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__integralResponse(struct soap*, const char*, int, const struct ns__integralResponse *, const char*);
SOAP_FMAC3 struct ns__integralResponse * SOAP_FMAC4 soap_in_ns__integralResponse(struct soap*, const char*, struct ns__integralResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__integralResponse(struct soap*, const struct ns__integralResponse *, const char*, const char*);

#ifndef soap_write_ns__integralResponse
#define soap_write_ns__integralResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__integralResponse(soap, data), soap_begin_send(soap) || soap_put_ns__integralResponse(soap, data, "ns:integralResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__integralResponse * SOAP_FMAC4 soap_get_ns__integralResponse(struct soap*, struct ns__integralResponse *, const char*, const char*);

#ifndef soap_read_ns__integralResponse
#define soap_read_ns__integralResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__integralResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__integralResponse * SOAP_FMAC2 soap_instantiate_ns__integralResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__integralResponse * soap_new_ns__integralResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__integralResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__integralResponse * soap_new_req_ns__integralResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__integralResponse *_p = soap_instantiate_ns__integralResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__integralResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__integralResponse * soap_new_set_ns__integralResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__integralResponse *_p = soap_instantiate_ns__integralResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__integralResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__integralResponse(struct soap *soap, struct ns__integralResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__integralResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__cvtColor
#define SOAP_TYPE_ns__cvtColor (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__cvtColor(struct soap*, struct ns__cvtColor *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__cvtColor(struct soap*, const struct ns__cvtColor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__cvtColor(struct soap*, const char*, int, const struct ns__cvtColor *, const char*);
SOAP_FMAC3 struct ns__cvtColor * SOAP_FMAC4 soap_in_ns__cvtColor(struct soap*, const char*, struct ns__cvtColor *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__cvtColor(struct soap*, const struct ns__cvtColor *, const char*, const char*);

#ifndef soap_write_ns__cvtColor
#define soap_write_ns__cvtColor(soap, data) ( soap_begin(soap), soap_serialize_ns__cvtColor(soap, data), soap_begin_send(soap) || soap_put_ns__cvtColor(soap, data, "ns:cvtColor", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__cvtColor * SOAP_FMAC4 soap_get_ns__cvtColor(struct soap*, struct ns__cvtColor *, const char*, const char*);

#ifndef soap_read_ns__cvtColor
#define soap_read_ns__cvtColor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__cvtColor(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__cvtColor * SOAP_FMAC2 soap_instantiate_ns__cvtColor(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__cvtColor * soap_new_ns__cvtColor(struct soap *soap, int n = -1) { return soap_instantiate_ns__cvtColor(soap, n, NULL, NULL, NULL); }

inline struct ns__cvtColor * soap_new_req_ns__cvtColor(struct soap *soap, std::string& InputMatFilename, std::string& code, int dstChannel_D) { struct ns__cvtColor *_p = soap_instantiate_ns__cvtColor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__cvtColor(soap, _p); _p->InputMatFilename = InputMatFilename; _p->code = code; _p->dstChannel_D = dstChannel_D; } return _p; }

inline struct ns__cvtColor * soap_new_set_ns__cvtColor(struct soap *soap, std::string& InputMatFilename, std::string& code, int dstChannel_D) { struct ns__cvtColor *_p = soap_instantiate_ns__cvtColor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__cvtColor(soap, _p); _p->InputMatFilename = InputMatFilename; _p->code = code; _p->dstChannel_D = dstChannel_D; } return _p; }

inline void soap_delete_ns__cvtColor(struct soap *soap, struct ns__cvtColor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__cvtColor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__cvtColorResponse
#define SOAP_TYPE_ns__cvtColorResponse (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__cvtColorResponse(struct soap*, struct ns__cvtColorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__cvtColorResponse(struct soap*, const struct ns__cvtColorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__cvtColorResponse(struct soap*, const char*, int, const struct ns__cvtColorResponse *, const char*);
SOAP_FMAC3 struct ns__cvtColorResponse * SOAP_FMAC4 soap_in_ns__cvtColorResponse(struct soap*, const char*, struct ns__cvtColorResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__cvtColorResponse(struct soap*, const struct ns__cvtColorResponse *, const char*, const char*);

#ifndef soap_write_ns__cvtColorResponse
#define soap_write_ns__cvtColorResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__cvtColorResponse(soap, data), soap_begin_send(soap) || soap_put_ns__cvtColorResponse(soap, data, "ns:cvtColorResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__cvtColorResponse * SOAP_FMAC4 soap_get_ns__cvtColorResponse(struct soap*, struct ns__cvtColorResponse *, const char*, const char*);

#ifndef soap_read_ns__cvtColorResponse
#define soap_read_ns__cvtColorResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__cvtColorResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__cvtColorResponse * SOAP_FMAC2 soap_instantiate_ns__cvtColorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__cvtColorResponse * soap_new_ns__cvtColorResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__cvtColorResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__cvtColorResponse * soap_new_req_ns__cvtColorResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__cvtColorResponse *_p = soap_instantiate_ns__cvtColorResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__cvtColorResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__cvtColorResponse * soap_new_set_ns__cvtColorResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__cvtColorResponse *_p = soap_instantiate_ns__cvtColorResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__cvtColorResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__cvtColorResponse(struct soap *soap, struct ns__cvtColorResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__cvtColorResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__Threshold
#define SOAP_TYPE_ns__Threshold (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Threshold(struct soap*, struct ns__Threshold *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Threshold(struct soap*, const struct ns__Threshold *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Threshold(struct soap*, const char*, int, const struct ns__Threshold *, const char*);
SOAP_FMAC3 struct ns__Threshold * SOAP_FMAC4 soap_in_ns__Threshold(struct soap*, const char*, struct ns__Threshold *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Threshold(struct soap*, const struct ns__Threshold *, const char*, const char*);

#ifndef soap_write_ns__Threshold
#define soap_write_ns__Threshold(soap, data) ( soap_begin(soap), soap_serialize_ns__Threshold(soap, data), soap_begin_send(soap) || soap_put_ns__Threshold(soap, data, "ns:Threshold", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__Threshold * SOAP_FMAC4 soap_get_ns__Threshold(struct soap*, struct ns__Threshold *, const char*, const char*);

#ifndef soap_read_ns__Threshold
#define soap_read_ns__Threshold(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__Threshold(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__Threshold * SOAP_FMAC2 soap_instantiate_ns__Threshold(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Threshold * soap_new_ns__Threshold(struct soap *soap, int n = -1) { return soap_instantiate_ns__Threshold(soap, n, NULL, NULL, NULL); }

inline struct ns__Threshold * soap_new_req_ns__Threshold(struct soap *soap, std::string& InputMatFilename, double thresholdValue, double maxValue, std::string& thresholdType) { struct ns__Threshold *_p = soap_instantiate_ns__Threshold(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Threshold(soap, _p); _p->InputMatFilename = InputMatFilename; _p->thresholdValue = thresholdValue; _p->maxValue = maxValue; _p->thresholdType = thresholdType; } return _p; }

inline struct ns__Threshold * soap_new_set_ns__Threshold(struct soap *soap, std::string& InputMatFilename, double thresholdValue, double maxValue, std::string& thresholdType) { struct ns__Threshold *_p = soap_instantiate_ns__Threshold(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Threshold(soap, _p); _p->InputMatFilename = InputMatFilename; _p->thresholdValue = thresholdValue; _p->maxValue = maxValue; _p->thresholdType = thresholdType; } return _p; }

inline void soap_delete_ns__Threshold(struct soap *soap, struct ns__Threshold *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Threshold(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__ThresholdResponse
#define SOAP_TYPE_ns__ThresholdResponse (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ThresholdResponse(struct soap*, struct ns__ThresholdResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ThresholdResponse(struct soap*, const struct ns__ThresholdResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ThresholdResponse(struct soap*, const char*, int, const struct ns__ThresholdResponse *, const char*);
SOAP_FMAC3 struct ns__ThresholdResponse * SOAP_FMAC4 soap_in_ns__ThresholdResponse(struct soap*, const char*, struct ns__ThresholdResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ThresholdResponse(struct soap*, const struct ns__ThresholdResponse *, const char*, const char*);

#ifndef soap_write_ns__ThresholdResponse
#define soap_write_ns__ThresholdResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__ThresholdResponse(soap, data), soap_begin_send(soap) || soap_put_ns__ThresholdResponse(soap, data, "ns:ThresholdResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__ThresholdResponse * SOAP_FMAC4 soap_get_ns__ThresholdResponse(struct soap*, struct ns__ThresholdResponse *, const char*, const char*);

#ifndef soap_read_ns__ThresholdResponse
#define soap_read_ns__ThresholdResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__ThresholdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__ThresholdResponse * SOAP_FMAC2 soap_instantiate_ns__ThresholdResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ThresholdResponse * soap_new_ns__ThresholdResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__ThresholdResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__ThresholdResponse * soap_new_req_ns__ThresholdResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__ThresholdResponse *_p = soap_instantiate_ns__ThresholdResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__ThresholdResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__ThresholdResponse * soap_new_set_ns__ThresholdResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__ThresholdResponse *_p = soap_instantiate_ns__ThresholdResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__ThresholdResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__ThresholdResponse(struct soap *soap, struct ns__ThresholdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ThresholdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin(soap), soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin(soap), soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

/* End of soapH.h */
