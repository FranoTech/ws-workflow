/* soapServer.cpp
   Generated by gSOAP 2.8.14 from CIA.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.14 2013-03-17 03:22:46 GMT")


extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:removeSmallCell"))
		return soap_serve_ns__removeSmallCell(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:scanningCell"))
		return soap_serve_ns__scanningCell(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:trainANN"))
		return soap_serve_ns__trainANN(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:separateCell"))
		return soap_serve_ns__separateCell(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:prepareResult"))
		return soap_serve_ns__prepareResult(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:viewImage"))
		return soap_serve_ns__viewImage(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__removeSmallCell(struct soap *soap)
{	struct ns__removeSmallCell soap_tmp_ns__removeSmallCell;
	ns__RemoveSmallCell out;
	out.soap_default(soap);
	soap_default_ns__removeSmallCell(soap, &soap_tmp_ns__removeSmallCell);
	soap->encodingStyle = "";
	if (!soap_get_ns__removeSmallCell(soap, &soap_tmp_ns__removeSmallCell, "ns:removeSmallCell", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__removeSmallCell(soap, soap_tmp_ns__removeSmallCell.inputMatFilename, out);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	out.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || out.soap_put(soap, "ns:RemoveSmallCell", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || out.soap_put(soap, "ns:RemoveSmallCell", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__scanningCell(struct soap *soap)
{	struct ns__scanningCell soap_tmp_ns__scanningCell;
	struct ns__scanningCellResponse soap_tmp_ns__scanningCellResponse;
	char * soap_tmp_string;
	soap_default_ns__scanningCellResponse(soap, &soap_tmp_ns__scanningCellResponse);
	soap_tmp_string = NULL;
	soap_tmp_ns__scanningCellResponse.OutputMatFilename = &soap_tmp_string;
	soap_default_ns__scanningCell(soap, &soap_tmp_ns__scanningCell);
	soap->encodingStyle = "";
	if (!soap_get_ns__scanningCell(soap, &soap_tmp_ns__scanningCell, "ns:scanningCell", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__scanningCell(soap, soap_tmp_ns__scanningCell.biggerArea, soap_tmp_ns__scanningCell.keepArea, soap_tmp_ns__scanningCellResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__scanningCellResponse(soap, &soap_tmp_ns__scanningCellResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__scanningCellResponse(soap, &soap_tmp_ns__scanningCellResponse, "ns:scanningCellResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__scanningCellResponse(soap, &soap_tmp_ns__scanningCellResponse, "ns:scanningCellResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__trainANN(struct soap *soap)
{	struct ns__trainANN soap_tmp_ns__trainANN;
	struct ns__trainANNResponse soap_tmp_ns__trainANNResponse;
	char * soap_tmp_string;
	soap_default_ns__trainANNResponse(soap, &soap_tmp_ns__trainANNResponse);
	soap_tmp_string = NULL;
	soap_tmp_ns__trainANNResponse.OutputMatFilename = &soap_tmp_string;
	soap_default_ns__trainANN(soap, &soap_tmp_ns__trainANN);
	soap->encodingStyle = "";
	if (!soap_get_ns__trainANN(soap, &soap_tmp_ns__trainANN, "ns:trainANN", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__trainANN(soap, soap_tmp_ns__trainANN.inputMatFilename, soap_tmp_ns__trainANN.neuralFile, soap_tmp_ns__trainANNResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__trainANNResponse(soap, &soap_tmp_ns__trainANNResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__trainANNResponse(soap, &soap_tmp_ns__trainANNResponse, "ns:trainANNResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__trainANNResponse(soap, &soap_tmp_ns__trainANNResponse, "ns:trainANNResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__separateCell(struct soap *soap)
{	struct ns__separateCell soap_tmp_ns__separateCell;
	struct ns__separateCellResponse soap_tmp_ns__separateCellResponse;
	char * soap_tmp_string;
	soap_default_ns__separateCellResponse(soap, &soap_tmp_ns__separateCellResponse);
	soap_tmp_string = NULL;
	soap_tmp_ns__separateCellResponse.OutputMatFilename = &soap_tmp_string;
	soap_default_ns__separateCell(soap, &soap_tmp_ns__separateCell);
	soap->encodingStyle = "";
	if (!soap_get_ns__separateCell(soap, &soap_tmp_ns__separateCell, "ns:separateCell", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__separateCell(soap, soap_tmp_ns__separateCell.input1, soap_tmp_ns__separateCell.input2, soap_tmp_ns__separateCellResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__separateCellResponse(soap, &soap_tmp_ns__separateCellResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__separateCellResponse(soap, &soap_tmp_ns__separateCellResponse, "ns:separateCellResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__separateCellResponse(soap, &soap_tmp_ns__separateCellResponse, "ns:separateCellResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__prepareResult(struct soap *soap)
{	struct ns__prepareResult soap_tmp_ns__prepareResult;
	struct ns__prepareResultResponse soap_tmp_ns__prepareResultResponse;
	char * soap_tmp_string;
	soap_default_ns__prepareResultResponse(soap, &soap_tmp_ns__prepareResultResponse);
	soap_tmp_string = NULL;
	soap_tmp_ns__prepareResultResponse.OutputMatFilename = &soap_tmp_string;
	soap_default_ns__prepareResult(soap, &soap_tmp_ns__prepareResult);
	soap->encodingStyle = "";
	if (!soap_get_ns__prepareResult(soap, &soap_tmp_ns__prepareResult, "ns:prepareResult", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__prepareResult(soap, soap_tmp_ns__prepareResult.inputMatFilename, soap_tmp_ns__prepareResult.afterthresNN, soap_tmp_ns__prepareResultResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__prepareResultResponse(soap, &soap_tmp_ns__prepareResultResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__prepareResultResponse(soap, &soap_tmp_ns__prepareResultResponse, "ns:prepareResultResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__prepareResultResponse(soap, &soap_tmp_ns__prepareResultResponse, "ns:prepareResultResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__viewImage(struct soap *soap)
{	struct ns__viewImage soap_tmp_ns__viewImage;
	struct ns__viewImageResponse soap_tmp_ns__viewImageResponse;
	soap_default_ns__viewImageResponse(soap, &soap_tmp_ns__viewImageResponse);
	soap_default_ns__viewImage(soap, &soap_tmp_ns__viewImage);
	soap->encodingStyle = "";
	if (!soap_get_ns__viewImage(soap, &soap_tmp_ns__viewImage, "ns:viewImage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__viewImage(soap, soap_tmp_ns__viewImage.inputMatFilename, soap_tmp_ns__viewImageResponse.image);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__viewImageResponse(soap, &soap_tmp_ns__viewImageResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__viewImageResponse(soap, &soap_tmp_ns__viewImageResponse, "ns:viewImageResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__viewImageResponse(soap, &soap_tmp_ns__viewImageResponse, "ns:viewImageResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
