/* soapH.h
   Generated by gSOAP 2.8.14 from CIA.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin(soap), soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin(soap), soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_begin(soap), soap_serialize_unsignedByte(soap, data), soap_begin_send(soap) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_begin(soap), soap_serialize_unsignedInt(soap, data), soap_begin_send(soap) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns__base64Binary
#define SOAP_TYPE_ns__base64Binary (8)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__base64Binary(struct soap*, const char*, int, const ns__base64Binary *, const char*);
SOAP_FMAC3 ns__base64Binary * SOAP_FMAC4 soap_in_ns__base64Binary(struct soap*, const char*, ns__base64Binary *, const char*);

#ifndef soap_write_ns__base64Binary
#define soap_write_ns__base64Binary(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns:base64Binary", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns__base64Binary * SOAP_FMAC4 soap_get_ns__base64Binary(struct soap*, ns__base64Binary *, const char*, const char*);

#ifndef soap_read_ns__base64Binary
#define soap_read_ns__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns__base64Binary * SOAP_FMAC2 soap_instantiate_ns__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline ns__base64Binary * soap_new_ns__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_ns__base64Binary(soap, n, NULL, NULL, NULL); }

inline ns__base64Binary * soap_new_req_ns__base64Binary(struct soap *soap) { ns__base64Binary *_p = soap_instantiate_ns__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__base64Binary * soap_new_set_ns__base64Binary(struct soap *soap, unsigned char *__ptr, int __size) { ns__base64Binary *_p = soap_instantiate_ns__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__base64Binary::__ptr = __ptr; _p->ns__base64Binary::__size = __size; } return _p; }

inline void soap_delete_ns__base64Binary(struct soap *soap, ns__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__RemoveSmallCell
#define SOAP_TYPE_ns__RemoveSmallCell (7)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RemoveSmallCell(struct soap*, const char*, int, const ns__RemoveSmallCell *, const char*);
SOAP_FMAC3 ns__RemoveSmallCell * SOAP_FMAC4 soap_in_ns__RemoveSmallCell(struct soap*, const char*, ns__RemoveSmallCell *, const char*);

#ifndef soap_write_ns__RemoveSmallCell
#define soap_write_ns__RemoveSmallCell(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns:RemoveSmallCell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns__RemoveSmallCell * SOAP_FMAC4 soap_get_ns__RemoveSmallCell(struct soap*, ns__RemoveSmallCell *, const char*, const char*);

#ifndef soap_read_ns__RemoveSmallCell
#define soap_read_ns__RemoveSmallCell(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__RemoveSmallCell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns__RemoveSmallCell * SOAP_FMAC2 soap_instantiate_ns__RemoveSmallCell(struct soap*, int, const char*, const char*, size_t*);

inline ns__RemoveSmallCell * soap_new_ns__RemoveSmallCell(struct soap *soap, int n = -1) { return soap_instantiate_ns__RemoveSmallCell(soap, n, NULL, NULL, NULL); }

inline ns__RemoveSmallCell * soap_new_req_ns__RemoveSmallCell(struct soap *soap) { ns__RemoveSmallCell *_p = soap_instantiate_ns__RemoveSmallCell(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__RemoveSmallCell * soap_new_set_ns__RemoveSmallCell(struct soap *soap, char *keepedArea, char *biggerArea) { ns__RemoveSmallCell *_p = soap_instantiate_ns__RemoveSmallCell(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__RemoveSmallCell::keepedArea = keepedArea; _p->ns__RemoveSmallCell::biggerArea = biggerArea; } return _p; }

inline void soap_delete_ns__RemoveSmallCell(struct soap *soap, ns__RemoveSmallCell *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__RemoveSmallCell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__viewImage
#define SOAP_TYPE_ns__viewImage (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__viewImage(struct soap*, struct ns__viewImage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__viewImage(struct soap*, const struct ns__viewImage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__viewImage(struct soap*, const char*, int, const struct ns__viewImage *, const char*);
SOAP_FMAC3 struct ns__viewImage * SOAP_FMAC4 soap_in_ns__viewImage(struct soap*, const char*, struct ns__viewImage *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__viewImage(struct soap*, const struct ns__viewImage *, const char*, const char*);

#ifndef soap_write_ns__viewImage
#define soap_write_ns__viewImage(soap, data) ( soap_begin(soap), soap_serialize_ns__viewImage(soap, data), soap_begin_send(soap) || soap_put_ns__viewImage(soap, data, "ns:viewImage", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__viewImage * SOAP_FMAC4 soap_get_ns__viewImage(struct soap*, struct ns__viewImage *, const char*, const char*);

#ifndef soap_read_ns__viewImage
#define soap_read_ns__viewImage(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__viewImage(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__viewImage * SOAP_FMAC2 soap_instantiate_ns__viewImage(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__viewImage * soap_new_ns__viewImage(struct soap *soap, int n = -1) { return soap_instantiate_ns__viewImage(soap, n, NULL, NULL, NULL); }

inline struct ns__viewImage * soap_new_req_ns__viewImage(struct soap *soap) { struct ns__viewImage *_p = soap_instantiate_ns__viewImage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__viewImage(soap, _p); } return _p; }

inline struct ns__viewImage * soap_new_set_ns__viewImage(struct soap *soap, char *inputMatFilename) { struct ns__viewImage *_p = soap_instantiate_ns__viewImage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__viewImage(soap, _p); _p->inputMatFilename = inputMatFilename; } return _p; }

inline void soap_delete_ns__viewImage(struct soap *soap, struct ns__viewImage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__viewImage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__viewImageResponse
#define SOAP_TYPE_ns__viewImageResponse (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__viewImageResponse(struct soap*, struct ns__viewImageResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__viewImageResponse(struct soap*, const struct ns__viewImageResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__viewImageResponse(struct soap*, const char*, int, const struct ns__viewImageResponse *, const char*);
SOAP_FMAC3 struct ns__viewImageResponse * SOAP_FMAC4 soap_in_ns__viewImageResponse(struct soap*, const char*, struct ns__viewImageResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__viewImageResponse(struct soap*, const struct ns__viewImageResponse *, const char*, const char*);

#ifndef soap_write_ns__viewImageResponse
#define soap_write_ns__viewImageResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__viewImageResponse(soap, data), soap_begin_send(soap) || soap_put_ns__viewImageResponse(soap, data, "ns:viewImageResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__viewImageResponse * SOAP_FMAC4 soap_get_ns__viewImageResponse(struct soap*, struct ns__viewImageResponse *, const char*, const char*);

#ifndef soap_read_ns__viewImageResponse
#define soap_read_ns__viewImageResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__viewImageResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__viewImageResponse * SOAP_FMAC2 soap_instantiate_ns__viewImageResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__viewImageResponse * soap_new_ns__viewImageResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__viewImageResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__viewImageResponse * soap_new_req_ns__viewImageResponse(struct soap *soap, ns__base64Binary& image) { struct ns__viewImageResponse *_p = soap_instantiate_ns__viewImageResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__viewImageResponse(soap, _p); _p->image = image; } return _p; }

inline struct ns__viewImageResponse * soap_new_set_ns__viewImageResponse(struct soap *soap, ns__base64Binary& image) { struct ns__viewImageResponse *_p = soap_instantiate_ns__viewImageResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__viewImageResponse(soap, _p); _p->image = image; } return _p; }

inline void soap_delete_ns__viewImageResponse(struct soap *soap, struct ns__viewImageResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__viewImageResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__prepareResult
#define SOAP_TYPE_ns__prepareResult (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__prepareResult(struct soap*, struct ns__prepareResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__prepareResult(struct soap*, const struct ns__prepareResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__prepareResult(struct soap*, const char*, int, const struct ns__prepareResult *, const char*);
SOAP_FMAC3 struct ns__prepareResult * SOAP_FMAC4 soap_in_ns__prepareResult(struct soap*, const char*, struct ns__prepareResult *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__prepareResult(struct soap*, const struct ns__prepareResult *, const char*, const char*);

#ifndef soap_write_ns__prepareResult
#define soap_write_ns__prepareResult(soap, data) ( soap_begin(soap), soap_serialize_ns__prepareResult(soap, data), soap_begin_send(soap) || soap_put_ns__prepareResult(soap, data, "ns:prepareResult", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__prepareResult * SOAP_FMAC4 soap_get_ns__prepareResult(struct soap*, struct ns__prepareResult *, const char*, const char*);

#ifndef soap_read_ns__prepareResult
#define soap_read_ns__prepareResult(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__prepareResult(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__prepareResult * SOAP_FMAC2 soap_instantiate_ns__prepareResult(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__prepareResult * soap_new_ns__prepareResult(struct soap *soap, int n = -1) { return soap_instantiate_ns__prepareResult(soap, n, NULL, NULL, NULL); }

inline struct ns__prepareResult * soap_new_req_ns__prepareResult(struct soap *soap) { struct ns__prepareResult *_p = soap_instantiate_ns__prepareResult(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__prepareResult(soap, _p); } return _p; }

inline struct ns__prepareResult * soap_new_set_ns__prepareResult(struct soap *soap, char *inputMatFilename, char *afterthresNN) { struct ns__prepareResult *_p = soap_instantiate_ns__prepareResult(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__prepareResult(soap, _p); _p->inputMatFilename = inputMatFilename; _p->afterthresNN = afterthresNN; } return _p; }

inline void soap_delete_ns__prepareResult(struct soap *soap, struct ns__prepareResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__prepareResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__prepareResultResponse
#define SOAP_TYPE_ns__prepareResultResponse (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__prepareResultResponse(struct soap*, struct ns__prepareResultResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__prepareResultResponse(struct soap*, const struct ns__prepareResultResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__prepareResultResponse(struct soap*, const char*, int, const struct ns__prepareResultResponse *, const char*);
SOAP_FMAC3 struct ns__prepareResultResponse * SOAP_FMAC4 soap_in_ns__prepareResultResponse(struct soap*, const char*, struct ns__prepareResultResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__prepareResultResponse(struct soap*, const struct ns__prepareResultResponse *, const char*, const char*);

#ifndef soap_write_ns__prepareResultResponse
#define soap_write_ns__prepareResultResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__prepareResultResponse(soap, data), soap_begin_send(soap) || soap_put_ns__prepareResultResponse(soap, data, "ns:prepareResultResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__prepareResultResponse * SOAP_FMAC4 soap_get_ns__prepareResultResponse(struct soap*, struct ns__prepareResultResponse *, const char*, const char*);

#ifndef soap_read_ns__prepareResultResponse
#define soap_read_ns__prepareResultResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__prepareResultResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__prepareResultResponse * SOAP_FMAC2 soap_instantiate_ns__prepareResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__prepareResultResponse * soap_new_ns__prepareResultResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__prepareResultResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__prepareResultResponse * soap_new_req_ns__prepareResultResponse(struct soap *soap) { struct ns__prepareResultResponse *_p = soap_instantiate_ns__prepareResultResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__prepareResultResponse(soap, _p); } return _p; }

inline struct ns__prepareResultResponse * soap_new_set_ns__prepareResultResponse(struct soap *soap, char **OutputMatFilename) { struct ns__prepareResultResponse *_p = soap_instantiate_ns__prepareResultResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__prepareResultResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__prepareResultResponse(struct soap *soap, struct ns__prepareResultResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__prepareResultResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__separateCell
#define SOAP_TYPE_ns__separateCell (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__separateCell(struct soap*, struct ns__separateCell *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__separateCell(struct soap*, const struct ns__separateCell *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__separateCell(struct soap*, const char*, int, const struct ns__separateCell *, const char*);
SOAP_FMAC3 struct ns__separateCell * SOAP_FMAC4 soap_in_ns__separateCell(struct soap*, const char*, struct ns__separateCell *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__separateCell(struct soap*, const struct ns__separateCell *, const char*, const char*);

#ifndef soap_write_ns__separateCell
#define soap_write_ns__separateCell(soap, data) ( soap_begin(soap), soap_serialize_ns__separateCell(soap, data), soap_begin_send(soap) || soap_put_ns__separateCell(soap, data, "ns:separateCell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__separateCell * SOAP_FMAC4 soap_get_ns__separateCell(struct soap*, struct ns__separateCell *, const char*, const char*);

#ifndef soap_read_ns__separateCell
#define soap_read_ns__separateCell(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__separateCell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__separateCell * SOAP_FMAC2 soap_instantiate_ns__separateCell(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__separateCell * soap_new_ns__separateCell(struct soap *soap, int n = -1) { return soap_instantiate_ns__separateCell(soap, n, NULL, NULL, NULL); }

inline struct ns__separateCell * soap_new_req_ns__separateCell(struct soap *soap) { struct ns__separateCell *_p = soap_instantiate_ns__separateCell(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__separateCell(soap, _p); } return _p; }

inline struct ns__separateCell * soap_new_set_ns__separateCell(struct soap *soap, char *input1, char *input2) { struct ns__separateCell *_p = soap_instantiate_ns__separateCell(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__separateCell(soap, _p); _p->input1 = input1; _p->input2 = input2; } return _p; }

inline void soap_delete_ns__separateCell(struct soap *soap, struct ns__separateCell *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__separateCell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__separateCellResponse
#define SOAP_TYPE_ns__separateCellResponse (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__separateCellResponse(struct soap*, struct ns__separateCellResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__separateCellResponse(struct soap*, const struct ns__separateCellResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__separateCellResponse(struct soap*, const char*, int, const struct ns__separateCellResponse *, const char*);
SOAP_FMAC3 struct ns__separateCellResponse * SOAP_FMAC4 soap_in_ns__separateCellResponse(struct soap*, const char*, struct ns__separateCellResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__separateCellResponse(struct soap*, const struct ns__separateCellResponse *, const char*, const char*);

#ifndef soap_write_ns__separateCellResponse
#define soap_write_ns__separateCellResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__separateCellResponse(soap, data), soap_begin_send(soap) || soap_put_ns__separateCellResponse(soap, data, "ns:separateCellResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__separateCellResponse * SOAP_FMAC4 soap_get_ns__separateCellResponse(struct soap*, struct ns__separateCellResponse *, const char*, const char*);

#ifndef soap_read_ns__separateCellResponse
#define soap_read_ns__separateCellResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__separateCellResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__separateCellResponse * SOAP_FMAC2 soap_instantiate_ns__separateCellResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__separateCellResponse * soap_new_ns__separateCellResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__separateCellResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__separateCellResponse * soap_new_req_ns__separateCellResponse(struct soap *soap) { struct ns__separateCellResponse *_p = soap_instantiate_ns__separateCellResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__separateCellResponse(soap, _p); } return _p; }

inline struct ns__separateCellResponse * soap_new_set_ns__separateCellResponse(struct soap *soap, char **OutputMatFilename) { struct ns__separateCellResponse *_p = soap_instantiate_ns__separateCellResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__separateCellResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__separateCellResponse(struct soap *soap, struct ns__separateCellResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__separateCellResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__trainANN
#define SOAP_TYPE_ns__trainANN (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainANN(struct soap*, struct ns__trainANN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainANN(struct soap*, const struct ns__trainANN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainANN(struct soap*, const char*, int, const struct ns__trainANN *, const char*);
SOAP_FMAC3 struct ns__trainANN * SOAP_FMAC4 soap_in_ns__trainANN(struct soap*, const char*, struct ns__trainANN *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainANN(struct soap*, const struct ns__trainANN *, const char*, const char*);

#ifndef soap_write_ns__trainANN
#define soap_write_ns__trainANN(soap, data) ( soap_begin(soap), soap_serialize_ns__trainANN(soap, data), soap_begin_send(soap) || soap_put_ns__trainANN(soap, data, "ns:trainANN", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__trainANN * SOAP_FMAC4 soap_get_ns__trainANN(struct soap*, struct ns__trainANN *, const char*, const char*);

#ifndef soap_read_ns__trainANN
#define soap_read_ns__trainANN(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__trainANN(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__trainANN * SOAP_FMAC2 soap_instantiate_ns__trainANN(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__trainANN * soap_new_ns__trainANN(struct soap *soap, int n = -1) { return soap_instantiate_ns__trainANN(soap, n, NULL, NULL, NULL); }

inline struct ns__trainANN * soap_new_req_ns__trainANN(struct soap *soap) { struct ns__trainANN *_p = soap_instantiate_ns__trainANN(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainANN(soap, _p); } return _p; }

inline struct ns__trainANN * soap_new_set_ns__trainANN(struct soap *soap, char *inputMatFilename, char *neuralFile) { struct ns__trainANN *_p = soap_instantiate_ns__trainANN(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainANN(soap, _p); _p->inputMatFilename = inputMatFilename; _p->neuralFile = neuralFile; } return _p; }

inline void soap_delete_ns__trainANN(struct soap *soap, struct ns__trainANN *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainANN(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__trainANNResponse
#define SOAP_TYPE_ns__trainANNResponse (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainANNResponse(struct soap*, struct ns__trainANNResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainANNResponse(struct soap*, const struct ns__trainANNResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainANNResponse(struct soap*, const char*, int, const struct ns__trainANNResponse *, const char*);
SOAP_FMAC3 struct ns__trainANNResponse * SOAP_FMAC4 soap_in_ns__trainANNResponse(struct soap*, const char*, struct ns__trainANNResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainANNResponse(struct soap*, const struct ns__trainANNResponse *, const char*, const char*);

#ifndef soap_write_ns__trainANNResponse
#define soap_write_ns__trainANNResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__trainANNResponse(soap, data), soap_begin_send(soap) || soap_put_ns__trainANNResponse(soap, data, "ns:trainANNResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__trainANNResponse * SOAP_FMAC4 soap_get_ns__trainANNResponse(struct soap*, struct ns__trainANNResponse *, const char*, const char*);

#ifndef soap_read_ns__trainANNResponse
#define soap_read_ns__trainANNResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__trainANNResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__trainANNResponse * SOAP_FMAC2 soap_instantiate_ns__trainANNResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__trainANNResponse * soap_new_ns__trainANNResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__trainANNResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__trainANNResponse * soap_new_req_ns__trainANNResponse(struct soap *soap) { struct ns__trainANNResponse *_p = soap_instantiate_ns__trainANNResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainANNResponse(soap, _p); } return _p; }

inline struct ns__trainANNResponse * soap_new_set_ns__trainANNResponse(struct soap *soap, char **OutputMatFilename) { struct ns__trainANNResponse *_p = soap_instantiate_ns__trainANNResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainANNResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__trainANNResponse(struct soap *soap, struct ns__trainANNResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainANNResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__scanningCell
#define SOAP_TYPE_ns__scanningCell (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__scanningCell(struct soap*, struct ns__scanningCell *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__scanningCell(struct soap*, const struct ns__scanningCell *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__scanningCell(struct soap*, const char*, int, const struct ns__scanningCell *, const char*);
SOAP_FMAC3 struct ns__scanningCell * SOAP_FMAC4 soap_in_ns__scanningCell(struct soap*, const char*, struct ns__scanningCell *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__scanningCell(struct soap*, const struct ns__scanningCell *, const char*, const char*);

#ifndef soap_write_ns__scanningCell
#define soap_write_ns__scanningCell(soap, data) ( soap_begin(soap), soap_serialize_ns__scanningCell(soap, data), soap_begin_send(soap) || soap_put_ns__scanningCell(soap, data, "ns:scanningCell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__scanningCell * SOAP_FMAC4 soap_get_ns__scanningCell(struct soap*, struct ns__scanningCell *, const char*, const char*);

#ifndef soap_read_ns__scanningCell
#define soap_read_ns__scanningCell(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__scanningCell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__scanningCell * SOAP_FMAC2 soap_instantiate_ns__scanningCell(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__scanningCell * soap_new_ns__scanningCell(struct soap *soap, int n = -1) { return soap_instantiate_ns__scanningCell(soap, n, NULL, NULL, NULL); }

inline struct ns__scanningCell * soap_new_req_ns__scanningCell(struct soap *soap) { struct ns__scanningCell *_p = soap_instantiate_ns__scanningCell(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__scanningCell(soap, _p); } return _p; }

inline struct ns__scanningCell * soap_new_set_ns__scanningCell(struct soap *soap, char *biggerArea, char *keepArea) { struct ns__scanningCell *_p = soap_instantiate_ns__scanningCell(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__scanningCell(soap, _p); _p->biggerArea = biggerArea; _p->keepArea = keepArea; } return _p; }

inline void soap_delete_ns__scanningCell(struct soap *soap, struct ns__scanningCell *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__scanningCell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__scanningCellResponse
#define SOAP_TYPE_ns__scanningCellResponse (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__scanningCellResponse(struct soap*, struct ns__scanningCellResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__scanningCellResponse(struct soap*, const struct ns__scanningCellResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__scanningCellResponse(struct soap*, const char*, int, const struct ns__scanningCellResponse *, const char*);
SOAP_FMAC3 struct ns__scanningCellResponse * SOAP_FMAC4 soap_in_ns__scanningCellResponse(struct soap*, const char*, struct ns__scanningCellResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__scanningCellResponse(struct soap*, const struct ns__scanningCellResponse *, const char*, const char*);

#ifndef soap_write_ns__scanningCellResponse
#define soap_write_ns__scanningCellResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__scanningCellResponse(soap, data), soap_begin_send(soap) || soap_put_ns__scanningCellResponse(soap, data, "ns:scanningCellResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__scanningCellResponse * SOAP_FMAC4 soap_get_ns__scanningCellResponse(struct soap*, struct ns__scanningCellResponse *, const char*, const char*);

#ifndef soap_read_ns__scanningCellResponse
#define soap_read_ns__scanningCellResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__scanningCellResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__scanningCellResponse * SOAP_FMAC2 soap_instantiate_ns__scanningCellResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__scanningCellResponse * soap_new_ns__scanningCellResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__scanningCellResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__scanningCellResponse * soap_new_req_ns__scanningCellResponse(struct soap *soap) { struct ns__scanningCellResponse *_p = soap_instantiate_ns__scanningCellResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__scanningCellResponse(soap, _p); } return _p; }

inline struct ns__scanningCellResponse * soap_new_set_ns__scanningCellResponse(struct soap *soap, char **OutputMatFilename) { struct ns__scanningCellResponse *_p = soap_instantiate_ns__scanningCellResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__scanningCellResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__scanningCellResponse(struct soap *soap, struct ns__scanningCellResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__scanningCellResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__removeSmallCell
#define SOAP_TYPE_ns__removeSmallCell (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeSmallCell(struct soap*, struct ns__removeSmallCell *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeSmallCell(struct soap*, const struct ns__removeSmallCell *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeSmallCell(struct soap*, const char*, int, const struct ns__removeSmallCell *, const char*);
SOAP_FMAC3 struct ns__removeSmallCell * SOAP_FMAC4 soap_in_ns__removeSmallCell(struct soap*, const char*, struct ns__removeSmallCell *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeSmallCell(struct soap*, const struct ns__removeSmallCell *, const char*, const char*);

#ifndef soap_write_ns__removeSmallCell
#define soap_write_ns__removeSmallCell(soap, data) ( soap_begin(soap), soap_serialize_ns__removeSmallCell(soap, data), soap_begin_send(soap) || soap_put_ns__removeSmallCell(soap, data, "ns:removeSmallCell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__removeSmallCell * SOAP_FMAC4 soap_get_ns__removeSmallCell(struct soap*, struct ns__removeSmallCell *, const char*, const char*);

#ifndef soap_read_ns__removeSmallCell
#define soap_read_ns__removeSmallCell(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__removeSmallCell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__removeSmallCell * SOAP_FMAC2 soap_instantiate_ns__removeSmallCell(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__removeSmallCell * soap_new_ns__removeSmallCell(struct soap *soap, int n = -1) { return soap_instantiate_ns__removeSmallCell(soap, n, NULL, NULL, NULL); }

inline struct ns__removeSmallCell * soap_new_req_ns__removeSmallCell(struct soap *soap) { struct ns__removeSmallCell *_p = soap_instantiate_ns__removeSmallCell(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeSmallCell(soap, _p); } return _p; }

inline struct ns__removeSmallCell * soap_new_set_ns__removeSmallCell(struct soap *soap, char *inputMatFilename) { struct ns__removeSmallCell *_p = soap_instantiate_ns__removeSmallCell(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeSmallCell(soap, _p); _p->inputMatFilename = inputMatFilename; } return _p; }

inline void soap_delete_ns__removeSmallCell(struct soap *soap, struct ns__removeSmallCell *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeSmallCell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTostring
#define SOAP_TYPE_PointerTostring (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);

#ifndef soap_write_PointerTostring
#define soap_write_PointerTostring(soap, data) ( soap_begin(soap), soap_serialize_PointerTostring(soap, data), soap_begin_send(soap) || soap_put_PointerTostring(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);

#ifndef soap_read_PointerTostring
#define soap_read_PointerTostring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostring(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_begin(soap), soap_serialize_PointerTounsignedByte(soap, data), soap_begin_send(soap) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin(soap), soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin(soap), soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

/* End of soapH.h */
