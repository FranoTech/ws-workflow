/* soapClient.cpp
   Generated by gSOAP 2.8.14 from CIA.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.14 2013-03-17 03:22:46 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__removeSmallCell(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *inputMatFilename, ns__RemoveSmallCell &out)
{	struct ns__removeSmallCell soap_tmp_ns__removeSmallCell;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__removeSmallCell.inputMatFilename = inputMatFilename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__removeSmallCell(soap, &soap_tmp_ns__removeSmallCell);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__removeSmallCell(soap, &soap_tmp_ns__removeSmallCell, "ns:removeSmallCell", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__removeSmallCell(soap, &soap_tmp_ns__removeSmallCell, "ns:removeSmallCell", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&out)
		return soap_closesock(soap);
	out.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	out.soap_get(soap, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__scanningCell(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *biggerArea, char *keepArea, char **OutputMatFilename)
{	struct ns__scanningCell soap_tmp_ns__scanningCell;
	struct ns__scanningCellResponse *soap_tmp_ns__scanningCellResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__scanningCell.biggerArea = biggerArea;
	soap_tmp_ns__scanningCell.keepArea = keepArea;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__scanningCell(soap, &soap_tmp_ns__scanningCell);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__scanningCell(soap, &soap_tmp_ns__scanningCell, "ns:scanningCell", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__scanningCell(soap, &soap_tmp_ns__scanningCell, "ns:scanningCell", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!OutputMatFilename)
		return soap_closesock(soap);
	*OutputMatFilename = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__scanningCellResponse = soap_get_ns__scanningCellResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (OutputMatFilename && soap_tmp_ns__scanningCellResponse->OutputMatFilename)
		*OutputMatFilename = *soap_tmp_ns__scanningCellResponse->OutputMatFilename;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__trainANN(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *inputMatFilename, char *neuralFile, char **OutputMatFilename)
{	struct ns__trainANN soap_tmp_ns__trainANN;
	struct ns__trainANNResponse *soap_tmp_ns__trainANNResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__trainANN.inputMatFilename = inputMatFilename;
	soap_tmp_ns__trainANN.neuralFile = neuralFile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__trainANN(soap, &soap_tmp_ns__trainANN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__trainANN(soap, &soap_tmp_ns__trainANN, "ns:trainANN", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__trainANN(soap, &soap_tmp_ns__trainANN, "ns:trainANN", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!OutputMatFilename)
		return soap_closesock(soap);
	*OutputMatFilename = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__trainANNResponse = soap_get_ns__trainANNResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (OutputMatFilename && soap_tmp_ns__trainANNResponse->OutputMatFilename)
		*OutputMatFilename = *soap_tmp_ns__trainANNResponse->OutputMatFilename;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__separateCell(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *input1, char *input2, char **OutputMatFilename)
{	struct ns__separateCell soap_tmp_ns__separateCell;
	struct ns__separateCellResponse *soap_tmp_ns__separateCellResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__separateCell.input1 = input1;
	soap_tmp_ns__separateCell.input2 = input2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__separateCell(soap, &soap_tmp_ns__separateCell);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__separateCell(soap, &soap_tmp_ns__separateCell, "ns:separateCell", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__separateCell(soap, &soap_tmp_ns__separateCell, "ns:separateCell", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!OutputMatFilename)
		return soap_closesock(soap);
	*OutputMatFilename = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__separateCellResponse = soap_get_ns__separateCellResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (OutputMatFilename && soap_tmp_ns__separateCellResponse->OutputMatFilename)
		*OutputMatFilename = *soap_tmp_ns__separateCellResponse->OutputMatFilename;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__prepareResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *inputMatFilename, char *afterthresNN, char **OutputMatFilename)
{	struct ns__prepareResult soap_tmp_ns__prepareResult;
	struct ns__prepareResultResponse *soap_tmp_ns__prepareResultResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__prepareResult.inputMatFilename = inputMatFilename;
	soap_tmp_ns__prepareResult.afterthresNN = afterthresNN;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__prepareResult(soap, &soap_tmp_ns__prepareResult);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__prepareResult(soap, &soap_tmp_ns__prepareResult, "ns:prepareResult", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__prepareResult(soap, &soap_tmp_ns__prepareResult, "ns:prepareResult", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!OutputMatFilename)
		return soap_closesock(soap);
	*OutputMatFilename = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__prepareResultResponse = soap_get_ns__prepareResultResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (OutputMatFilename && soap_tmp_ns__prepareResultResponse->OutputMatFilename)
		*OutputMatFilename = *soap_tmp_ns__prepareResultResponse->OutputMatFilename;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__viewImage(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *inputMatFilename, ns__base64Binary &image)
{	struct ns__viewImage soap_tmp_ns__viewImage;
	struct ns__viewImageResponse *soap_tmp_ns__viewImageResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/cgi-bin/CIAServer";
	soap->encodingStyle = "";
	soap_tmp_ns__viewImage.inputMatFilename = inputMatFilename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__viewImage(soap, &soap_tmp_ns__viewImage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__viewImage(soap, &soap_tmp_ns__viewImage, "ns:viewImage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__viewImage(soap, &soap_tmp_ns__viewImage, "ns:viewImage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&image)
		return soap_closesock(soap);
	image.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__viewImageResponse = soap_get_ns__viewImageResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	image = soap_tmp_ns__viewImageResponse->image;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
