/* soapC.cpp
   Generated by gSOAP 2.8.14 from ImageFiltering.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.14 2013-03-16 17:39:20 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns__Sobel:
		return soap_in_ns__Sobel(soap, NULL, NULL, "ns:Sobel");
	case SOAP_TYPE_ns__SobelResponse:
		return soap_in_ns__SobelResponse(soap, NULL, NULL, "ns:SobelResponse");
	case SOAP_TYPE_ns__pyrUp:
		return soap_in_ns__pyrUp(soap, NULL, NULL, "ns:pyrUp");
	case SOAP_TYPE_ns__pyrUpResponse:
		return soap_in_ns__pyrUpResponse(soap, NULL, NULL, "ns:pyrUpResponse");
	case SOAP_TYPE_ns__pyrDown:
		return soap_in_ns__pyrDown(soap, NULL, NULL, "ns:pyrDown");
	case SOAP_TYPE_ns__pyrDownResponse:
		return soap_in_ns__pyrDownResponse(soap, NULL, NULL, "ns:pyrDownResponse");
	case SOAP_TYPE_ns__Laplacian:
		return soap_in_ns__Laplacian(soap, NULL, NULL, "ns:Laplacian");
	case SOAP_TYPE_ns__LaplacianResponse:
		return soap_in_ns__LaplacianResponse(soap, NULL, NULL, "ns:LaplacianResponse");
	case SOAP_TYPE_ns__MorphologyEx:
		return soap_in_ns__MorphologyEx(soap, NULL, NULL, "ns:MorphologyEx");
	case SOAP_TYPE_ns__MorphologyExResponse:
		return soap_in_ns__MorphologyExResponse(soap, NULL, NULL, "ns:MorphologyExResponse");
	case SOAP_TYPE_ns__medianBlur:
		return soap_in_ns__medianBlur(soap, NULL, NULL, "ns:medianBlur");
	case SOAP_TYPE_ns__medianBlurResponse:
		return soap_in_ns__medianBlurResponse(soap, NULL, NULL, "ns:medianBlurResponse");
	case SOAP_TYPE_ns__getStructuringElement:
		return soap_in_ns__getStructuringElement(soap, NULL, NULL, "ns:getStructuringElement");
	case SOAP_TYPE_ns__getStructuringElementResponse:
		return soap_in_ns__getStructuringElementResponse(soap, NULL, NULL, "ns:getStructuringElementResponse");
	case SOAP_TYPE_ns__filter2D:
		return soap_in_ns__filter2D(soap, NULL, NULL, "ns:filter2D");
	case SOAP_TYPE_ns__filter2DResponse:
		return soap_in_ns__filter2DResponse(soap, NULL, NULL, "ns:filter2DResponse");
	case SOAP_TYPE_ns__dilate:
		return soap_in_ns__dilate(soap, NULL, NULL, "ns:dilate");
	case SOAP_TYPE_ns__dilateResponse:
		return soap_in_ns__dilateResponse(soap, NULL, NULL, "ns:dilateResponse");
	case SOAP_TYPE_ns__erode:
		return soap_in_ns__erode(soap, NULL, NULL, "ns:erode");
	case SOAP_TYPE_ns__erodeResponse:
		return soap_in_ns__erodeResponse(soap, NULL, NULL, "ns:erodeResponse");
	case SOAP_TYPE_ns__GaussianBlur:
		return soap_in_ns__GaussianBlur(soap, NULL, NULL, "ns:GaussianBlur");
	case SOAP_TYPE_ns__GaussianBlurResponse:
		return soap_in_ns__GaussianBlurResponse(soap, NULL, NULL, "ns:GaussianBlurResponse");
	case SOAP_TYPE_ns__blur:
		return soap_in_ns__blur(soap, NULL, NULL, "ns:blur");
	case SOAP_TYPE_ns__blurResponse:
		return soap_in_ns__blurResponse(soap, NULL, NULL, "ns:blurResponse");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Sobel"))
		{	*type = SOAP_TYPE_ns__Sobel;
			return soap_in_ns__Sobel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SobelResponse"))
		{	*type = SOAP_TYPE_ns__SobelResponse;
			return soap_in_ns__SobelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:pyrUp"))
		{	*type = SOAP_TYPE_ns__pyrUp;
			return soap_in_ns__pyrUp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:pyrUpResponse"))
		{	*type = SOAP_TYPE_ns__pyrUpResponse;
			return soap_in_ns__pyrUpResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:pyrDown"))
		{	*type = SOAP_TYPE_ns__pyrDown;
			return soap_in_ns__pyrDown(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:pyrDownResponse"))
		{	*type = SOAP_TYPE_ns__pyrDownResponse;
			return soap_in_ns__pyrDownResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Laplacian"))
		{	*type = SOAP_TYPE_ns__Laplacian;
			return soap_in_ns__Laplacian(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:LaplacianResponse"))
		{	*type = SOAP_TYPE_ns__LaplacianResponse;
			return soap_in_ns__LaplacianResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:MorphologyEx"))
		{	*type = SOAP_TYPE_ns__MorphologyEx;
			return soap_in_ns__MorphologyEx(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:MorphologyExResponse"))
		{	*type = SOAP_TYPE_ns__MorphologyExResponse;
			return soap_in_ns__MorphologyExResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:medianBlur"))
		{	*type = SOAP_TYPE_ns__medianBlur;
			return soap_in_ns__medianBlur(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:medianBlurResponse"))
		{	*type = SOAP_TYPE_ns__medianBlurResponse;
			return soap_in_ns__medianBlurResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStructuringElement"))
		{	*type = SOAP_TYPE_ns__getStructuringElement;
			return soap_in_ns__getStructuringElement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStructuringElementResponse"))
		{	*type = SOAP_TYPE_ns__getStructuringElementResponse;
			return soap_in_ns__getStructuringElementResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:filter2D"))
		{	*type = SOAP_TYPE_ns__filter2D;
			return soap_in_ns__filter2D(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:filter2DResponse"))
		{	*type = SOAP_TYPE_ns__filter2DResponse;
			return soap_in_ns__filter2DResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:dilate"))
		{	*type = SOAP_TYPE_ns__dilate;
			return soap_in_ns__dilate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:dilateResponse"))
		{	*type = SOAP_TYPE_ns__dilateResponse;
			return soap_in_ns__dilateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:erode"))
		{	*type = SOAP_TYPE_ns__erode;
			return soap_in_ns__erode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:erodeResponse"))
		{	*type = SOAP_TYPE_ns__erodeResponse;
			return soap_in_ns__erodeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GaussianBlur"))
		{	*type = SOAP_TYPE_ns__GaussianBlur;
			return soap_in_ns__GaussianBlur(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GaussianBlurResponse"))
		{	*type = SOAP_TYPE_ns__GaussianBlurResponse;
			return soap_in_ns__GaussianBlurResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:blur"))
		{	*type = SOAP_TYPE_ns__blur;
			return soap_in_ns__blur(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:blurResponse"))
		{	*type = SOAP_TYPE_ns__blurResponse;
			return soap_in_ns__blurResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns__Sobel:
		return soap_out_ns__Sobel(soap, tag, id, (const struct ns__Sobel *)ptr, "ns:Sobel");
	case SOAP_TYPE_ns__SobelResponse:
		return soap_out_ns__SobelResponse(soap, tag, id, (const struct ns__SobelResponse *)ptr, "ns:SobelResponse");
	case SOAP_TYPE_ns__pyrUp:
		return soap_out_ns__pyrUp(soap, tag, id, (const struct ns__pyrUp *)ptr, "ns:pyrUp");
	case SOAP_TYPE_ns__pyrUpResponse:
		return soap_out_ns__pyrUpResponse(soap, tag, id, (const struct ns__pyrUpResponse *)ptr, "ns:pyrUpResponse");
	case SOAP_TYPE_ns__pyrDown:
		return soap_out_ns__pyrDown(soap, tag, id, (const struct ns__pyrDown *)ptr, "ns:pyrDown");
	case SOAP_TYPE_ns__pyrDownResponse:
		return soap_out_ns__pyrDownResponse(soap, tag, id, (const struct ns__pyrDownResponse *)ptr, "ns:pyrDownResponse");
	case SOAP_TYPE_ns__Laplacian:
		return soap_out_ns__Laplacian(soap, tag, id, (const struct ns__Laplacian *)ptr, "ns:Laplacian");
	case SOAP_TYPE_ns__LaplacianResponse:
		return soap_out_ns__LaplacianResponse(soap, tag, id, (const struct ns__LaplacianResponse *)ptr, "ns:LaplacianResponse");
	case SOAP_TYPE_ns__MorphologyEx:
		return soap_out_ns__MorphologyEx(soap, tag, id, (const struct ns__MorphologyEx *)ptr, "ns:MorphologyEx");
	case SOAP_TYPE_ns__MorphologyExResponse:
		return soap_out_ns__MorphologyExResponse(soap, tag, id, (const struct ns__MorphologyExResponse *)ptr, "ns:MorphologyExResponse");
	case SOAP_TYPE_ns__medianBlur:
		return soap_out_ns__medianBlur(soap, tag, id, (const struct ns__medianBlur *)ptr, "ns:medianBlur");
	case SOAP_TYPE_ns__medianBlurResponse:
		return soap_out_ns__medianBlurResponse(soap, tag, id, (const struct ns__medianBlurResponse *)ptr, "ns:medianBlurResponse");
	case SOAP_TYPE_ns__getStructuringElement:
		return soap_out_ns__getStructuringElement(soap, tag, id, (const struct ns__getStructuringElement *)ptr, "ns:getStructuringElement");
	case SOAP_TYPE_ns__getStructuringElementResponse:
		return soap_out_ns__getStructuringElementResponse(soap, tag, id, (const struct ns__getStructuringElementResponse *)ptr, "ns:getStructuringElementResponse");
	case SOAP_TYPE_ns__filter2D:
		return soap_out_ns__filter2D(soap, tag, id, (const struct ns__filter2D *)ptr, "ns:filter2D");
	case SOAP_TYPE_ns__filter2DResponse:
		return soap_out_ns__filter2DResponse(soap, tag, id, (const struct ns__filter2DResponse *)ptr, "ns:filter2DResponse");
	case SOAP_TYPE_ns__dilate:
		return soap_out_ns__dilate(soap, tag, id, (const struct ns__dilate *)ptr, "ns:dilate");
	case SOAP_TYPE_ns__dilateResponse:
		return soap_out_ns__dilateResponse(soap, tag, id, (const struct ns__dilateResponse *)ptr, "ns:dilateResponse");
	case SOAP_TYPE_ns__erode:
		return soap_out_ns__erode(soap, tag, id, (const struct ns__erode *)ptr, "ns:erode");
	case SOAP_TYPE_ns__erodeResponse:
		return soap_out_ns__erodeResponse(soap, tag, id, (const struct ns__erodeResponse *)ptr, "ns:erodeResponse");
	case SOAP_TYPE_ns__GaussianBlur:
		return soap_out_ns__GaussianBlur(soap, tag, id, (const struct ns__GaussianBlur *)ptr, "ns:GaussianBlur");
	case SOAP_TYPE_ns__GaussianBlurResponse:
		return soap_out_ns__GaussianBlurResponse(soap, tag, id, (const struct ns__GaussianBlurResponse *)ptr, "ns:GaussianBlurResponse");
	case SOAP_TYPE_ns__blur:
		return soap_out_ns__blur(soap, tag, id, (const struct ns__blur *)ptr, "ns:blur");
	case SOAP_TYPE_ns__blurResponse:
		return soap_out_ns__blurResponse(soap, tag, id, (const struct ns__blurResponse *)ptr, "ns:blurResponse");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns__Sobel:
		soap_serialize_ns__Sobel(soap, (const struct ns__Sobel *)ptr);
		break;
	case SOAP_TYPE_ns__SobelResponse:
		soap_serialize_ns__SobelResponse(soap, (const struct ns__SobelResponse *)ptr);
		break;
	case SOAP_TYPE_ns__pyrUp:
		soap_serialize_ns__pyrUp(soap, (const struct ns__pyrUp *)ptr);
		break;
	case SOAP_TYPE_ns__pyrUpResponse:
		soap_serialize_ns__pyrUpResponse(soap, (const struct ns__pyrUpResponse *)ptr);
		break;
	case SOAP_TYPE_ns__pyrDown:
		soap_serialize_ns__pyrDown(soap, (const struct ns__pyrDown *)ptr);
		break;
	case SOAP_TYPE_ns__pyrDownResponse:
		soap_serialize_ns__pyrDownResponse(soap, (const struct ns__pyrDownResponse *)ptr);
		break;
	case SOAP_TYPE_ns__Laplacian:
		soap_serialize_ns__Laplacian(soap, (const struct ns__Laplacian *)ptr);
		break;
	case SOAP_TYPE_ns__LaplacianResponse:
		soap_serialize_ns__LaplacianResponse(soap, (const struct ns__LaplacianResponse *)ptr);
		break;
	case SOAP_TYPE_ns__MorphologyEx:
		soap_serialize_ns__MorphologyEx(soap, (const struct ns__MorphologyEx *)ptr);
		break;
	case SOAP_TYPE_ns__MorphologyExResponse:
		soap_serialize_ns__MorphologyExResponse(soap, (const struct ns__MorphologyExResponse *)ptr);
		break;
	case SOAP_TYPE_ns__medianBlur:
		soap_serialize_ns__medianBlur(soap, (const struct ns__medianBlur *)ptr);
		break;
	case SOAP_TYPE_ns__medianBlurResponse:
		soap_serialize_ns__medianBlurResponse(soap, (const struct ns__medianBlurResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getStructuringElement:
		soap_serialize_ns__getStructuringElement(soap, (const struct ns__getStructuringElement *)ptr);
		break;
	case SOAP_TYPE_ns__getStructuringElementResponse:
		soap_serialize_ns__getStructuringElementResponse(soap, (const struct ns__getStructuringElementResponse *)ptr);
		break;
	case SOAP_TYPE_ns__filter2D:
		soap_serialize_ns__filter2D(soap, (const struct ns__filter2D *)ptr);
		break;
	case SOAP_TYPE_ns__filter2DResponse:
		soap_serialize_ns__filter2DResponse(soap, (const struct ns__filter2DResponse *)ptr);
		break;
	case SOAP_TYPE_ns__dilate:
		soap_serialize_ns__dilate(soap, (const struct ns__dilate *)ptr);
		break;
	case SOAP_TYPE_ns__dilateResponse:
		soap_serialize_ns__dilateResponse(soap, (const struct ns__dilateResponse *)ptr);
		break;
	case SOAP_TYPE_ns__erode:
		soap_serialize_ns__erode(soap, (const struct ns__erode *)ptr);
		break;
	case SOAP_TYPE_ns__erodeResponse:
		soap_serialize_ns__erodeResponse(soap, (const struct ns__erodeResponse *)ptr);
		break;
	case SOAP_TYPE_ns__GaussianBlur:
		soap_serialize_ns__GaussianBlur(soap, (const struct ns__GaussianBlur *)ptr);
		break;
	case SOAP_TYPE_ns__GaussianBlurResponse:
		soap_serialize_ns__GaussianBlurResponse(soap, (const struct ns__GaussianBlurResponse *)ptr);
		break;
	case SOAP_TYPE_ns__blur:
		soap_serialize_ns__blur(soap, (const struct ns__blur *)ptr);
		break;
	case SOAP_TYPE_ns__blurResponse:
		soap_serialize_ns__blurResponse(soap, (const struct ns__blurResponse *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__blurResponse:
		return (void*)soap_instantiate_ns__blurResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__blur:
		return (void*)soap_instantiate_ns__blur(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GaussianBlurResponse:
		return (void*)soap_instantiate_ns__GaussianBlurResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GaussianBlur:
		return (void*)soap_instantiate_ns__GaussianBlur(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__erodeResponse:
		return (void*)soap_instantiate_ns__erodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__erode:
		return (void*)soap_instantiate_ns__erode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__dilateResponse:
		return (void*)soap_instantiate_ns__dilateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__dilate:
		return (void*)soap_instantiate_ns__dilate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__filter2DResponse:
		return (void*)soap_instantiate_ns__filter2DResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__filter2D:
		return (void*)soap_instantiate_ns__filter2D(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStructuringElementResponse:
		return (void*)soap_instantiate_ns__getStructuringElementResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStructuringElement:
		return (void*)soap_instantiate_ns__getStructuringElement(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__medianBlurResponse:
		return (void*)soap_instantiate_ns__medianBlurResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__medianBlur:
		return (void*)soap_instantiate_ns__medianBlur(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__MorphologyExResponse:
		return (void*)soap_instantiate_ns__MorphologyExResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__MorphologyEx:
		return (void*)soap_instantiate_ns__MorphologyEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__LaplacianResponse:
		return (void*)soap_instantiate_ns__LaplacianResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Laplacian:
		return (void*)soap_instantiate_ns__Laplacian(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__pyrDownResponse:
		return (void*)soap_instantiate_ns__pyrDownResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__pyrDown:
		return (void*)soap_instantiate_ns__pyrDown(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__pyrUpResponse:
		return (void*)soap_instantiate_ns__pyrUpResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__pyrUp:
		return (void*)soap_instantiate_ns__pyrUp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__SobelResponse:
		return (void*)soap_instantiate_ns__SobelResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Sobel:
		return (void*)soap_instantiate_ns__Sobel(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns__blurResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__blurResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__blurResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__blur:
		if (p->size < 0)
			SOAP_DELETE((struct ns__blur*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__blur*)p->ptr);
		break;
	case SOAP_TYPE_ns__GaussianBlurResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GaussianBlurResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GaussianBlurResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__GaussianBlur:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GaussianBlur*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GaussianBlur*)p->ptr);
		break;
	case SOAP_TYPE_ns__erodeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__erodeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__erodeResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__erode:
		if (p->size < 0)
			SOAP_DELETE((struct ns__erode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__erode*)p->ptr);
		break;
	case SOAP_TYPE_ns__dilateResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__dilateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__dilateResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__dilate:
		if (p->size < 0)
			SOAP_DELETE((struct ns__dilate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__dilate*)p->ptr);
		break;
	case SOAP_TYPE_ns__filter2DResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__filter2DResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__filter2DResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__filter2D:
		if (p->size < 0)
			SOAP_DELETE((struct ns__filter2D*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__filter2D*)p->ptr);
		break;
	case SOAP_TYPE_ns__getStructuringElementResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getStructuringElementResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getStructuringElementResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__getStructuringElement:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getStructuringElement*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getStructuringElement*)p->ptr);
		break;
	case SOAP_TYPE_ns__medianBlurResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__medianBlurResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__medianBlurResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__medianBlur:
		if (p->size < 0)
			SOAP_DELETE((struct ns__medianBlur*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__medianBlur*)p->ptr);
		break;
	case SOAP_TYPE_ns__MorphologyExResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__MorphologyExResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__MorphologyExResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__MorphologyEx:
		if (p->size < 0)
			SOAP_DELETE((struct ns__MorphologyEx*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__MorphologyEx*)p->ptr);
		break;
	case SOAP_TYPE_ns__LaplacianResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__LaplacianResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__LaplacianResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Laplacian:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Laplacian*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Laplacian*)p->ptr);
		break;
	case SOAP_TYPE_ns__pyrDownResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__pyrDownResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__pyrDownResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__pyrDown:
		if (p->size < 0)
			SOAP_DELETE((struct ns__pyrDown*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__pyrDown*)p->ptr);
		break;
	case SOAP_TYPE_ns__pyrUpResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__pyrUpResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__pyrUpResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__pyrUp:
		if (p->size < 0)
			SOAP_DELETE((struct ns__pyrUp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__pyrUp*)p->ptr);
		break;
	case SOAP_TYPE_ns__SobelResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__SobelResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__SobelResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Sobel:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Sobel*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Sobel*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Sobel(struct soap *soap, struct ns__Sobel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	a->ddepth = "CV_8U";
	a->kSize_D = 3;
	a->scale_D = 1;
	a->delta_D = 0;
	soap_default_int(soap, &a->dx);
	soap_default_int(soap, &a->dy);
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Sobel(struct soap *soap, const struct ns__Sobel *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->ddepth);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Sobel(struct soap *soap, const char *tag, int id, const struct ns__Sobel *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Sobel), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ddepth", -1, &a->ddepth, ""))
		return soap->error;
	if (soap_out_int(soap, "kSize-D", -1, &a->kSize_D, ""))
		return soap->error;
	if (soap_out_double(soap, "scale-D", -1, &a->scale_D, ""))
		return soap->error;
	if (soap_out_double(soap, "delta-D", -1, &a->delta_D, ""))
		return soap->error;
	if (soap_out_int(soap, "dx", -1, &a->dx, ""))
		return soap->error;
	if (soap_out_int(soap, "dy", -1, &a->dy, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Sobel * SOAP_FMAC4 soap_in_ns__Sobel(struct soap *soap, const char *tag, struct ns__Sobel *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_ddepth = 1;
	size_t soap_flag_kSize_D = 1;
	size_t soap_flag_scale_D = 1;
	size_t soap_flag_delta_D = 1;
	size_t soap_flag_dx = 1;
	size_t soap_flag_dy = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Sobel *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Sobel, sizeof(struct ns__Sobel), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Sobel(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_ddepth && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ddepth", &a->ddepth, "xsd:string"))
				{	soap_flag_ddepth--;
					continue;
				}
			if (soap_flag_kSize_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "kSize-D", &a->kSize_D, "xsd:int"))
				{	soap_flag_kSize_D--;
					continue;
				}
			if (soap_flag_scale_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "scale-D", &a->scale_D, "xsd:double"))
				{	soap_flag_scale_D--;
					continue;
				}
			if (soap_flag_delta_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "delta-D", &a->delta_D, "xsd:double"))
				{	soap_flag_delta_D--;
					continue;
				}
			if (soap_flag_dx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dx", &a->dx, "xsd:int"))
				{	soap_flag_dx--;
					continue;
				}
			if (soap_flag_dy && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dy", &a->dy, "xsd:int"))
				{	soap_flag_dy--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Sobel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Sobel, 0, sizeof(struct ns__Sobel), 0, soap_copy_ns__Sobel);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_dx > 0 || soap_flag_dy > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Sobel(struct soap *soap, const struct ns__Sobel *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Sobel);
	if (soap_out_ns__Sobel(soap, tag?tag:"ns:Sobel", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Sobel * SOAP_FMAC4 soap_get_ns__Sobel(struct soap *soap, struct ns__Sobel *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Sobel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Sobel * SOAP_FMAC2 soap_instantiate_ns__Sobel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Sobel(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Sobel, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Sobel);
		if (size)
			*size = sizeof(struct ns__Sobel);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Sobel, n);
		if (size)
			*size = n * sizeof(struct ns__Sobel);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Sobel*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Sobel(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Sobel %p -> %p\n", q, p));
	*(struct ns__Sobel*)p = *(struct ns__Sobel*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SobelResponse(struct soap *soap, struct ns__SobelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SobelResponse(struct soap *soap, const struct ns__SobelResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SobelResponse(struct soap *soap, const char *tag, int id, const struct ns__SobelResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SobelResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__SobelResponse * SOAP_FMAC4 soap_in_ns__SobelResponse(struct soap *soap, const char *tag, struct ns__SobelResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__SobelResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SobelResponse, sizeof(struct ns__SobelResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__SobelResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SobelResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SobelResponse, 0, sizeof(struct ns__SobelResponse), 0, soap_copy_ns__SobelResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SobelResponse(struct soap *soap, const struct ns__SobelResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__SobelResponse);
	if (soap_out_ns__SobelResponse(soap, tag?tag:"ns:SobelResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SobelResponse * SOAP_FMAC4 soap_get_ns__SobelResponse(struct soap *soap, struct ns__SobelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SobelResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__SobelResponse * SOAP_FMAC2 soap_instantiate_ns__SobelResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__SobelResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__SobelResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__SobelResponse);
		if (size)
			*size = sizeof(struct ns__SobelResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__SobelResponse, n);
		if (size)
			*size = n * sizeof(struct ns__SobelResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__SobelResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SobelResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__SobelResponse %p -> %p\n", q, p));
	*(struct ns__SobelResponse*)p = *(struct ns__SobelResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pyrUp(struct soap *soap, struct ns__pyrUp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	a->rows = 0;
	a->cols = 0;
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pyrUp(struct soap *soap, const struct ns__pyrUp *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pyrUp(struct soap *soap, const char *tag, int id, const struct ns__pyrUp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__pyrUp), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "rows", -1, &a->rows, ""))
		return soap->error;
	if (soap_out_int(soap, "cols", -1, &a->cols, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__pyrUp * SOAP_FMAC4 soap_in_ns__pyrUp(struct soap *soap, const char *tag, struct ns__pyrUp *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_rows = 1;
	size_t soap_flag_cols = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__pyrUp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__pyrUp, sizeof(struct ns__pyrUp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__pyrUp(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_rows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rows", &a->rows, "xsd:int"))
				{	soap_flag_rows--;
					continue;
				}
			if (soap_flag_cols && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cols", &a->cols, "xsd:int"))
				{	soap_flag_cols--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__pyrUp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__pyrUp, 0, sizeof(struct ns__pyrUp), 0, soap_copy_ns__pyrUp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pyrUp(struct soap *soap, const struct ns__pyrUp *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__pyrUp);
	if (soap_out_ns__pyrUp(soap, tag?tag:"ns:pyrUp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__pyrUp * SOAP_FMAC4 soap_get_ns__pyrUp(struct soap *soap, struct ns__pyrUp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__pyrUp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__pyrUp * SOAP_FMAC2 soap_instantiate_ns__pyrUp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__pyrUp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__pyrUp, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__pyrUp);
		if (size)
			*size = sizeof(struct ns__pyrUp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__pyrUp, n);
		if (size)
			*size = n * sizeof(struct ns__pyrUp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__pyrUp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pyrUp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__pyrUp %p -> %p\n", q, p));
	*(struct ns__pyrUp*)p = *(struct ns__pyrUp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pyrUpResponse(struct soap *soap, struct ns__pyrUpResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pyrUpResponse(struct soap *soap, const struct ns__pyrUpResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pyrUpResponse(struct soap *soap, const char *tag, int id, const struct ns__pyrUpResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__pyrUpResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__pyrUpResponse * SOAP_FMAC4 soap_in_ns__pyrUpResponse(struct soap *soap, const char *tag, struct ns__pyrUpResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__pyrUpResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__pyrUpResponse, sizeof(struct ns__pyrUpResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__pyrUpResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__pyrUpResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__pyrUpResponse, 0, sizeof(struct ns__pyrUpResponse), 0, soap_copy_ns__pyrUpResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pyrUpResponse(struct soap *soap, const struct ns__pyrUpResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__pyrUpResponse);
	if (soap_out_ns__pyrUpResponse(soap, tag?tag:"ns:pyrUpResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__pyrUpResponse * SOAP_FMAC4 soap_get_ns__pyrUpResponse(struct soap *soap, struct ns__pyrUpResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__pyrUpResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__pyrUpResponse * SOAP_FMAC2 soap_instantiate_ns__pyrUpResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__pyrUpResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__pyrUpResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__pyrUpResponse);
		if (size)
			*size = sizeof(struct ns__pyrUpResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__pyrUpResponse, n);
		if (size)
			*size = n * sizeof(struct ns__pyrUpResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__pyrUpResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pyrUpResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__pyrUpResponse %p -> %p\n", q, p));
	*(struct ns__pyrUpResponse*)p = *(struct ns__pyrUpResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pyrDown(struct soap *soap, struct ns__pyrDown *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	a->rows = 0;
	a->cols = 0;
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pyrDown(struct soap *soap, const struct ns__pyrDown *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pyrDown(struct soap *soap, const char *tag, int id, const struct ns__pyrDown *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__pyrDown), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "rows", -1, &a->rows, ""))
		return soap->error;
	if (soap_out_int(soap, "cols", -1, &a->cols, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__pyrDown * SOAP_FMAC4 soap_in_ns__pyrDown(struct soap *soap, const char *tag, struct ns__pyrDown *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_rows = 1;
	size_t soap_flag_cols = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__pyrDown *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__pyrDown, sizeof(struct ns__pyrDown), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__pyrDown(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_rows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rows", &a->rows, "xsd:int"))
				{	soap_flag_rows--;
					continue;
				}
			if (soap_flag_cols && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cols", &a->cols, "xsd:int"))
				{	soap_flag_cols--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__pyrDown *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__pyrDown, 0, sizeof(struct ns__pyrDown), 0, soap_copy_ns__pyrDown);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pyrDown(struct soap *soap, const struct ns__pyrDown *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__pyrDown);
	if (soap_out_ns__pyrDown(soap, tag?tag:"ns:pyrDown", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__pyrDown * SOAP_FMAC4 soap_get_ns__pyrDown(struct soap *soap, struct ns__pyrDown *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__pyrDown(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__pyrDown * SOAP_FMAC2 soap_instantiate_ns__pyrDown(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__pyrDown(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__pyrDown, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__pyrDown);
		if (size)
			*size = sizeof(struct ns__pyrDown);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__pyrDown, n);
		if (size)
			*size = n * sizeof(struct ns__pyrDown);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__pyrDown*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pyrDown(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__pyrDown %p -> %p\n", q, p));
	*(struct ns__pyrDown*)p = *(struct ns__pyrDown*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pyrDownResponse(struct soap *soap, struct ns__pyrDownResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pyrDownResponse(struct soap *soap, const struct ns__pyrDownResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pyrDownResponse(struct soap *soap, const char *tag, int id, const struct ns__pyrDownResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__pyrDownResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__pyrDownResponse * SOAP_FMAC4 soap_in_ns__pyrDownResponse(struct soap *soap, const char *tag, struct ns__pyrDownResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__pyrDownResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__pyrDownResponse, sizeof(struct ns__pyrDownResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__pyrDownResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__pyrDownResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__pyrDownResponse, 0, sizeof(struct ns__pyrDownResponse), 0, soap_copy_ns__pyrDownResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pyrDownResponse(struct soap *soap, const struct ns__pyrDownResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__pyrDownResponse);
	if (soap_out_ns__pyrDownResponse(soap, tag?tag:"ns:pyrDownResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__pyrDownResponse * SOAP_FMAC4 soap_get_ns__pyrDownResponse(struct soap *soap, struct ns__pyrDownResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__pyrDownResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__pyrDownResponse * SOAP_FMAC2 soap_instantiate_ns__pyrDownResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__pyrDownResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__pyrDownResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__pyrDownResponse);
		if (size)
			*size = sizeof(struct ns__pyrDownResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__pyrDownResponse, n);
		if (size)
			*size = n * sizeof(struct ns__pyrDownResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__pyrDownResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pyrDownResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__pyrDownResponse %p -> %p\n", q, p));
	*(struct ns__pyrDownResponse*)p = *(struct ns__pyrDownResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Laplacian(struct soap *soap, struct ns__Laplacian *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->ddepth);
	a->ksize_D = 1;
	a->scale_D = 1;
	a->delta_D = 0;
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Laplacian(struct soap *soap, const struct ns__Laplacian *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->ddepth);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Laplacian(struct soap *soap, const char *tag, int id, const struct ns__Laplacian *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Laplacian), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ddepth", -1, &a->ddepth, ""))
		return soap->error;
	if (soap_out_int(soap, "ksize-D", -1, &a->ksize_D, ""))
		return soap->error;
	if (soap_out_double(soap, "scale-D", -1, &a->scale_D, ""))
		return soap->error;
	if (soap_out_double(soap, "delta-D", -1, &a->delta_D, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Laplacian * SOAP_FMAC4 soap_in_ns__Laplacian(struct soap *soap, const char *tag, struct ns__Laplacian *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_ddepth = 1;
	size_t soap_flag_ksize_D = 1;
	size_t soap_flag_scale_D = 1;
	size_t soap_flag_delta_D = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Laplacian *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Laplacian, sizeof(struct ns__Laplacian), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Laplacian(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_ddepth && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ddepth", &a->ddepth, "xsd:string"))
				{	soap_flag_ddepth--;
					continue;
				}
			if (soap_flag_ksize_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ksize-D", &a->ksize_D, "xsd:int"))
				{	soap_flag_ksize_D--;
					continue;
				}
			if (soap_flag_scale_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "scale-D", &a->scale_D, "xsd:double"))
				{	soap_flag_scale_D--;
					continue;
				}
			if (soap_flag_delta_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "delta-D", &a->delta_D, "xsd:double"))
				{	soap_flag_delta_D--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Laplacian *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Laplacian, 0, sizeof(struct ns__Laplacian), 0, soap_copy_ns__Laplacian);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_ddepth > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Laplacian(struct soap *soap, const struct ns__Laplacian *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Laplacian);
	if (soap_out_ns__Laplacian(soap, tag?tag:"ns:Laplacian", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Laplacian * SOAP_FMAC4 soap_get_ns__Laplacian(struct soap *soap, struct ns__Laplacian *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Laplacian(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Laplacian * SOAP_FMAC2 soap_instantiate_ns__Laplacian(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Laplacian(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Laplacian, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Laplacian);
		if (size)
			*size = sizeof(struct ns__Laplacian);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__Laplacian, n);
		if (size)
			*size = n * sizeof(struct ns__Laplacian);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__Laplacian*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Laplacian(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Laplacian %p -> %p\n", q, p));
	*(struct ns__Laplacian*)p = *(struct ns__Laplacian*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__LaplacianResponse(struct soap *soap, struct ns__LaplacianResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__LaplacianResponse(struct soap *soap, const struct ns__LaplacianResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__LaplacianResponse(struct soap *soap, const char *tag, int id, const struct ns__LaplacianResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__LaplacianResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__LaplacianResponse * SOAP_FMAC4 soap_in_ns__LaplacianResponse(struct soap *soap, const char *tag, struct ns__LaplacianResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__LaplacianResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__LaplacianResponse, sizeof(struct ns__LaplacianResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__LaplacianResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__LaplacianResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__LaplacianResponse, 0, sizeof(struct ns__LaplacianResponse), 0, soap_copy_ns__LaplacianResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__LaplacianResponse(struct soap *soap, const struct ns__LaplacianResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__LaplacianResponse);
	if (soap_out_ns__LaplacianResponse(soap, tag?tag:"ns:LaplacianResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__LaplacianResponse * SOAP_FMAC4 soap_get_ns__LaplacianResponse(struct soap *soap, struct ns__LaplacianResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__LaplacianResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__LaplacianResponse * SOAP_FMAC2 soap_instantiate_ns__LaplacianResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__LaplacianResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__LaplacianResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__LaplacianResponse);
		if (size)
			*size = sizeof(struct ns__LaplacianResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__LaplacianResponse, n);
		if (size)
			*size = n * sizeof(struct ns__LaplacianResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__LaplacianResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__LaplacianResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__LaplacianResponse %p -> %p\n", q, p));
	*(struct ns__LaplacianResponse*)p = *(struct ns__LaplacianResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__MorphologyEx(struct soap *soap, struct ns__MorphologyEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->morphOperation);
	soap_default_std__string(soap, &a->StructuringElementFname);
	a->iteration_D = 1;
	a->anchorX_D = -1;
	a->anchorY_D = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__MorphologyEx(struct soap *soap, const struct ns__MorphologyEx *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->morphOperation);
	soap_serialize_std__string(soap, &a->StructuringElementFname);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MorphologyEx(struct soap *soap, const char *tag, int id, const struct ns__MorphologyEx *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__MorphologyEx), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "morphOperation", -1, &a->morphOperation, ""))
		return soap->error;
	if (soap_out_std__string(soap, "StructuringElementFname", -1, &a->StructuringElementFname, ""))
		return soap->error;
	if (soap_out_int(soap, "iteration-D", -1, &a->iteration_D, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorX-D", -1, &a->anchorX_D, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorY-D", -1, &a->anchorY_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__MorphologyEx * SOAP_FMAC4 soap_in_ns__MorphologyEx(struct soap *soap, const char *tag, struct ns__MorphologyEx *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_morphOperation = 1;
	size_t soap_flag_StructuringElementFname = 1;
	size_t soap_flag_iteration_D = 1;
	size_t soap_flag_anchorX_D = 1;
	size_t soap_flag_anchorY_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__MorphologyEx *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__MorphologyEx, sizeof(struct ns__MorphologyEx), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__MorphologyEx(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_morphOperation && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "morphOperation", &a->morphOperation, "xsd:string"))
				{	soap_flag_morphOperation--;
					continue;
				}
			if (soap_flag_StructuringElementFname && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "StructuringElementFname", &a->StructuringElementFname, "xsd:string"))
				{	soap_flag_StructuringElementFname--;
					continue;
				}
			if (soap_flag_iteration_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "iteration-D", &a->iteration_D, "xsd:int"))
				{	soap_flag_iteration_D--;
					continue;
				}
			if (soap_flag_anchorX_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorX-D", &a->anchorX_D, "xsd:int"))
				{	soap_flag_anchorX_D--;
					continue;
				}
			if (soap_flag_anchorY_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorY-D", &a->anchorY_D, "xsd:int"))
				{	soap_flag_anchorY_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__MorphologyEx *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__MorphologyEx, 0, sizeof(struct ns__MorphologyEx), 0, soap_copy_ns__MorphologyEx);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_morphOperation > 0 || soap_flag_StructuringElementFname > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__MorphologyEx(struct soap *soap, const struct ns__MorphologyEx *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__MorphologyEx);
	if (soap_out_ns__MorphologyEx(soap, tag?tag:"ns:MorphologyEx", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__MorphologyEx * SOAP_FMAC4 soap_get_ns__MorphologyEx(struct soap *soap, struct ns__MorphologyEx *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__MorphologyEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__MorphologyEx * SOAP_FMAC2 soap_instantiate_ns__MorphologyEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__MorphologyEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__MorphologyEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__MorphologyEx);
		if (size)
			*size = sizeof(struct ns__MorphologyEx);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__MorphologyEx, n);
		if (size)
			*size = n * sizeof(struct ns__MorphologyEx);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__MorphologyEx*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MorphologyEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__MorphologyEx %p -> %p\n", q, p));
	*(struct ns__MorphologyEx*)p = *(struct ns__MorphologyEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__MorphologyExResponse(struct soap *soap, struct ns__MorphologyExResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__MorphologyExResponse(struct soap *soap, const struct ns__MorphologyExResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MorphologyExResponse(struct soap *soap, const char *tag, int id, const struct ns__MorphologyExResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__MorphologyExResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__MorphologyExResponse * SOAP_FMAC4 soap_in_ns__MorphologyExResponse(struct soap *soap, const char *tag, struct ns__MorphologyExResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__MorphologyExResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__MorphologyExResponse, sizeof(struct ns__MorphologyExResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__MorphologyExResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__MorphologyExResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__MorphologyExResponse, 0, sizeof(struct ns__MorphologyExResponse), 0, soap_copy_ns__MorphologyExResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__MorphologyExResponse(struct soap *soap, const struct ns__MorphologyExResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__MorphologyExResponse);
	if (soap_out_ns__MorphologyExResponse(soap, tag?tag:"ns:MorphologyExResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__MorphologyExResponse * SOAP_FMAC4 soap_get_ns__MorphologyExResponse(struct soap *soap, struct ns__MorphologyExResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__MorphologyExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__MorphologyExResponse * SOAP_FMAC2 soap_instantiate_ns__MorphologyExResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__MorphologyExResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__MorphologyExResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__MorphologyExResponse);
		if (size)
			*size = sizeof(struct ns__MorphologyExResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__MorphologyExResponse, n);
		if (size)
			*size = n * sizeof(struct ns__MorphologyExResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__MorphologyExResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MorphologyExResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__MorphologyExResponse %p -> %p\n", q, p));
	*(struct ns__MorphologyExResponse*)p = *(struct ns__MorphologyExResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__medianBlur(struct soap *soap, struct ns__medianBlur *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	a->kSize_D = 3;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__medianBlur(struct soap *soap, const struct ns__medianBlur *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__medianBlur(struct soap *soap, const char *tag, int id, const struct ns__medianBlur *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__medianBlur), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "kSize-D", -1, &a->kSize_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__medianBlur * SOAP_FMAC4 soap_in_ns__medianBlur(struct soap *soap, const char *tag, struct ns__medianBlur *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_kSize_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__medianBlur *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__medianBlur, sizeof(struct ns__medianBlur), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__medianBlur(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_kSize_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "kSize-D", &a->kSize_D, "xsd:int"))
				{	soap_flag_kSize_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__medianBlur *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__medianBlur, 0, sizeof(struct ns__medianBlur), 0, soap_copy_ns__medianBlur);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__medianBlur(struct soap *soap, const struct ns__medianBlur *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__medianBlur);
	if (soap_out_ns__medianBlur(soap, tag?tag:"ns:medianBlur", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__medianBlur * SOAP_FMAC4 soap_get_ns__medianBlur(struct soap *soap, struct ns__medianBlur *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__medianBlur(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__medianBlur * SOAP_FMAC2 soap_instantiate_ns__medianBlur(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__medianBlur(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__medianBlur, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__medianBlur);
		if (size)
			*size = sizeof(struct ns__medianBlur);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__medianBlur, n);
		if (size)
			*size = n * sizeof(struct ns__medianBlur);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__medianBlur*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__medianBlur(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__medianBlur %p -> %p\n", q, p));
	*(struct ns__medianBlur*)p = *(struct ns__medianBlur*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__medianBlurResponse(struct soap *soap, struct ns__medianBlurResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__medianBlurResponse(struct soap *soap, const struct ns__medianBlurResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__medianBlurResponse(struct soap *soap, const char *tag, int id, const struct ns__medianBlurResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__medianBlurResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__medianBlurResponse * SOAP_FMAC4 soap_in_ns__medianBlurResponse(struct soap *soap, const char *tag, struct ns__medianBlurResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__medianBlurResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__medianBlurResponse, sizeof(struct ns__medianBlurResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__medianBlurResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__medianBlurResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__medianBlurResponse, 0, sizeof(struct ns__medianBlurResponse), 0, soap_copy_ns__medianBlurResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__medianBlurResponse(struct soap *soap, const struct ns__medianBlurResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__medianBlurResponse);
	if (soap_out_ns__medianBlurResponse(soap, tag?tag:"ns:medianBlurResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__medianBlurResponse * SOAP_FMAC4 soap_get_ns__medianBlurResponse(struct soap *soap, struct ns__medianBlurResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__medianBlurResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__medianBlurResponse * SOAP_FMAC2 soap_instantiate_ns__medianBlurResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__medianBlurResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__medianBlurResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__medianBlurResponse);
		if (size)
			*size = sizeof(struct ns__medianBlurResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__medianBlurResponse, n);
		if (size)
			*size = n * sizeof(struct ns__medianBlurResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__medianBlurResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__medianBlurResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__medianBlurResponse %p -> %p\n", q, p));
	*(struct ns__medianBlurResponse*)p = *(struct ns__medianBlurResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStructuringElement(struct soap *soap, struct ns__getStructuringElement *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->StructuringShape = "MORPH_ELLIPSE";
	a->seSizeW = 3;
	a->seSizeH = 3;
	a->anchorX_D = -1;
	a->anchorY_D = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStructuringElement(struct soap *soap, const struct ns__getStructuringElement *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->StructuringShape);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStructuringElement(struct soap *soap, const char *tag, int id, const struct ns__getStructuringElement *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStructuringElement), type))
		return soap->error;
	if (soap_out_std__string(soap, "StructuringShape", -1, &a->StructuringShape, ""))
		return soap->error;
	if (soap_out_int(soap, "seSizeW", -1, &a->seSizeW, ""))
		return soap->error;
	if (soap_out_int(soap, "seSizeH", -1, &a->seSizeH, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorX-D", -1, &a->anchorX_D, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorY-D", -1, &a->anchorY_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStructuringElement * SOAP_FMAC4 soap_in_ns__getStructuringElement(struct soap *soap, const char *tag, struct ns__getStructuringElement *a, const char *type)
{
	size_t soap_flag_StructuringShape = 1;
	size_t soap_flag_seSizeW = 1;
	size_t soap_flag_seSizeH = 1;
	size_t soap_flag_anchorX_D = 1;
	size_t soap_flag_anchorY_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStructuringElement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStructuringElement, sizeof(struct ns__getStructuringElement), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__getStructuringElement(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_StructuringShape && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "StructuringShape", &a->StructuringShape, "xsd:string"))
				{	soap_flag_StructuringShape--;
					continue;
				}
			if (soap_flag_seSizeW && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "seSizeW", &a->seSizeW, "xsd:int"))
				{	soap_flag_seSizeW--;
					continue;
				}
			if (soap_flag_seSizeH && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "seSizeH", &a->seSizeH, "xsd:int"))
				{	soap_flag_seSizeH--;
					continue;
				}
			if (soap_flag_anchorX_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorX-D", &a->anchorX_D, "xsd:int"))
				{	soap_flag_anchorX_D--;
					continue;
				}
			if (soap_flag_anchorY_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorY-D", &a->anchorY_D, "xsd:int"))
				{	soap_flag_anchorY_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStructuringElement *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStructuringElement, 0, sizeof(struct ns__getStructuringElement), 0, soap_copy_ns__getStructuringElement);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStructuringElement(struct soap *soap, const struct ns__getStructuringElement *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getStructuringElement);
	if (soap_out_ns__getStructuringElement(soap, tag?tag:"ns:getStructuringElement", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStructuringElement * SOAP_FMAC4 soap_get_ns__getStructuringElement(struct soap *soap, struct ns__getStructuringElement *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStructuringElement(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStructuringElement * SOAP_FMAC2 soap_instantiate_ns__getStructuringElement(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStructuringElement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStructuringElement, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getStructuringElement);
		if (size)
			*size = sizeof(struct ns__getStructuringElement);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getStructuringElement, n);
		if (size)
			*size = n * sizeof(struct ns__getStructuringElement);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStructuringElement*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStructuringElement(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStructuringElement %p -> %p\n", q, p));
	*(struct ns__getStructuringElement*)p = *(struct ns__getStructuringElement*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStructuringElementResponse(struct soap *soap, struct ns__getStructuringElementResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStructuringElementResponse(struct soap *soap, const struct ns__getStructuringElementResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStructuringElementResponse(struct soap *soap, const char *tag, int id, const struct ns__getStructuringElementResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStructuringElementResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStructuringElementResponse * SOAP_FMAC4 soap_in_ns__getStructuringElementResponse(struct soap *soap, const char *tag, struct ns__getStructuringElementResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStructuringElementResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStructuringElementResponse, sizeof(struct ns__getStructuringElementResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__getStructuringElementResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStructuringElementResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStructuringElementResponse, 0, sizeof(struct ns__getStructuringElementResponse), 0, soap_copy_ns__getStructuringElementResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStructuringElementResponse(struct soap *soap, const struct ns__getStructuringElementResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getStructuringElementResponse);
	if (soap_out_ns__getStructuringElementResponse(soap, tag?tag:"ns:getStructuringElementResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStructuringElementResponse * SOAP_FMAC4 soap_get_ns__getStructuringElementResponse(struct soap *soap, struct ns__getStructuringElementResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStructuringElementResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStructuringElementResponse * SOAP_FMAC2 soap_instantiate_ns__getStructuringElementResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStructuringElementResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStructuringElementResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getStructuringElementResponse);
		if (size)
			*size = sizeof(struct ns__getStructuringElementResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getStructuringElementResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getStructuringElementResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStructuringElementResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStructuringElementResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStructuringElementResponse %p -> %p\n", q, p));
	*(struct ns__getStructuringElementResponse*)p = *(struct ns__getStructuringElementResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__filter2D(struct soap *soap, struct ns__filter2D *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_int(soap, &a->ddepth);
	soap_default_std__string(soap, &a->kernelFname);
	a->anchorX_D = -1;
	a->anchorY_D = -1;
	a->delta_D = 0;
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__filter2D(struct soap *soap, const struct ns__filter2D *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->kernelFname);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__filter2D(struct soap *soap, const char *tag, int id, const struct ns__filter2D *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__filter2D), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "ddepth", -1, &a->ddepth, ""))
		return soap->error;
	if (soap_out_std__string(soap, "kernelFname", -1, &a->kernelFname, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorX-D", -1, &a->anchorX_D, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorY-D", -1, &a->anchorY_D, ""))
		return soap->error;
	if (soap_out_double(soap, "delta-D", -1, &a->delta_D, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__filter2D * SOAP_FMAC4 soap_in_ns__filter2D(struct soap *soap, const char *tag, struct ns__filter2D *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_ddepth = 1;
	size_t soap_flag_kernelFname = 1;
	size_t soap_flag_anchorX_D = 1;
	size_t soap_flag_anchorY_D = 1;
	size_t soap_flag_delta_D = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__filter2D *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__filter2D, sizeof(struct ns__filter2D), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__filter2D(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_ddepth && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ddepth", &a->ddepth, "xsd:int"))
				{	soap_flag_ddepth--;
					continue;
				}
			if (soap_flag_kernelFname && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "kernelFname", &a->kernelFname, "xsd:string"))
				{	soap_flag_kernelFname--;
					continue;
				}
			if (soap_flag_anchorX_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorX-D", &a->anchorX_D, "xsd:int"))
				{	soap_flag_anchorX_D--;
					continue;
				}
			if (soap_flag_anchorY_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorY-D", &a->anchorY_D, "xsd:int"))
				{	soap_flag_anchorY_D--;
					continue;
				}
			if (soap_flag_delta_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "delta-D", &a->delta_D, "xsd:double"))
				{	soap_flag_delta_D--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__filter2D *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__filter2D, 0, sizeof(struct ns__filter2D), 0, soap_copy_ns__filter2D);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_ddepth > 0 || soap_flag_kernelFname > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__filter2D(struct soap *soap, const struct ns__filter2D *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__filter2D);
	if (soap_out_ns__filter2D(soap, tag?tag:"ns:filter2D", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__filter2D * SOAP_FMAC4 soap_get_ns__filter2D(struct soap *soap, struct ns__filter2D *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__filter2D(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__filter2D * SOAP_FMAC2 soap_instantiate_ns__filter2D(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__filter2D(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__filter2D, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__filter2D);
		if (size)
			*size = sizeof(struct ns__filter2D);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__filter2D, n);
		if (size)
			*size = n * sizeof(struct ns__filter2D);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__filter2D*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__filter2D(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__filter2D %p -> %p\n", q, p));
	*(struct ns__filter2D*)p = *(struct ns__filter2D*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__filter2DResponse(struct soap *soap, struct ns__filter2DResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__filter2DResponse(struct soap *soap, const struct ns__filter2DResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__filter2DResponse(struct soap *soap, const char *tag, int id, const struct ns__filter2DResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__filter2DResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__filter2DResponse * SOAP_FMAC4 soap_in_ns__filter2DResponse(struct soap *soap, const char *tag, struct ns__filter2DResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__filter2DResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__filter2DResponse, sizeof(struct ns__filter2DResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__filter2DResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__filter2DResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__filter2DResponse, 0, sizeof(struct ns__filter2DResponse), 0, soap_copy_ns__filter2DResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__filter2DResponse(struct soap *soap, const struct ns__filter2DResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__filter2DResponse);
	if (soap_out_ns__filter2DResponse(soap, tag?tag:"ns:filter2DResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__filter2DResponse * SOAP_FMAC4 soap_get_ns__filter2DResponse(struct soap *soap, struct ns__filter2DResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__filter2DResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__filter2DResponse * SOAP_FMAC2 soap_instantiate_ns__filter2DResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__filter2DResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__filter2DResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__filter2DResponse);
		if (size)
			*size = sizeof(struct ns__filter2DResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__filter2DResponse, n);
		if (size)
			*size = n * sizeof(struct ns__filter2DResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__filter2DResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__filter2DResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__filter2DResponse %p -> %p\n", q, p));
	*(struct ns__filter2DResponse*)p = *(struct ns__filter2DResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__dilate(struct soap *soap, struct ns__dilate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->StructuringElementFilename);
	a->iteration_ = 1;
	a->anchorX_D = -1;
	a->anchorY_D = -1;
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__dilate(struct soap *soap, const struct ns__dilate *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->StructuringElementFilename);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__dilate(struct soap *soap, const char *tag, int id, const struct ns__dilate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__dilate), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "StructuringElementFilename", -1, &a->StructuringElementFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "iteration", -1, &a->iteration_, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorX-D", -1, &a->anchorX_D, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorY-D", -1, &a->anchorY_D, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__dilate * SOAP_FMAC4 soap_in_ns__dilate(struct soap *soap, const char *tag, struct ns__dilate *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_StructuringElementFilename = 1;
	size_t soap_flag_iteration_ = 1;
	size_t soap_flag_anchorX_D = 1;
	size_t soap_flag_anchorY_D = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__dilate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__dilate, sizeof(struct ns__dilate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__dilate(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_StructuringElementFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "StructuringElementFilename", &a->StructuringElementFilename, "xsd:string"))
				{	soap_flag_StructuringElementFilename--;
					continue;
				}
			if (soap_flag_iteration_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "iteration", &a->iteration_, "xsd:int"))
				{	soap_flag_iteration_--;
					continue;
				}
			if (soap_flag_anchorX_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorX-D", &a->anchorX_D, "xsd:int"))
				{	soap_flag_anchorX_D--;
					continue;
				}
			if (soap_flag_anchorY_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorY-D", &a->anchorY_D, "xsd:int"))
				{	soap_flag_anchorY_D--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__dilate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__dilate, 0, sizeof(struct ns__dilate), 0, soap_copy_ns__dilate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_StructuringElementFilename > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__dilate(struct soap *soap, const struct ns__dilate *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__dilate);
	if (soap_out_ns__dilate(soap, tag?tag:"ns:dilate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__dilate * SOAP_FMAC4 soap_get_ns__dilate(struct soap *soap, struct ns__dilate *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__dilate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__dilate * SOAP_FMAC2 soap_instantiate_ns__dilate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__dilate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__dilate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__dilate);
		if (size)
			*size = sizeof(struct ns__dilate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__dilate, n);
		if (size)
			*size = n * sizeof(struct ns__dilate);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__dilate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__dilate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__dilate %p -> %p\n", q, p));
	*(struct ns__dilate*)p = *(struct ns__dilate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__dilateResponse(struct soap *soap, struct ns__dilateResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__dilateResponse(struct soap *soap, const struct ns__dilateResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__dilateResponse(struct soap *soap, const char *tag, int id, const struct ns__dilateResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__dilateResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__dilateResponse * SOAP_FMAC4 soap_in_ns__dilateResponse(struct soap *soap, const char *tag, struct ns__dilateResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__dilateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__dilateResponse, sizeof(struct ns__dilateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__dilateResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__dilateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__dilateResponse, 0, sizeof(struct ns__dilateResponse), 0, soap_copy_ns__dilateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__dilateResponse(struct soap *soap, const struct ns__dilateResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__dilateResponse);
	if (soap_out_ns__dilateResponse(soap, tag?tag:"ns:dilateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__dilateResponse * SOAP_FMAC4 soap_get_ns__dilateResponse(struct soap *soap, struct ns__dilateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__dilateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__dilateResponse * SOAP_FMAC2 soap_instantiate_ns__dilateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__dilateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__dilateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__dilateResponse);
		if (size)
			*size = sizeof(struct ns__dilateResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__dilateResponse, n);
		if (size)
			*size = n * sizeof(struct ns__dilateResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__dilateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__dilateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__dilateResponse %p -> %p\n", q, p));
	*(struct ns__dilateResponse*)p = *(struct ns__dilateResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__erode(struct soap *soap, struct ns__erode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	soap_default_std__string(soap, &a->StructuringElementFilename);
	a->iteration_ = 1;
	a->anchorX_D = -1;
	a->anchorY_D = -1;
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__erode(struct soap *soap, const struct ns__erode *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->StructuringElementFilename);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__erode(struct soap *soap, const char *tag, int id, const struct ns__erode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__erode), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_std__string(soap, "StructuringElementFilename", -1, &a->StructuringElementFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "iteration", -1, &a->iteration_, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorX-D", -1, &a->anchorX_D, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorY-D", -1, &a->anchorY_D, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__erode * SOAP_FMAC4 soap_in_ns__erode(struct soap *soap, const char *tag, struct ns__erode *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_StructuringElementFilename = 1;
	size_t soap_flag_iteration_ = 1;
	size_t soap_flag_anchorX_D = 1;
	size_t soap_flag_anchorY_D = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__erode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__erode, sizeof(struct ns__erode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__erode(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_StructuringElementFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "StructuringElementFilename", &a->StructuringElementFilename, "xsd:string"))
				{	soap_flag_StructuringElementFilename--;
					continue;
				}
			if (soap_flag_iteration_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "iteration", &a->iteration_, "xsd:int"))
				{	soap_flag_iteration_--;
					continue;
				}
			if (soap_flag_anchorX_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorX-D", &a->anchorX_D, "xsd:int"))
				{	soap_flag_anchorX_D--;
					continue;
				}
			if (soap_flag_anchorY_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorY-D", &a->anchorY_D, "xsd:int"))
				{	soap_flag_anchorY_D--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__erode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__erode, 0, sizeof(struct ns__erode), 0, soap_copy_ns__erode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_StructuringElementFilename > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__erode(struct soap *soap, const struct ns__erode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__erode);
	if (soap_out_ns__erode(soap, tag?tag:"ns:erode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__erode * SOAP_FMAC4 soap_get_ns__erode(struct soap *soap, struct ns__erode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__erode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__erode * SOAP_FMAC2 soap_instantiate_ns__erode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__erode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__erode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__erode);
		if (size)
			*size = sizeof(struct ns__erode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__erode, n);
		if (size)
			*size = n * sizeof(struct ns__erode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__erode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__erode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__erode %p -> %p\n", q, p));
	*(struct ns__erode*)p = *(struct ns__erode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__erodeResponse(struct soap *soap, struct ns__erodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__erodeResponse(struct soap *soap, const struct ns__erodeResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__erodeResponse(struct soap *soap, const char *tag, int id, const struct ns__erodeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__erodeResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__erodeResponse * SOAP_FMAC4 soap_in_ns__erodeResponse(struct soap *soap, const char *tag, struct ns__erodeResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__erodeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__erodeResponse, sizeof(struct ns__erodeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__erodeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__erodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__erodeResponse, 0, sizeof(struct ns__erodeResponse), 0, soap_copy_ns__erodeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__erodeResponse(struct soap *soap, const struct ns__erodeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__erodeResponse);
	if (soap_out_ns__erodeResponse(soap, tag?tag:"ns:erodeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__erodeResponse * SOAP_FMAC4 soap_get_ns__erodeResponse(struct soap *soap, struct ns__erodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__erodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__erodeResponse * SOAP_FMAC2 soap_instantiate_ns__erodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__erodeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__erodeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__erodeResponse);
		if (size)
			*size = sizeof(struct ns__erodeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__erodeResponse, n);
		if (size)
			*size = n * sizeof(struct ns__erodeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__erodeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__erodeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__erodeResponse %p -> %p\n", q, p));
	*(struct ns__erodeResponse*)p = *(struct ns__erodeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GaussianBlur(struct soap *soap, struct ns__GaussianBlur *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	a->kernelRows = 1;
	a->kernelCols = 1;
	a->sigmaX = 0;
	a->sigmaY_D = 0;
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GaussianBlur(struct soap *soap, const struct ns__GaussianBlur *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GaussianBlur(struct soap *soap, const char *tag, int id, const struct ns__GaussianBlur *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GaussianBlur), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "kernelRows", -1, &a->kernelRows, ""))
		return soap->error;
	if (soap_out_int(soap, "kernelCols", -1, &a->kernelCols, ""))
		return soap->error;
	if (soap_out_double(soap, "sigmaX", -1, &a->sigmaX, ""))
		return soap->error;
	if (soap_out_double(soap, "sigmaY-D", -1, &a->sigmaY_D, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GaussianBlur * SOAP_FMAC4 soap_in_ns__GaussianBlur(struct soap *soap, const char *tag, struct ns__GaussianBlur *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_kernelRows = 1;
	size_t soap_flag_kernelCols = 1;
	size_t soap_flag_sigmaX = 1;
	size_t soap_flag_sigmaY_D = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GaussianBlur *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GaussianBlur, sizeof(struct ns__GaussianBlur), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__GaussianBlur(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_kernelRows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "kernelRows", &a->kernelRows, "xsd:int"))
				{	soap_flag_kernelRows--;
					continue;
				}
			if (soap_flag_kernelCols && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "kernelCols", &a->kernelCols, "xsd:int"))
				{	soap_flag_kernelCols--;
					continue;
				}
			if (soap_flag_sigmaX && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "sigmaX", &a->sigmaX, "xsd:double"))
				{	soap_flag_sigmaX--;
					continue;
				}
			if (soap_flag_sigmaY_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "sigmaY-D", &a->sigmaY_D, "xsd:double"))
				{	soap_flag_sigmaY_D--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GaussianBlur *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GaussianBlur, 0, sizeof(struct ns__GaussianBlur), 0, soap_copy_ns__GaussianBlur);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GaussianBlur(struct soap *soap, const struct ns__GaussianBlur *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GaussianBlur);
	if (soap_out_ns__GaussianBlur(soap, tag?tag:"ns:GaussianBlur", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GaussianBlur * SOAP_FMAC4 soap_get_ns__GaussianBlur(struct soap *soap, struct ns__GaussianBlur *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GaussianBlur(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GaussianBlur * SOAP_FMAC2 soap_instantiate_ns__GaussianBlur(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GaussianBlur(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GaussianBlur, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GaussianBlur);
		if (size)
			*size = sizeof(struct ns__GaussianBlur);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GaussianBlur, n);
		if (size)
			*size = n * sizeof(struct ns__GaussianBlur);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GaussianBlur*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GaussianBlur(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GaussianBlur %p -> %p\n", q, p));
	*(struct ns__GaussianBlur*)p = *(struct ns__GaussianBlur*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GaussianBlurResponse(struct soap *soap, struct ns__GaussianBlurResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GaussianBlurResponse(struct soap *soap, const struct ns__GaussianBlurResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GaussianBlurResponse(struct soap *soap, const char *tag, int id, const struct ns__GaussianBlurResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GaussianBlurResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GaussianBlurResponse * SOAP_FMAC4 soap_in_ns__GaussianBlurResponse(struct soap *soap, const char *tag, struct ns__GaussianBlurResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GaussianBlurResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GaussianBlurResponse, sizeof(struct ns__GaussianBlurResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__GaussianBlurResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GaussianBlurResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GaussianBlurResponse, 0, sizeof(struct ns__GaussianBlurResponse), 0, soap_copy_ns__GaussianBlurResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GaussianBlurResponse(struct soap *soap, const struct ns__GaussianBlurResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GaussianBlurResponse);
	if (soap_out_ns__GaussianBlurResponse(soap, tag?tag:"ns:GaussianBlurResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GaussianBlurResponse * SOAP_FMAC4 soap_get_ns__GaussianBlurResponse(struct soap *soap, struct ns__GaussianBlurResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GaussianBlurResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GaussianBlurResponse * SOAP_FMAC2 soap_instantiate_ns__GaussianBlurResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GaussianBlurResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GaussianBlurResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GaussianBlurResponse);
		if (size)
			*size = sizeof(struct ns__GaussianBlurResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GaussianBlurResponse, n);
		if (size)
			*size = n * sizeof(struct ns__GaussianBlurResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GaussianBlurResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GaussianBlurResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GaussianBlurResponse %p -> %p\n", q, p));
	*(struct ns__GaussianBlurResponse*)p = *(struct ns__GaussianBlurResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__blur(struct soap *soap, struct ns__blur *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
	a->kernelRows = 1;
	a->kernelCols = 1;
	a->anchorX_D = -1;
	a->anchorY_D = -1;
	soap_default_std__string(soap, &a->borderType_D);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__blur(struct soap *soap, const struct ns__blur *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
	soap_serialize_std__string(soap, &a->borderType_D);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__blur(struct soap *soap, const char *tag, int id, const struct ns__blur *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__blur), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "kernelRows", -1, &a->kernelRows, ""))
		return soap->error;
	if (soap_out_int(soap, "kernelCols", -1, &a->kernelCols, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorX-D", -1, &a->anchorX_D, ""))
		return soap->error;
	if (soap_out_int(soap, "anchorY-D", -1, &a->anchorY_D, ""))
		return soap->error;
	if (soap_out_std__string(soap, "borderType-D", -1, &a->borderType_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__blur * SOAP_FMAC4 soap_in_ns__blur(struct soap *soap, const char *tag, struct ns__blur *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_kernelRows = 1;
	size_t soap_flag_kernelCols = 1;
	size_t soap_flag_anchorX_D = 1;
	size_t soap_flag_anchorY_D = 1;
	size_t soap_flag_borderType_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__blur *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__blur, sizeof(struct ns__blur), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__blur(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_kernelRows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "kernelRows", &a->kernelRows, "xsd:int"))
				{	soap_flag_kernelRows--;
					continue;
				}
			if (soap_flag_kernelCols && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "kernelCols", &a->kernelCols, "xsd:int"))
				{	soap_flag_kernelCols--;
					continue;
				}
			if (soap_flag_anchorX_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorX-D", &a->anchorX_D, "xsd:int"))
				{	soap_flag_anchorX_D--;
					continue;
				}
			if (soap_flag_anchorY_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "anchorY-D", &a->anchorY_D, "xsd:int"))
				{	soap_flag_anchorY_D--;
					continue;
				}
			if (soap_flag_borderType_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "borderType-D", &a->borderType_D, "xsd:string"))
				{	soap_flag_borderType_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__blur *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__blur, 0, sizeof(struct ns__blur), 0, soap_copy_ns__blur);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0 || soap_flag_borderType_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__blur(struct soap *soap, const struct ns__blur *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__blur);
	if (soap_out_ns__blur(soap, tag?tag:"ns:blur", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__blur * SOAP_FMAC4 soap_get_ns__blur(struct soap *soap, struct ns__blur *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__blur(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__blur * SOAP_FMAC2 soap_instantiate_ns__blur(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__blur(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__blur, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__blur);
		if (size)
			*size = sizeof(struct ns__blur);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__blur, n);
		if (size)
			*size = n * sizeof(struct ns__blur);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__blur*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__blur(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__blur %p -> %p\n", q, p));
	*(struct ns__blur*)p = *(struct ns__blur*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__blurResponse(struct soap *soap, struct ns__blurResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__blurResponse(struct soap *soap, const struct ns__blurResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__blurResponse(struct soap *soap, const char *tag, int id, const struct ns__blurResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__blurResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__blurResponse * SOAP_FMAC4 soap_in_ns__blurResponse(struct soap *soap, const char *tag, struct ns__blurResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__blurResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__blurResponse, sizeof(struct ns__blurResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__blurResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__blurResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__blurResponse, 0, sizeof(struct ns__blurResponse), 0, soap_copy_ns__blurResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__blurResponse(struct soap *soap, const struct ns__blurResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__blurResponse);
	if (soap_out_ns__blurResponse(soap, tag?tag:"ns:blurResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__blurResponse * SOAP_FMAC4 soap_get_ns__blurResponse(struct soap *soap, struct ns__blurResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__blurResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__blurResponse * SOAP_FMAC2 soap_instantiate_ns__blurResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__blurResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__blurResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__blurResponse);
		if (size)
			*size = sizeof(struct ns__blurResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__blurResponse, n);
		if (size)
			*size = n * sizeof(struct ns__blurResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__blurResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__blurResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__blurResponse %p -> %p\n", q, p));
	*(struct ns__blurResponse*)p = *(struct ns__blurResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
