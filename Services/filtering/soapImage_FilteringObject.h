/* soapImage_FilteringObject.h
   Generated by gSOAP 2.8.8 from ImageFiltering.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapImage_FilteringObject_H
#define soapImage_FilteringObject_H
#include "soapH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

class Image_FilteringService : public soap
{    public:
	Image_FilteringService()
	{ static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:filt", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};

	this->namespaces = namespaces; };
	virtual ~Image_FilteringService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return soap_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__blur(struct soap*, std::string InputMatFilename, int kernelRows, int kernelCols, int anchorX_D, int anchorY_D, std::string borderType_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__GaussianBlur(struct soap*, std::string InputMatFilename, int kernelRows, int kernelCols, double sigmaX, double sigmaY_D, std::string borderType_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__erode(struct soap*, std::string InputMatFilename, std::string StructuringElementFilename, int iteration_, int anchorX_D, int anchorY_D, std::string borderType_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__dilate(struct soap*, std::string InputMatFilename, std::string StructuringElementFilename, int iteration_, int anchorX_D, int anchorY_D, std::string borderType_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__filter2D(struct soap*, std::string InputMatFilename, int ddepth, std::string kernelFname, int anchorX_D, int anchorY_D, double delta_D, std::string borderType_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__getStructuringElement(struct soap*, std::string StructuringShape, int seSizeW, int seSizeH, int anchorX_D, int anchorY_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__medianBlur(struct soap*, std::string InputMatFilename, int kSize_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__MorphologyEx(struct soap*, std::string InputMatFilename, std::string morphOperation, std::string StructuringElementFname, int iteration_D, int anchorX_D, int anchorY_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__Laplacian(struct soap*, std::string InputMatFilename, std::string ddepth, int ksize_D, double scale_D, double delta_D, std::string borderType_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__pyrDown(struct soap*, std::string InputMatFilename, int rows, int cols, std::string borderType_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__pyrUp(struct soap*, std::string InputMatFilename, int rows, int cols, std::string borderType_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__Sobel(struct soap*, std::string InputMatFilename, std::string ddepth, int kSize_D, double scale_D, double delta_D, int dx, int dy, std::string borderType_D, std::string &OutputMatFilename);

#endif
