/* soapStub.h
   Generated by gSOAP 2.8.8 from ArrayOperation.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20808
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns__OrResponse
#define SOAP_TYPE_ns__OrResponse (10)
/* ns:OrResponse */
struct ns__OrResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__Or
#define SOAP_TYPE_ns__Or (11)
/* ns:Or */
struct ns__Or
{
public:
	std::string src1;	/* required element of type xsd:string */
	std::string src2;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__AndResponse
#define SOAP_TYPE_ns__AndResponse (13)
/* ns:AndResponse */
struct ns__AndResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__And
#define SOAP_TYPE_ns__And (14)
/* ns:And */
struct ns__And
{
public:
	std::string src1;	/* required element of type xsd:string */
	std::string src2;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__XorResponse
#define SOAP_TYPE_ns__XorResponse (16)
/* ns:XorResponse */
struct ns__XorResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__Xor
#define SOAP_TYPE_ns__Xor (17)
/* ns:Xor */
struct ns__Xor
{
public:
	std::string src1;	/* required element of type xsd:string */
	std::string src2;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__NotResponse
#define SOAP_TYPE_ns__NotResponse (19)
/* ns:NotResponse */
struct ns__NotResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__Not
#define SOAP_TYPE_ns__Not (20)
/* ns:Not */
struct ns__Not
{
public:
	std::string src;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__addWeightedResponse
#define SOAP_TYPE_ns__addWeightedResponse (23)
/* ns:addWeightedResponse */
struct ns__addWeightedResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__addWeighted
#define SOAP_TYPE_ns__addWeighted (24)
/* ns:addWeighted */
struct ns__addWeighted
{
public:
	std::string InputMatFilename1;	/* required element of type xsd:string */
	double alpha;	/* required element of type xsd:double */
	std::string InputMatFilename2;	/* required element of type xsd:string */
	double beta;	/* required element of type xsd:double */
	double gamma;	/* required element of type xsd:double */
	int dtype_D;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__addResponse
#define SOAP_TYPE_ns__addResponse (26)
/* ns:addResponse */
struct ns__addResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__add
#define SOAP_TYPE_ns__add (27)
/* ns:add */
struct ns__add
{
public:
	std::string InputMatFilename1;	/* required element of type xsd:string */
	std::string InputMatFilename2;	/* required element of type xsd:string */
	std::string maskFilename_D;	/* required element of type xsd:string */
	int dtype_D;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__subtractResponse
#define SOAP_TYPE_ns__subtractResponse (29)
/* ns:subtractResponse */
struct ns__subtractResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__subtract
#define SOAP_TYPE_ns__subtract (30)
/* ns:subtract */
struct ns__subtract
{
public:
	std::string InputMatFilename1;	/* required element of type xsd:string */
	std::string InputMatFilename2;	/* required element of type xsd:string */
	std::string maskFilename_D;	/* required element of type xsd:string */
	int dtype_D;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__absResponse
#define SOAP_TYPE_ns__absResponse (32)
/* ns:absResponse */
struct ns__absResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__abs
#define SOAP_TYPE_ns__abs (33)
/* ns:abs */
struct ns__abs
{
public:
	std::string InputMatFilename;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__absdiffResponse
#define SOAP_TYPE_ns__absdiffResponse (35)
/* ns:absdiffResponse */
struct ns__absdiffResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__absdiff
#define SOAP_TYPE_ns__absdiff (36)
/* ns:absdiff */
struct ns__absdiff
{
public:
	std::string InputMatFilename1;	/* required element of type xsd:string */
	std::string InputMatFilename2;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__sqrtResponse
#define SOAP_TYPE_ns__sqrtResponse (38)
/* ns:sqrtResponse */
struct ns__sqrtResponse
{
public:
	std::string OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__sqrt
#define SOAP_TYPE_ns__sqrt (39)
/* ns:sqrt */
struct ns__sqrt
{
public:
	std::string InputMatFilename;	/* required element of type xsd:string */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (40)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (41)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (43)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (46)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (47)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__Or(struct soap*, std::string src1, std::string src2, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__And(struct soap*, std::string src1, std::string src2, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__Xor(struct soap*, std::string src1, std::string src2, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__Not(struct soap*, std::string src, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__addWeighted(struct soap*, std::string InputMatFilename1, double alpha, std::string InputMatFilename2, double beta, double gamma, int dtype_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__add(struct soap*, std::string InputMatFilename1, std::string InputMatFilename2, std::string maskFilename_D, int dtype_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__subtract(struct soap*, std::string InputMatFilename1, std::string InputMatFilename2, std::string maskFilename_D, int dtype_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__abs(struct soap*, std::string InputMatFilename, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__absdiff(struct soap*, std::string InputMatFilename1, std::string InputMatFilename2, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__sqrt(struct soap*, std::string InputMatFilename, std::string &OutputMatFilename);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__Or(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__And(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__Xor(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__Not(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__addWeighted(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__add(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__subtract(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__abs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__absdiff(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__sqrt(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__Or(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string src1, std::string src2, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__And(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string src1, std::string src2, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__Xor(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string src1, std::string src2, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__Not(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string src, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__addWeighted(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename1, double alpha, std::string InputMatFilename2, double beta, double gamma, int dtype_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__add(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename1, std::string InputMatFilename2, std::string maskFilename_D, int dtype_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__subtract(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename1, std::string InputMatFilename2, std::string maskFilename_D, int dtype_D, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__abs(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__absdiff(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename1, std::string InputMatFilename2, std::string &OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__sqrt(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, std::string &OutputMatFilename);

#endif

/* End of soapStub.h */
