/* soapC.cpp
   Generated by gSOAP 2.8.8 from ArrayOperation.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.8 2012-09-19 07:39:24 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns__sqrt:
		return soap_in_ns__sqrt(soap, NULL, NULL, "ns:sqrt");
	case SOAP_TYPE_ns__sqrtResponse:
		return soap_in_ns__sqrtResponse(soap, NULL, NULL, "ns:sqrtResponse");
	case SOAP_TYPE_ns__absdiff:
		return soap_in_ns__absdiff(soap, NULL, NULL, "ns:absdiff");
	case SOAP_TYPE_ns__absdiffResponse:
		return soap_in_ns__absdiffResponse(soap, NULL, NULL, "ns:absdiffResponse");
	case SOAP_TYPE_ns__abs:
		return soap_in_ns__abs(soap, NULL, NULL, "ns:abs");
	case SOAP_TYPE_ns__absResponse:
		return soap_in_ns__absResponse(soap, NULL, NULL, "ns:absResponse");
	case SOAP_TYPE_ns__subtract:
		return soap_in_ns__subtract(soap, NULL, NULL, "ns:subtract");
	case SOAP_TYPE_ns__subtractResponse:
		return soap_in_ns__subtractResponse(soap, NULL, NULL, "ns:subtractResponse");
	case SOAP_TYPE_ns__add:
		return soap_in_ns__add(soap, NULL, NULL, "ns:add");
	case SOAP_TYPE_ns__addResponse:
		return soap_in_ns__addResponse(soap, NULL, NULL, "ns:addResponse");
	case SOAP_TYPE_ns__addWeighted:
		return soap_in_ns__addWeighted(soap, NULL, NULL, "ns:addWeighted");
	case SOAP_TYPE_ns__addWeightedResponse:
		return soap_in_ns__addWeightedResponse(soap, NULL, NULL, "ns:addWeightedResponse");
	case SOAP_TYPE_ns__Not:
		return soap_in_ns__Not(soap, NULL, NULL, "ns:Not");
	case SOAP_TYPE_ns__NotResponse:
		return soap_in_ns__NotResponse(soap, NULL, NULL, "ns:NotResponse");
	case SOAP_TYPE_ns__Xor:
		return soap_in_ns__Xor(soap, NULL, NULL, "ns:Xor");
	case SOAP_TYPE_ns__XorResponse:
		return soap_in_ns__XorResponse(soap, NULL, NULL, "ns:XorResponse");
	case SOAP_TYPE_ns__And:
		return soap_in_ns__And(soap, NULL, NULL, "ns:And");
	case SOAP_TYPE_ns__AndResponse:
		return soap_in_ns__AndResponse(soap, NULL, NULL, "ns:AndResponse");
	case SOAP_TYPE_ns__Or:
		return soap_in_ns__Or(soap, NULL, NULL, "ns:Or");
	case SOAP_TYPE_ns__OrResponse:
		return soap_in_ns__OrResponse(soap, NULL, NULL, "ns:OrResponse");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sqrt"))
		{	*type = SOAP_TYPE_ns__sqrt;
			return soap_in_ns__sqrt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sqrtResponse"))
		{	*type = SOAP_TYPE_ns__sqrtResponse;
			return soap_in_ns__sqrtResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:absdiff"))
		{	*type = SOAP_TYPE_ns__absdiff;
			return soap_in_ns__absdiff(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:absdiffResponse"))
		{	*type = SOAP_TYPE_ns__absdiffResponse;
			return soap_in_ns__absdiffResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:abs"))
		{	*type = SOAP_TYPE_ns__abs;
			return soap_in_ns__abs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:absResponse"))
		{	*type = SOAP_TYPE_ns__absResponse;
			return soap_in_ns__absResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:subtract"))
		{	*type = SOAP_TYPE_ns__subtract;
			return soap_in_ns__subtract(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:subtractResponse"))
		{	*type = SOAP_TYPE_ns__subtractResponse;
			return soap_in_ns__subtractResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:add"))
		{	*type = SOAP_TYPE_ns__add;
			return soap_in_ns__add(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addResponse"))
		{	*type = SOAP_TYPE_ns__addResponse;
			return soap_in_ns__addResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addWeighted"))
		{	*type = SOAP_TYPE_ns__addWeighted;
			return soap_in_ns__addWeighted(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addWeightedResponse"))
		{	*type = SOAP_TYPE_ns__addWeightedResponse;
			return soap_in_ns__addWeightedResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Not"))
		{	*type = SOAP_TYPE_ns__Not;
			return soap_in_ns__Not(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:NotResponse"))
		{	*type = SOAP_TYPE_ns__NotResponse;
			return soap_in_ns__NotResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Xor"))
		{	*type = SOAP_TYPE_ns__Xor;
			return soap_in_ns__Xor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:XorResponse"))
		{	*type = SOAP_TYPE_ns__XorResponse;
			return soap_in_ns__XorResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:And"))
		{	*type = SOAP_TYPE_ns__And;
			return soap_in_ns__And(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AndResponse"))
		{	*type = SOAP_TYPE_ns__AndResponse;
			return soap_in_ns__AndResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Or"))
		{	*type = SOAP_TYPE_ns__Or;
			return soap_in_ns__Or(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:OrResponse"))
		{	*type = SOAP_TYPE_ns__OrResponse;
			return soap_in_ns__OrResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns__sqrt:
		return soap_out_ns__sqrt(soap, tag, id, (const struct ns__sqrt *)ptr, "ns:sqrt");
	case SOAP_TYPE_ns__sqrtResponse:
		return soap_out_ns__sqrtResponse(soap, tag, id, (const struct ns__sqrtResponse *)ptr, "ns:sqrtResponse");
	case SOAP_TYPE_ns__absdiff:
		return soap_out_ns__absdiff(soap, tag, id, (const struct ns__absdiff *)ptr, "ns:absdiff");
	case SOAP_TYPE_ns__absdiffResponse:
		return soap_out_ns__absdiffResponse(soap, tag, id, (const struct ns__absdiffResponse *)ptr, "ns:absdiffResponse");
	case SOAP_TYPE_ns__abs:
		return soap_out_ns__abs(soap, tag, id, (const struct ns__abs *)ptr, "ns:abs");
	case SOAP_TYPE_ns__absResponse:
		return soap_out_ns__absResponse(soap, tag, id, (const struct ns__absResponse *)ptr, "ns:absResponse");
	case SOAP_TYPE_ns__subtract:
		return soap_out_ns__subtract(soap, tag, id, (const struct ns__subtract *)ptr, "ns:subtract");
	case SOAP_TYPE_ns__subtractResponse:
		return soap_out_ns__subtractResponse(soap, tag, id, (const struct ns__subtractResponse *)ptr, "ns:subtractResponse");
	case SOAP_TYPE_ns__add:
		return soap_out_ns__add(soap, tag, id, (const struct ns__add *)ptr, "ns:add");
	case SOAP_TYPE_ns__addResponse:
		return soap_out_ns__addResponse(soap, tag, id, (const struct ns__addResponse *)ptr, "ns:addResponse");
	case SOAP_TYPE_ns__addWeighted:
		return soap_out_ns__addWeighted(soap, tag, id, (const struct ns__addWeighted *)ptr, "ns:addWeighted");
	case SOAP_TYPE_ns__addWeightedResponse:
		return soap_out_ns__addWeightedResponse(soap, tag, id, (const struct ns__addWeightedResponse *)ptr, "ns:addWeightedResponse");
	case SOAP_TYPE_ns__Not:
		return soap_out_ns__Not(soap, tag, id, (const struct ns__Not *)ptr, "ns:Not");
	case SOAP_TYPE_ns__NotResponse:
		return soap_out_ns__NotResponse(soap, tag, id, (const struct ns__NotResponse *)ptr, "ns:NotResponse");
	case SOAP_TYPE_ns__Xor:
		return soap_out_ns__Xor(soap, tag, id, (const struct ns__Xor *)ptr, "ns:Xor");
	case SOAP_TYPE_ns__XorResponse:
		return soap_out_ns__XorResponse(soap, tag, id, (const struct ns__XorResponse *)ptr, "ns:XorResponse");
	case SOAP_TYPE_ns__And:
		return soap_out_ns__And(soap, tag, id, (const struct ns__And *)ptr, "ns:And");
	case SOAP_TYPE_ns__AndResponse:
		return soap_out_ns__AndResponse(soap, tag, id, (const struct ns__AndResponse *)ptr, "ns:AndResponse");
	case SOAP_TYPE_ns__Or:
		return soap_out_ns__Or(soap, tag, id, (const struct ns__Or *)ptr, "ns:Or");
	case SOAP_TYPE_ns__OrResponse:
		return soap_out_ns__OrResponse(soap, tag, id, (const struct ns__OrResponse *)ptr, "ns:OrResponse");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns__sqrt:
		soap_serialize_ns__sqrt(soap, (const struct ns__sqrt *)ptr);
		break;
	case SOAP_TYPE_ns__sqrtResponse:
		soap_serialize_ns__sqrtResponse(soap, (const struct ns__sqrtResponse *)ptr);
		break;
	case SOAP_TYPE_ns__absdiff:
		soap_serialize_ns__absdiff(soap, (const struct ns__absdiff *)ptr);
		break;
	case SOAP_TYPE_ns__absdiffResponse:
		soap_serialize_ns__absdiffResponse(soap, (const struct ns__absdiffResponse *)ptr);
		break;
	case SOAP_TYPE_ns__abs:
		soap_serialize_ns__abs(soap, (const struct ns__abs *)ptr);
		break;
	case SOAP_TYPE_ns__absResponse:
		soap_serialize_ns__absResponse(soap, (const struct ns__absResponse *)ptr);
		break;
	case SOAP_TYPE_ns__subtract:
		soap_serialize_ns__subtract(soap, (const struct ns__subtract *)ptr);
		break;
	case SOAP_TYPE_ns__subtractResponse:
		soap_serialize_ns__subtractResponse(soap, (const struct ns__subtractResponse *)ptr);
		break;
	case SOAP_TYPE_ns__add:
		soap_serialize_ns__add(soap, (const struct ns__add *)ptr);
		break;
	case SOAP_TYPE_ns__addResponse:
		soap_serialize_ns__addResponse(soap, (const struct ns__addResponse *)ptr);
		break;
	case SOAP_TYPE_ns__addWeighted:
		soap_serialize_ns__addWeighted(soap, (const struct ns__addWeighted *)ptr);
		break;
	case SOAP_TYPE_ns__addWeightedResponse:
		soap_serialize_ns__addWeightedResponse(soap, (const struct ns__addWeightedResponse *)ptr);
		break;
	case SOAP_TYPE_ns__Not:
		soap_serialize_ns__Not(soap, (const struct ns__Not *)ptr);
		break;
	case SOAP_TYPE_ns__NotResponse:
		soap_serialize_ns__NotResponse(soap, (const struct ns__NotResponse *)ptr);
		break;
	case SOAP_TYPE_ns__Xor:
		soap_serialize_ns__Xor(soap, (const struct ns__Xor *)ptr);
		break;
	case SOAP_TYPE_ns__XorResponse:
		soap_serialize_ns__XorResponse(soap, (const struct ns__XorResponse *)ptr);
		break;
	case SOAP_TYPE_ns__And:
		soap_serialize_ns__And(soap, (const struct ns__And *)ptr);
		break;
	case SOAP_TYPE_ns__AndResponse:
		soap_serialize_ns__AndResponse(soap, (const struct ns__AndResponse *)ptr);
		break;
	case SOAP_TYPE_ns__Or:
		soap_serialize_ns__Or(soap, (const struct ns__Or *)ptr);
		break;
	case SOAP_TYPE_ns__OrResponse:
		soap_serialize_ns__OrResponse(soap, (const struct ns__OrResponse *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__OrResponse:
		return (void*)soap_instantiate_ns__OrResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Or:
		return (void*)soap_instantiate_ns__Or(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AndResponse:
		return (void*)soap_instantiate_ns__AndResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__And:
		return (void*)soap_instantiate_ns__And(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__XorResponse:
		return (void*)soap_instantiate_ns__XorResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Xor:
		return (void*)soap_instantiate_ns__Xor(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__NotResponse:
		return (void*)soap_instantiate_ns__NotResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Not:
		return (void*)soap_instantiate_ns__Not(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addWeightedResponse:
		return (void*)soap_instantiate_ns__addWeightedResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addWeighted:
		return (void*)soap_instantiate_ns__addWeighted(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addResponse:
		return (void*)soap_instantiate_ns__addResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__add:
		return (void*)soap_instantiate_ns__add(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__subtractResponse:
		return (void*)soap_instantiate_ns__subtractResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__subtract:
		return (void*)soap_instantiate_ns__subtract(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__absResponse:
		return (void*)soap_instantiate_ns__absResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__abs:
		return (void*)soap_instantiate_ns__abs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__absdiffResponse:
		return (void*)soap_instantiate_ns__absdiffResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__absdiff:
		return (void*)soap_instantiate_ns__absdiff(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sqrtResponse:
		return (void*)soap_instantiate_ns__sqrtResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sqrt:
		return (void*)soap_instantiate_ns__sqrt(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns__OrResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__OrResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__OrResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Or:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Or*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Or*)p->ptr);
		break;
	case SOAP_TYPE_ns__AndResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__AndResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__AndResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__And:
		if (p->size < 0)
			SOAP_DELETE((struct ns__And*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__And*)p->ptr);
		break;
	case SOAP_TYPE_ns__XorResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__XorResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__XorResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Xor:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Xor*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Xor*)p->ptr);
		break;
	case SOAP_TYPE_ns__NotResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__NotResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__NotResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Not:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Not*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Not*)p->ptr);
		break;
	case SOAP_TYPE_ns__addWeightedResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addWeightedResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addWeightedResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__addWeighted:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addWeighted*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addWeighted*)p->ptr);
		break;
	case SOAP_TYPE_ns__addResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__add:
		if (p->size < 0)
			SOAP_DELETE((struct ns__add*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__add*)p->ptr);
		break;
	case SOAP_TYPE_ns__subtractResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__subtractResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__subtractResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__subtract:
		if (p->size < 0)
			SOAP_DELETE((struct ns__subtract*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__subtract*)p->ptr);
		break;
	case SOAP_TYPE_ns__absResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__absResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__absResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__abs:
		if (p->size < 0)
			SOAP_DELETE((struct ns__abs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__abs*)p->ptr);
		break;
	case SOAP_TYPE_ns__absdiffResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__absdiffResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__absdiffResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__absdiff:
		if (p->size < 0)
			SOAP_DELETE((struct ns__absdiff*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__absdiff*)p->ptr);
		break;
	case SOAP_TYPE_ns__sqrtResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__sqrtResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__sqrtResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__sqrt:
		if (p->size < 0)
			SOAP_DELETE((struct ns__sqrt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__sqrt*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sqrt(struct soap *soap, struct ns__sqrt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sqrt(struct soap *soap, const struct ns__sqrt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sqrt(struct soap *soap, const char *tag, int id, const struct ns__sqrt *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sqrt), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sqrt * SOAP_FMAC4 soap_in_ns__sqrt(struct soap *soap, const char *tag, struct ns__sqrt *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sqrt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sqrt, sizeof(struct ns__sqrt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__sqrt(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sqrt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sqrt, 0, sizeof(struct ns__sqrt), 0, soap_copy_ns__sqrt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sqrt(struct soap *soap, const struct ns__sqrt *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sqrt);
	if (soap_out_ns__sqrt(soap, tag?tag:"ns:sqrt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__sqrt * SOAP_FMAC4 soap_get_ns__sqrt(struct soap *soap, struct ns__sqrt *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sqrt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__sqrt * SOAP_FMAC2 soap_instantiate_ns__sqrt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sqrt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sqrt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__sqrt);
		if (size)
			*size = sizeof(struct ns__sqrt);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__sqrt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sqrt);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sqrt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sqrt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sqrt %p -> %p\n", q, p));
	*(struct ns__sqrt*)p = *(struct ns__sqrt*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sqrtResponse(struct soap *soap, struct ns__sqrtResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sqrtResponse(struct soap *soap, const struct ns__sqrtResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sqrtResponse(struct soap *soap, const char *tag, int id, const struct ns__sqrtResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sqrtResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sqrtResponse * SOAP_FMAC4 soap_in_ns__sqrtResponse(struct soap *soap, const char *tag, struct ns__sqrtResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sqrtResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sqrtResponse, sizeof(struct ns__sqrtResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__sqrtResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sqrtResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sqrtResponse, 0, sizeof(struct ns__sqrtResponse), 0, soap_copy_ns__sqrtResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sqrtResponse(struct soap *soap, const struct ns__sqrtResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sqrtResponse);
	if (soap_out_ns__sqrtResponse(soap, tag?tag:"ns:sqrtResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__sqrtResponse * SOAP_FMAC4 soap_get_ns__sqrtResponse(struct soap *soap, struct ns__sqrtResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sqrtResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__sqrtResponse * SOAP_FMAC2 soap_instantiate_ns__sqrtResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sqrtResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sqrtResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__sqrtResponse);
		if (size)
			*size = sizeof(struct ns__sqrtResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__sqrtResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sqrtResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sqrtResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sqrtResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sqrtResponse %p -> %p\n", q, p));
	*(struct ns__sqrtResponse*)p = *(struct ns__sqrtResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__absdiff(struct soap *soap, struct ns__absdiff *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename1);
	soap_default_std__string(soap, &a->InputMatFilename2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__absdiff(struct soap *soap, const struct ns__absdiff *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename1);
	soap_serialize_std__string(soap, &a->InputMatFilename2);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__absdiff(struct soap *soap, const char *tag, int id, const struct ns__absdiff *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__absdiff), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename1", -1, &a->InputMatFilename1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename2", -1, &a->InputMatFilename2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__absdiff * SOAP_FMAC4 soap_in_ns__absdiff(struct soap *soap, const char *tag, struct ns__absdiff *a, const char *type)
{
	size_t soap_flag_InputMatFilename1 = 1;
	size_t soap_flag_InputMatFilename2 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__absdiff *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__absdiff, sizeof(struct ns__absdiff), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__absdiff(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename1", &a->InputMatFilename1, "xsd:string"))
				{	soap_flag_InputMatFilename1--;
					continue;
				}
			if (soap_flag_InputMatFilename2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename2", &a->InputMatFilename2, "xsd:string"))
				{	soap_flag_InputMatFilename2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__absdiff *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__absdiff, 0, sizeof(struct ns__absdiff), 0, soap_copy_ns__absdiff);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename1 > 0 || soap_flag_InputMatFilename2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__absdiff(struct soap *soap, const struct ns__absdiff *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__absdiff);
	if (soap_out_ns__absdiff(soap, tag?tag:"ns:absdiff", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__absdiff * SOAP_FMAC4 soap_get_ns__absdiff(struct soap *soap, struct ns__absdiff *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__absdiff(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__absdiff * SOAP_FMAC2 soap_instantiate_ns__absdiff(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__absdiff(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__absdiff, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__absdiff);
		if (size)
			*size = sizeof(struct ns__absdiff);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__absdiff[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__absdiff);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__absdiff*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__absdiff(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__absdiff %p -> %p\n", q, p));
	*(struct ns__absdiff*)p = *(struct ns__absdiff*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__absdiffResponse(struct soap *soap, struct ns__absdiffResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__absdiffResponse(struct soap *soap, const struct ns__absdiffResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__absdiffResponse(struct soap *soap, const char *tag, int id, const struct ns__absdiffResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__absdiffResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__absdiffResponse * SOAP_FMAC4 soap_in_ns__absdiffResponse(struct soap *soap, const char *tag, struct ns__absdiffResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__absdiffResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__absdiffResponse, sizeof(struct ns__absdiffResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__absdiffResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__absdiffResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__absdiffResponse, 0, sizeof(struct ns__absdiffResponse), 0, soap_copy_ns__absdiffResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__absdiffResponse(struct soap *soap, const struct ns__absdiffResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__absdiffResponse);
	if (soap_out_ns__absdiffResponse(soap, tag?tag:"ns:absdiffResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__absdiffResponse * SOAP_FMAC4 soap_get_ns__absdiffResponse(struct soap *soap, struct ns__absdiffResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__absdiffResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__absdiffResponse * SOAP_FMAC2 soap_instantiate_ns__absdiffResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__absdiffResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__absdiffResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__absdiffResponse);
		if (size)
			*size = sizeof(struct ns__absdiffResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__absdiffResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__absdiffResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__absdiffResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__absdiffResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__absdiffResponse %p -> %p\n", q, p));
	*(struct ns__absdiffResponse*)p = *(struct ns__absdiffResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__abs(struct soap *soap, struct ns__abs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__abs(struct soap *soap, const struct ns__abs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__abs(struct soap *soap, const char *tag, int id, const struct ns__abs *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__abs), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__abs * SOAP_FMAC4 soap_in_ns__abs(struct soap *soap, const char *tag, struct ns__abs *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__abs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__abs, sizeof(struct ns__abs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__abs(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__abs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__abs, 0, sizeof(struct ns__abs), 0, soap_copy_ns__abs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__abs(struct soap *soap, const struct ns__abs *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__abs);
	if (soap_out_ns__abs(soap, tag?tag:"ns:abs", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__abs * SOAP_FMAC4 soap_get_ns__abs(struct soap *soap, struct ns__abs *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__abs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__abs * SOAP_FMAC2 soap_instantiate_ns__abs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__abs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__abs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__abs);
		if (size)
			*size = sizeof(struct ns__abs);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__abs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__abs);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__abs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__abs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__abs %p -> %p\n", q, p));
	*(struct ns__abs*)p = *(struct ns__abs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__absResponse(struct soap *soap, struct ns__absResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__absResponse(struct soap *soap, const struct ns__absResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__absResponse(struct soap *soap, const char *tag, int id, const struct ns__absResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__absResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__absResponse * SOAP_FMAC4 soap_in_ns__absResponse(struct soap *soap, const char *tag, struct ns__absResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__absResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__absResponse, sizeof(struct ns__absResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__absResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__absResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__absResponse, 0, sizeof(struct ns__absResponse), 0, soap_copy_ns__absResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__absResponse(struct soap *soap, const struct ns__absResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__absResponse);
	if (soap_out_ns__absResponse(soap, tag?tag:"ns:absResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__absResponse * SOAP_FMAC4 soap_get_ns__absResponse(struct soap *soap, struct ns__absResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__absResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__absResponse * SOAP_FMAC2 soap_instantiate_ns__absResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__absResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__absResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__absResponse);
		if (size)
			*size = sizeof(struct ns__absResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__absResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__absResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__absResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__absResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__absResponse %p -> %p\n", q, p));
	*(struct ns__absResponse*)p = *(struct ns__absResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__subtract(struct soap *soap, struct ns__subtract *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename1);
	soap_default_std__string(soap, &a->InputMatFilename2);
	soap_default_std__string(soap, &a->maskFilename_D);
	a->dtype_D = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__subtract(struct soap *soap, const struct ns__subtract *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename1);
	soap_serialize_std__string(soap, &a->InputMatFilename2);
	soap_serialize_std__string(soap, &a->maskFilename_D);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__subtract(struct soap *soap, const char *tag, int id, const struct ns__subtract *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__subtract), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename1", -1, &a->InputMatFilename1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename2", -1, &a->InputMatFilename2, ""))
		return soap->error;
	if (soap_out_std__string(soap, "maskFilename-D", -1, &a->maskFilename_D, ""))
		return soap->error;
	if (soap_out_int(soap, "dtype-D", -1, &a->dtype_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__subtract * SOAP_FMAC4 soap_in_ns__subtract(struct soap *soap, const char *tag, struct ns__subtract *a, const char *type)
{
	size_t soap_flag_InputMatFilename1 = 1;
	size_t soap_flag_InputMatFilename2 = 1;
	size_t soap_flag_maskFilename_D = 1;
	size_t soap_flag_dtype_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__subtract *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__subtract, sizeof(struct ns__subtract), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__subtract(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename1", &a->InputMatFilename1, "xsd:string"))
				{	soap_flag_InputMatFilename1--;
					continue;
				}
			if (soap_flag_InputMatFilename2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename2", &a->InputMatFilename2, "xsd:string"))
				{	soap_flag_InputMatFilename2--;
					continue;
				}
			if (soap_flag_maskFilename_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "maskFilename-D", &a->maskFilename_D, "xsd:string"))
				{	soap_flag_maskFilename_D--;
					continue;
				}
			if (soap_flag_dtype_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dtype-D", &a->dtype_D, "xsd:int"))
				{	soap_flag_dtype_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__subtract *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__subtract, 0, sizeof(struct ns__subtract), 0, soap_copy_ns__subtract);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename1 > 0 || soap_flag_InputMatFilename2 > 0 || soap_flag_maskFilename_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__subtract(struct soap *soap, const struct ns__subtract *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__subtract);
	if (soap_out_ns__subtract(soap, tag?tag:"ns:subtract", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__subtract * SOAP_FMAC4 soap_get_ns__subtract(struct soap *soap, struct ns__subtract *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__subtract(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__subtract * SOAP_FMAC2 soap_instantiate_ns__subtract(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__subtract(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__subtract, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__subtract);
		if (size)
			*size = sizeof(struct ns__subtract);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__subtract[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__subtract);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__subtract*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__subtract(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__subtract %p -> %p\n", q, p));
	*(struct ns__subtract*)p = *(struct ns__subtract*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__subtractResponse(struct soap *soap, struct ns__subtractResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__subtractResponse(struct soap *soap, const struct ns__subtractResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__subtractResponse(struct soap *soap, const char *tag, int id, const struct ns__subtractResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__subtractResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__subtractResponse * SOAP_FMAC4 soap_in_ns__subtractResponse(struct soap *soap, const char *tag, struct ns__subtractResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__subtractResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__subtractResponse, sizeof(struct ns__subtractResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__subtractResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__subtractResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__subtractResponse, 0, sizeof(struct ns__subtractResponse), 0, soap_copy_ns__subtractResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__subtractResponse(struct soap *soap, const struct ns__subtractResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__subtractResponse);
	if (soap_out_ns__subtractResponse(soap, tag?tag:"ns:subtractResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__subtractResponse * SOAP_FMAC4 soap_get_ns__subtractResponse(struct soap *soap, struct ns__subtractResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__subtractResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__subtractResponse * SOAP_FMAC2 soap_instantiate_ns__subtractResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__subtractResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__subtractResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__subtractResponse);
		if (size)
			*size = sizeof(struct ns__subtractResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__subtractResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__subtractResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__subtractResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__subtractResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__subtractResponse %p -> %p\n", q, p));
	*(struct ns__subtractResponse*)p = *(struct ns__subtractResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__add(struct soap *soap, struct ns__add *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename1);
	soap_default_std__string(soap, &a->InputMatFilename2);
	soap_default_std__string(soap, &a->maskFilename_D);
	a->dtype_D = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__add(struct soap *soap, const struct ns__add *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename1);
	soap_serialize_std__string(soap, &a->InputMatFilename2);
	soap_serialize_std__string(soap, &a->maskFilename_D);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__add(struct soap *soap, const char *tag, int id, const struct ns__add *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__add), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename1", -1, &a->InputMatFilename1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename2", -1, &a->InputMatFilename2, ""))
		return soap->error;
	if (soap_out_std__string(soap, "maskFilename-D", -1, &a->maskFilename_D, ""))
		return soap->error;
	if (soap_out_int(soap, "dtype-D", -1, &a->dtype_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__add * SOAP_FMAC4 soap_in_ns__add(struct soap *soap, const char *tag, struct ns__add *a, const char *type)
{
	size_t soap_flag_InputMatFilename1 = 1;
	size_t soap_flag_InputMatFilename2 = 1;
	size_t soap_flag_maskFilename_D = 1;
	size_t soap_flag_dtype_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__add *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__add, sizeof(struct ns__add), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__add(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename1", &a->InputMatFilename1, "xsd:string"))
				{	soap_flag_InputMatFilename1--;
					continue;
				}
			if (soap_flag_InputMatFilename2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename2", &a->InputMatFilename2, "xsd:string"))
				{	soap_flag_InputMatFilename2--;
					continue;
				}
			if (soap_flag_maskFilename_D && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "maskFilename-D", &a->maskFilename_D, "xsd:string"))
				{	soap_flag_maskFilename_D--;
					continue;
				}
			if (soap_flag_dtype_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dtype-D", &a->dtype_D, "xsd:int"))
				{	soap_flag_dtype_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__add *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__add, 0, sizeof(struct ns__add), 0, soap_copy_ns__add);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename1 > 0 || soap_flag_InputMatFilename2 > 0 || soap_flag_maskFilename_D > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__add(struct soap *soap, const struct ns__add *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__add);
	if (soap_out_ns__add(soap, tag?tag:"ns:add", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__add * SOAP_FMAC4 soap_get_ns__add(struct soap *soap, struct ns__add *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__add(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__add * SOAP_FMAC2 soap_instantiate_ns__add(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__add(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__add, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__add);
		if (size)
			*size = sizeof(struct ns__add);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__add[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__add);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__add*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__add(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__add %p -> %p\n", q, p));
	*(struct ns__add*)p = *(struct ns__add*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addResponse(struct soap *soap, struct ns__addResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addResponse(struct soap *soap, const struct ns__addResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addResponse(struct soap *soap, const char *tag, int id, const struct ns__addResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addResponse * SOAP_FMAC4 soap_in_ns__addResponse(struct soap *soap, const char *tag, struct ns__addResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addResponse, sizeof(struct ns__addResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__addResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addResponse, 0, sizeof(struct ns__addResponse), 0, soap_copy_ns__addResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addResponse(struct soap *soap, const struct ns__addResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__addResponse);
	if (soap_out_ns__addResponse(soap, tag?tag:"ns:addResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addResponse * SOAP_FMAC4 soap_get_ns__addResponse(struct soap *soap, struct ns__addResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addResponse * SOAP_FMAC2 soap_instantiate_ns__addResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addResponse);
		if (size)
			*size = sizeof(struct ns__addResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__addResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__addResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addResponse %p -> %p\n", q, p));
	*(struct ns__addResponse*)p = *(struct ns__addResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addWeighted(struct soap *soap, struct ns__addWeighted *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->InputMatFilename1);
	soap_default_double(soap, &a->alpha);
	soap_default_std__string(soap, &a->InputMatFilename2);
	soap_default_double(soap, &a->beta);
	soap_default_double(soap, &a->gamma);
	a->dtype_D = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addWeighted(struct soap *soap, const struct ns__addWeighted *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->InputMatFilename1);
	soap_serialize_std__string(soap, &a->InputMatFilename2);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addWeighted(struct soap *soap, const char *tag, int id, const struct ns__addWeighted *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addWeighted), type))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename1", -1, &a->InputMatFilename1, ""))
		return soap->error;
	if (soap_out_double(soap, "alpha", -1, &a->alpha, ""))
		return soap->error;
	if (soap_out_std__string(soap, "InputMatFilename2", -1, &a->InputMatFilename2, ""))
		return soap->error;
	if (soap_out_double(soap, "beta", -1, &a->beta, ""))
		return soap->error;
	if (soap_out_double(soap, "gamma", -1, &a->gamma, ""))
		return soap->error;
	if (soap_out_int(soap, "dtype-D", -1, &a->dtype_D, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addWeighted * SOAP_FMAC4 soap_in_ns__addWeighted(struct soap *soap, const char *tag, struct ns__addWeighted *a, const char *type)
{
	size_t soap_flag_InputMatFilename1 = 1;
	size_t soap_flag_alpha = 1;
	size_t soap_flag_InputMatFilename2 = 1;
	size_t soap_flag_beta = 1;
	size_t soap_flag_gamma = 1;
	size_t soap_flag_dtype_D = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addWeighted *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addWeighted, sizeof(struct ns__addWeighted), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__addWeighted(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename1", &a->InputMatFilename1, "xsd:string"))
				{	soap_flag_InputMatFilename1--;
					continue;
				}
			if (soap_flag_alpha && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "alpha", &a->alpha, "xsd:double"))
				{	soap_flag_alpha--;
					continue;
				}
			if (soap_flag_InputMatFilename2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "InputMatFilename2", &a->InputMatFilename2, "xsd:string"))
				{	soap_flag_InputMatFilename2--;
					continue;
				}
			if (soap_flag_beta && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "beta", &a->beta, "xsd:double"))
				{	soap_flag_beta--;
					continue;
				}
			if (soap_flag_gamma && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "gamma", &a->gamma, "xsd:double"))
				{	soap_flag_gamma--;
					continue;
				}
			if (soap_flag_dtype_D && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dtype-D", &a->dtype_D, "xsd:int"))
				{	soap_flag_dtype_D--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addWeighted *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addWeighted, 0, sizeof(struct ns__addWeighted), 0, soap_copy_ns__addWeighted);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_InputMatFilename1 > 0 || soap_flag_alpha > 0 || soap_flag_InputMatFilename2 > 0 || soap_flag_beta > 0 || soap_flag_gamma > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addWeighted(struct soap *soap, const struct ns__addWeighted *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__addWeighted);
	if (soap_out_ns__addWeighted(soap, tag?tag:"ns:addWeighted", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addWeighted * SOAP_FMAC4 soap_get_ns__addWeighted(struct soap *soap, struct ns__addWeighted *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addWeighted(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addWeighted * SOAP_FMAC2 soap_instantiate_ns__addWeighted(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addWeighted(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addWeighted, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addWeighted);
		if (size)
			*size = sizeof(struct ns__addWeighted);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addWeighted[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__addWeighted);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__addWeighted*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addWeighted(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addWeighted %p -> %p\n", q, p));
	*(struct ns__addWeighted*)p = *(struct ns__addWeighted*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addWeightedResponse(struct soap *soap, struct ns__addWeightedResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addWeightedResponse(struct soap *soap, const struct ns__addWeightedResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addWeightedResponse(struct soap *soap, const char *tag, int id, const struct ns__addWeightedResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addWeightedResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addWeightedResponse * SOAP_FMAC4 soap_in_ns__addWeightedResponse(struct soap *soap, const char *tag, struct ns__addWeightedResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addWeightedResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addWeightedResponse, sizeof(struct ns__addWeightedResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__addWeightedResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addWeightedResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addWeightedResponse, 0, sizeof(struct ns__addWeightedResponse), 0, soap_copy_ns__addWeightedResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addWeightedResponse(struct soap *soap, const struct ns__addWeightedResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__addWeightedResponse);
	if (soap_out_ns__addWeightedResponse(soap, tag?tag:"ns:addWeightedResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addWeightedResponse * SOAP_FMAC4 soap_get_ns__addWeightedResponse(struct soap *soap, struct ns__addWeightedResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addWeightedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addWeightedResponse * SOAP_FMAC2 soap_instantiate_ns__addWeightedResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addWeightedResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addWeightedResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addWeightedResponse);
		if (size)
			*size = sizeof(struct ns__addWeightedResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addWeightedResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__addWeightedResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__addWeightedResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addWeightedResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addWeightedResponse %p -> %p\n", q, p));
	*(struct ns__addWeightedResponse*)p = *(struct ns__addWeightedResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Not(struct soap *soap, struct ns__Not *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->src);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Not(struct soap *soap, const struct ns__Not *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->src);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Not(struct soap *soap, const char *tag, int id, const struct ns__Not *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Not), type))
		return soap->error;
	if (soap_out_std__string(soap, "src", -1, &a->src, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Not * SOAP_FMAC4 soap_in_ns__Not(struct soap *soap, const char *tag, struct ns__Not *a, const char *type)
{
	size_t soap_flag_src = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Not *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Not, sizeof(struct ns__Not), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Not(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "src", &a->src, "xsd:string"))
				{	soap_flag_src--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Not *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Not, 0, sizeof(struct ns__Not), 0, soap_copy_ns__Not);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_src > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Not(struct soap *soap, const struct ns__Not *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Not);
	if (soap_out_ns__Not(soap, tag?tag:"ns:Not", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Not * SOAP_FMAC4 soap_get_ns__Not(struct soap *soap, struct ns__Not *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Not(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Not * SOAP_FMAC2 soap_instantiate_ns__Not(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Not(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Not, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Not);
		if (size)
			*size = sizeof(struct ns__Not);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Not[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__Not);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__Not*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Not(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Not %p -> %p\n", q, p));
	*(struct ns__Not*)p = *(struct ns__Not*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NotResponse(struct soap *soap, struct ns__NotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NotResponse(struct soap *soap, const struct ns__NotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NotResponse(struct soap *soap, const char *tag, int id, const struct ns__NotResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__NotResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__NotResponse * SOAP_FMAC4 soap_in_ns__NotResponse(struct soap *soap, const char *tag, struct ns__NotResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__NotResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__NotResponse, sizeof(struct ns__NotResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__NotResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__NotResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__NotResponse, 0, sizeof(struct ns__NotResponse), 0, soap_copy_ns__NotResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NotResponse(struct soap *soap, const struct ns__NotResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__NotResponse);
	if (soap_out_ns__NotResponse(soap, tag?tag:"ns:NotResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__NotResponse * SOAP_FMAC4 soap_get_ns__NotResponse(struct soap *soap, struct ns__NotResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__NotResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__NotResponse * SOAP_FMAC2 soap_instantiate_ns__NotResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__NotResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__NotResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__NotResponse);
		if (size)
			*size = sizeof(struct ns__NotResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__NotResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__NotResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__NotResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__NotResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__NotResponse %p -> %p\n", q, p));
	*(struct ns__NotResponse*)p = *(struct ns__NotResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Xor(struct soap *soap, struct ns__Xor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->src1);
	soap_default_std__string(soap, &a->src2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Xor(struct soap *soap, const struct ns__Xor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->src1);
	soap_serialize_std__string(soap, &a->src2);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Xor(struct soap *soap, const char *tag, int id, const struct ns__Xor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Xor), type))
		return soap->error;
	if (soap_out_std__string(soap, "src1", -1, &a->src1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "src2", -1, &a->src2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Xor * SOAP_FMAC4 soap_in_ns__Xor(struct soap *soap, const char *tag, struct ns__Xor *a, const char *type)
{
	size_t soap_flag_src1 = 1;
	size_t soap_flag_src2 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Xor *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Xor, sizeof(struct ns__Xor), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Xor(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "src1", &a->src1, "xsd:string"))
				{	soap_flag_src1--;
					continue;
				}
			if (soap_flag_src2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "src2", &a->src2, "xsd:string"))
				{	soap_flag_src2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Xor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Xor, 0, sizeof(struct ns__Xor), 0, soap_copy_ns__Xor);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_src1 > 0 || soap_flag_src2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Xor(struct soap *soap, const struct ns__Xor *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Xor);
	if (soap_out_ns__Xor(soap, tag?tag:"ns:Xor", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Xor * SOAP_FMAC4 soap_get_ns__Xor(struct soap *soap, struct ns__Xor *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Xor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Xor * SOAP_FMAC2 soap_instantiate_ns__Xor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Xor(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Xor, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Xor);
		if (size)
			*size = sizeof(struct ns__Xor);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Xor[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__Xor);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__Xor*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Xor(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Xor %p -> %p\n", q, p));
	*(struct ns__Xor*)p = *(struct ns__Xor*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__XorResponse(struct soap *soap, struct ns__XorResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__XorResponse(struct soap *soap, const struct ns__XorResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__XorResponse(struct soap *soap, const char *tag, int id, const struct ns__XorResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__XorResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__XorResponse * SOAP_FMAC4 soap_in_ns__XorResponse(struct soap *soap, const char *tag, struct ns__XorResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__XorResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__XorResponse, sizeof(struct ns__XorResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__XorResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__XorResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__XorResponse, 0, sizeof(struct ns__XorResponse), 0, soap_copy_ns__XorResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__XorResponse(struct soap *soap, const struct ns__XorResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__XorResponse);
	if (soap_out_ns__XorResponse(soap, tag?tag:"ns:XorResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__XorResponse * SOAP_FMAC4 soap_get_ns__XorResponse(struct soap *soap, struct ns__XorResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__XorResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__XorResponse * SOAP_FMAC2 soap_instantiate_ns__XorResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__XorResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__XorResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__XorResponse);
		if (size)
			*size = sizeof(struct ns__XorResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__XorResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__XorResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__XorResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__XorResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__XorResponse %p -> %p\n", q, p));
	*(struct ns__XorResponse*)p = *(struct ns__XorResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__And(struct soap *soap, struct ns__And *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->src1);
	soap_default_std__string(soap, &a->src2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__And(struct soap *soap, const struct ns__And *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->src1);
	soap_serialize_std__string(soap, &a->src2);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__And(struct soap *soap, const char *tag, int id, const struct ns__And *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__And), type))
		return soap->error;
	if (soap_out_std__string(soap, "src1", -1, &a->src1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "src2", -1, &a->src2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__And * SOAP_FMAC4 soap_in_ns__And(struct soap *soap, const char *tag, struct ns__And *a, const char *type)
{
	size_t soap_flag_src1 = 1;
	size_t soap_flag_src2 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__And *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__And, sizeof(struct ns__And), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__And(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "src1", &a->src1, "xsd:string"))
				{	soap_flag_src1--;
					continue;
				}
			if (soap_flag_src2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "src2", &a->src2, "xsd:string"))
				{	soap_flag_src2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__And *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__And, 0, sizeof(struct ns__And), 0, soap_copy_ns__And);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_src1 > 0 || soap_flag_src2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__And(struct soap *soap, const struct ns__And *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__And);
	if (soap_out_ns__And(soap, tag?tag:"ns:And", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__And * SOAP_FMAC4 soap_get_ns__And(struct soap *soap, struct ns__And *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__And(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__And * SOAP_FMAC2 soap_instantiate_ns__And(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__And(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__And, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__And);
		if (size)
			*size = sizeof(struct ns__And);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__And[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__And);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__And*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__And(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__And %p -> %p\n", q, p));
	*(struct ns__And*)p = *(struct ns__And*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AndResponse(struct soap *soap, struct ns__AndResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AndResponse(struct soap *soap, const struct ns__AndResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AndResponse(struct soap *soap, const char *tag, int id, const struct ns__AndResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AndResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AndResponse * SOAP_FMAC4 soap_in_ns__AndResponse(struct soap *soap, const char *tag, struct ns__AndResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AndResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AndResponse, sizeof(struct ns__AndResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__AndResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__AndResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AndResponse, 0, sizeof(struct ns__AndResponse), 0, soap_copy_ns__AndResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AndResponse(struct soap *soap, const struct ns__AndResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AndResponse);
	if (soap_out_ns__AndResponse(soap, tag?tag:"ns:AndResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AndResponse * SOAP_FMAC4 soap_get_ns__AndResponse(struct soap *soap, struct ns__AndResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AndResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__AndResponse * SOAP_FMAC2 soap_instantiate_ns__AndResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AndResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__AndResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AndResponse);
		if (size)
			*size = sizeof(struct ns__AndResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AndResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__AndResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__AndResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__AndResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__AndResponse %p -> %p\n", q, p));
	*(struct ns__AndResponse*)p = *(struct ns__AndResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Or(struct soap *soap, struct ns__Or *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->src1);
	soap_default_std__string(soap, &a->src2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Or(struct soap *soap, const struct ns__Or *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->src1);
	soap_serialize_std__string(soap, &a->src2);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Or(struct soap *soap, const char *tag, int id, const struct ns__Or *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Or), type))
		return soap->error;
	if (soap_out_std__string(soap, "src1", -1, &a->src1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "src2", -1, &a->src2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Or * SOAP_FMAC4 soap_in_ns__Or(struct soap *soap, const char *tag, struct ns__Or *a, const char *type)
{
	size_t soap_flag_src1 = 1;
	size_t soap_flag_src2 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Or *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Or, sizeof(struct ns__Or), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__Or(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "src1", &a->src1, "xsd:string"))
				{	soap_flag_src1--;
					continue;
				}
			if (soap_flag_src2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "src2", &a->src2, "xsd:string"))
				{	soap_flag_src2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Or *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Or, 0, sizeof(struct ns__Or), 0, soap_copy_ns__Or);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_src1 > 0 || soap_flag_src2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Or(struct soap *soap, const struct ns__Or *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Or);
	if (soap_out_ns__Or(soap, tag?tag:"ns:Or", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Or * SOAP_FMAC4 soap_get_ns__Or(struct soap *soap, struct ns__Or *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Or(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Or * SOAP_FMAC2 soap_instantiate_ns__Or(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Or(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Or, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Or);
		if (size)
			*size = sizeof(struct ns__Or);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Or[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__Or);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__Or*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Or(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Or %p -> %p\n", q, p));
	*(struct ns__Or*)p = *(struct ns__Or*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__OrResponse(struct soap *soap, struct ns__OrResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__OrResponse(struct soap *soap, const struct ns__OrResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__OrResponse(struct soap *soap, const char *tag, int id, const struct ns__OrResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__OrResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__OrResponse * SOAP_FMAC4 soap_in_ns__OrResponse(struct soap *soap, const char *tag, struct ns__OrResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__OrResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__OrResponse, sizeof(struct ns__OrResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__OrResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__OrResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__OrResponse, 0, sizeof(struct ns__OrResponse), 0, soap_copy_ns__OrResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OutputMatFilename > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__OrResponse(struct soap *soap, const struct ns__OrResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__OrResponse);
	if (soap_out_ns__OrResponse(soap, tag?tag:"ns:OrResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__OrResponse * SOAP_FMAC4 soap_get_ns__OrResponse(struct soap *soap, struct ns__OrResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__OrResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__OrResponse * SOAP_FMAC2 soap_instantiate_ns__OrResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__OrResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__OrResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__OrResponse);
		if (size)
			*size = sizeof(struct ns__OrResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__OrResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__OrResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__OrResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__OrResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__OrResponse %p -> %p\n", q, p));
	*(struct ns__OrResponse*)p = *(struct ns__OrResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
