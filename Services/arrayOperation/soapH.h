/* soapH.h
   Generated by gSOAP 2.8.14 from ArrayOperation.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin(soap), soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin(soap), soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_begin(soap), soap_serialize_double(soap, data), soap_begin_send(soap) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_begin(soap), soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__sqrt
#define SOAP_TYPE_ns__sqrt (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sqrt(struct soap*, struct ns__sqrt *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sqrt(struct soap*, const struct ns__sqrt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sqrt(struct soap*, const char*, int, const struct ns__sqrt *, const char*);
SOAP_FMAC3 struct ns__sqrt * SOAP_FMAC4 soap_in_ns__sqrt(struct soap*, const char*, struct ns__sqrt *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sqrt(struct soap*, const struct ns__sqrt *, const char*, const char*);

#ifndef soap_write_ns__sqrt
#define soap_write_ns__sqrt(soap, data) ( soap_begin(soap), soap_serialize_ns__sqrt(soap, data), soap_begin_send(soap) || soap_put_ns__sqrt(soap, data, "ns:sqrt", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__sqrt * SOAP_FMAC4 soap_get_ns__sqrt(struct soap*, struct ns__sqrt *, const char*, const char*);

#ifndef soap_read_ns__sqrt
#define soap_read_ns__sqrt(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__sqrt(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__sqrt * SOAP_FMAC2 soap_instantiate_ns__sqrt(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__sqrt * soap_new_ns__sqrt(struct soap *soap, int n = -1) { return soap_instantiate_ns__sqrt(soap, n, NULL, NULL, NULL); }

inline struct ns__sqrt * soap_new_req_ns__sqrt(struct soap *soap, std::string& InputMatFilename) { struct ns__sqrt *_p = soap_instantiate_ns__sqrt(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__sqrt(soap, _p); _p->InputMatFilename = InputMatFilename; } return _p; }

inline struct ns__sqrt * soap_new_set_ns__sqrt(struct soap *soap, std::string& InputMatFilename) { struct ns__sqrt *_p = soap_instantiate_ns__sqrt(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__sqrt(soap, _p); _p->InputMatFilename = InputMatFilename; } return _p; }

inline void soap_delete_ns__sqrt(struct soap *soap, struct ns__sqrt *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sqrt(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__sqrtResponse
#define SOAP_TYPE_ns__sqrtResponse (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sqrtResponse(struct soap*, struct ns__sqrtResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sqrtResponse(struct soap*, const struct ns__sqrtResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sqrtResponse(struct soap*, const char*, int, const struct ns__sqrtResponse *, const char*);
SOAP_FMAC3 struct ns__sqrtResponse * SOAP_FMAC4 soap_in_ns__sqrtResponse(struct soap*, const char*, struct ns__sqrtResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sqrtResponse(struct soap*, const struct ns__sqrtResponse *, const char*, const char*);

#ifndef soap_write_ns__sqrtResponse
#define soap_write_ns__sqrtResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__sqrtResponse(soap, data), soap_begin_send(soap) || soap_put_ns__sqrtResponse(soap, data, "ns:sqrtResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__sqrtResponse * SOAP_FMAC4 soap_get_ns__sqrtResponse(struct soap*, struct ns__sqrtResponse *, const char*, const char*);

#ifndef soap_read_ns__sqrtResponse
#define soap_read_ns__sqrtResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__sqrtResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__sqrtResponse * SOAP_FMAC2 soap_instantiate_ns__sqrtResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__sqrtResponse * soap_new_ns__sqrtResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__sqrtResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__sqrtResponse * soap_new_req_ns__sqrtResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__sqrtResponse *_p = soap_instantiate_ns__sqrtResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__sqrtResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__sqrtResponse * soap_new_set_ns__sqrtResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__sqrtResponse *_p = soap_instantiate_ns__sqrtResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__sqrtResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__sqrtResponse(struct soap *soap, struct ns__sqrtResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sqrtResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__absdiff
#define SOAP_TYPE_ns__absdiff (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__absdiff(struct soap*, struct ns__absdiff *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__absdiff(struct soap*, const struct ns__absdiff *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__absdiff(struct soap*, const char*, int, const struct ns__absdiff *, const char*);
SOAP_FMAC3 struct ns__absdiff * SOAP_FMAC4 soap_in_ns__absdiff(struct soap*, const char*, struct ns__absdiff *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__absdiff(struct soap*, const struct ns__absdiff *, const char*, const char*);

#ifndef soap_write_ns__absdiff
#define soap_write_ns__absdiff(soap, data) ( soap_begin(soap), soap_serialize_ns__absdiff(soap, data), soap_begin_send(soap) || soap_put_ns__absdiff(soap, data, "ns:absdiff", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__absdiff * SOAP_FMAC4 soap_get_ns__absdiff(struct soap*, struct ns__absdiff *, const char*, const char*);

#ifndef soap_read_ns__absdiff
#define soap_read_ns__absdiff(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__absdiff(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__absdiff * SOAP_FMAC2 soap_instantiate_ns__absdiff(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__absdiff * soap_new_ns__absdiff(struct soap *soap, int n = -1) { return soap_instantiate_ns__absdiff(soap, n, NULL, NULL, NULL); }

inline struct ns__absdiff * soap_new_req_ns__absdiff(struct soap *soap, std::string& InputMatFilename1, std::string& InputMatFilename2) { struct ns__absdiff *_p = soap_instantiate_ns__absdiff(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__absdiff(soap, _p); _p->InputMatFilename1 = InputMatFilename1; _p->InputMatFilename2 = InputMatFilename2; } return _p; }

inline struct ns__absdiff * soap_new_set_ns__absdiff(struct soap *soap, std::string& InputMatFilename1, std::string& InputMatFilename2) { struct ns__absdiff *_p = soap_instantiate_ns__absdiff(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__absdiff(soap, _p); _p->InputMatFilename1 = InputMatFilename1; _p->InputMatFilename2 = InputMatFilename2; } return _p; }

inline void soap_delete_ns__absdiff(struct soap *soap, struct ns__absdiff *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__absdiff(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__absdiffResponse
#define SOAP_TYPE_ns__absdiffResponse (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__absdiffResponse(struct soap*, struct ns__absdiffResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__absdiffResponse(struct soap*, const struct ns__absdiffResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__absdiffResponse(struct soap*, const char*, int, const struct ns__absdiffResponse *, const char*);
SOAP_FMAC3 struct ns__absdiffResponse * SOAP_FMAC4 soap_in_ns__absdiffResponse(struct soap*, const char*, struct ns__absdiffResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__absdiffResponse(struct soap*, const struct ns__absdiffResponse *, const char*, const char*);

#ifndef soap_write_ns__absdiffResponse
#define soap_write_ns__absdiffResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__absdiffResponse(soap, data), soap_begin_send(soap) || soap_put_ns__absdiffResponse(soap, data, "ns:absdiffResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__absdiffResponse * SOAP_FMAC4 soap_get_ns__absdiffResponse(struct soap*, struct ns__absdiffResponse *, const char*, const char*);

#ifndef soap_read_ns__absdiffResponse
#define soap_read_ns__absdiffResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__absdiffResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__absdiffResponse * SOAP_FMAC2 soap_instantiate_ns__absdiffResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__absdiffResponse * soap_new_ns__absdiffResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__absdiffResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__absdiffResponse * soap_new_req_ns__absdiffResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__absdiffResponse *_p = soap_instantiate_ns__absdiffResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__absdiffResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__absdiffResponse * soap_new_set_ns__absdiffResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__absdiffResponse *_p = soap_instantiate_ns__absdiffResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__absdiffResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__absdiffResponse(struct soap *soap, struct ns__absdiffResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__absdiffResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__abs
#define SOAP_TYPE_ns__abs (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__abs(struct soap*, struct ns__abs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__abs(struct soap*, const struct ns__abs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__abs(struct soap*, const char*, int, const struct ns__abs *, const char*);
SOAP_FMAC3 struct ns__abs * SOAP_FMAC4 soap_in_ns__abs(struct soap*, const char*, struct ns__abs *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__abs(struct soap*, const struct ns__abs *, const char*, const char*);

#ifndef soap_write_ns__abs
#define soap_write_ns__abs(soap, data) ( soap_begin(soap), soap_serialize_ns__abs(soap, data), soap_begin_send(soap) || soap_put_ns__abs(soap, data, "ns:abs", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__abs * SOAP_FMAC4 soap_get_ns__abs(struct soap*, struct ns__abs *, const char*, const char*);

#ifndef soap_read_ns__abs
#define soap_read_ns__abs(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__abs(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__abs * SOAP_FMAC2 soap_instantiate_ns__abs(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__abs * soap_new_ns__abs(struct soap *soap, int n = -1) { return soap_instantiate_ns__abs(soap, n, NULL, NULL, NULL); }

inline struct ns__abs * soap_new_req_ns__abs(struct soap *soap, std::string& InputMatFilename) { struct ns__abs *_p = soap_instantiate_ns__abs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__abs(soap, _p); _p->InputMatFilename = InputMatFilename; } return _p; }

inline struct ns__abs * soap_new_set_ns__abs(struct soap *soap, std::string& InputMatFilename) { struct ns__abs *_p = soap_instantiate_ns__abs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__abs(soap, _p); _p->InputMatFilename = InputMatFilename; } return _p; }

inline void soap_delete_ns__abs(struct soap *soap, struct ns__abs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__abs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__absResponse
#define SOAP_TYPE_ns__absResponse (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__absResponse(struct soap*, struct ns__absResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__absResponse(struct soap*, const struct ns__absResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__absResponse(struct soap*, const char*, int, const struct ns__absResponse *, const char*);
SOAP_FMAC3 struct ns__absResponse * SOAP_FMAC4 soap_in_ns__absResponse(struct soap*, const char*, struct ns__absResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__absResponse(struct soap*, const struct ns__absResponse *, const char*, const char*);

#ifndef soap_write_ns__absResponse
#define soap_write_ns__absResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__absResponse(soap, data), soap_begin_send(soap) || soap_put_ns__absResponse(soap, data, "ns:absResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__absResponse * SOAP_FMAC4 soap_get_ns__absResponse(struct soap*, struct ns__absResponse *, const char*, const char*);

#ifndef soap_read_ns__absResponse
#define soap_read_ns__absResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__absResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__absResponse * SOAP_FMAC2 soap_instantiate_ns__absResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__absResponse * soap_new_ns__absResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__absResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__absResponse * soap_new_req_ns__absResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__absResponse *_p = soap_instantiate_ns__absResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__absResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__absResponse * soap_new_set_ns__absResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__absResponse *_p = soap_instantiate_ns__absResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__absResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__absResponse(struct soap *soap, struct ns__absResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__absResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__subtract
#define SOAP_TYPE_ns__subtract (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__subtract(struct soap*, struct ns__subtract *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__subtract(struct soap*, const struct ns__subtract *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__subtract(struct soap*, const char*, int, const struct ns__subtract *, const char*);
SOAP_FMAC3 struct ns__subtract * SOAP_FMAC4 soap_in_ns__subtract(struct soap*, const char*, struct ns__subtract *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__subtract(struct soap*, const struct ns__subtract *, const char*, const char*);

#ifndef soap_write_ns__subtract
#define soap_write_ns__subtract(soap, data) ( soap_begin(soap), soap_serialize_ns__subtract(soap, data), soap_begin_send(soap) || soap_put_ns__subtract(soap, data, "ns:subtract", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__subtract * SOAP_FMAC4 soap_get_ns__subtract(struct soap*, struct ns__subtract *, const char*, const char*);

#ifndef soap_read_ns__subtract
#define soap_read_ns__subtract(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__subtract(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__subtract * SOAP_FMAC2 soap_instantiate_ns__subtract(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__subtract * soap_new_ns__subtract(struct soap *soap, int n = -1) { return soap_instantiate_ns__subtract(soap, n, NULL, NULL, NULL); }

inline struct ns__subtract * soap_new_req_ns__subtract(struct soap *soap, std::string& InputMatFilename1, std::string& InputMatFilename2, std::string& maskFilename_D, int dtype_D) { struct ns__subtract *_p = soap_instantiate_ns__subtract(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__subtract(soap, _p); _p->InputMatFilename1 = InputMatFilename1; _p->InputMatFilename2 = InputMatFilename2; _p->maskFilename_D = maskFilename_D; _p->dtype_D = dtype_D; } return _p; }

inline struct ns__subtract * soap_new_set_ns__subtract(struct soap *soap, std::string& InputMatFilename1, std::string& InputMatFilename2, std::string& maskFilename_D, int dtype_D) { struct ns__subtract *_p = soap_instantiate_ns__subtract(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__subtract(soap, _p); _p->InputMatFilename1 = InputMatFilename1; _p->InputMatFilename2 = InputMatFilename2; _p->maskFilename_D = maskFilename_D; _p->dtype_D = dtype_D; } return _p; }

inline void soap_delete_ns__subtract(struct soap *soap, struct ns__subtract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__subtract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__subtractResponse
#define SOAP_TYPE_ns__subtractResponse (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__subtractResponse(struct soap*, struct ns__subtractResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__subtractResponse(struct soap*, const struct ns__subtractResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__subtractResponse(struct soap*, const char*, int, const struct ns__subtractResponse *, const char*);
SOAP_FMAC3 struct ns__subtractResponse * SOAP_FMAC4 soap_in_ns__subtractResponse(struct soap*, const char*, struct ns__subtractResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__subtractResponse(struct soap*, const struct ns__subtractResponse *, const char*, const char*);

#ifndef soap_write_ns__subtractResponse
#define soap_write_ns__subtractResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__subtractResponse(soap, data), soap_begin_send(soap) || soap_put_ns__subtractResponse(soap, data, "ns:subtractResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__subtractResponse * SOAP_FMAC4 soap_get_ns__subtractResponse(struct soap*, struct ns__subtractResponse *, const char*, const char*);

#ifndef soap_read_ns__subtractResponse
#define soap_read_ns__subtractResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__subtractResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__subtractResponse * SOAP_FMAC2 soap_instantiate_ns__subtractResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__subtractResponse * soap_new_ns__subtractResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__subtractResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__subtractResponse * soap_new_req_ns__subtractResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__subtractResponse *_p = soap_instantiate_ns__subtractResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__subtractResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__subtractResponse * soap_new_set_ns__subtractResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__subtractResponse *_p = soap_instantiate_ns__subtractResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__subtractResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__subtractResponse(struct soap *soap, struct ns__subtractResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__subtractResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__add
#define SOAP_TYPE_ns__add (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__add(struct soap*, struct ns__add *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__add(struct soap*, const struct ns__add *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__add(struct soap*, const char*, int, const struct ns__add *, const char*);
SOAP_FMAC3 struct ns__add * SOAP_FMAC4 soap_in_ns__add(struct soap*, const char*, struct ns__add *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__add(struct soap*, const struct ns__add *, const char*, const char*);

#ifndef soap_write_ns__add
#define soap_write_ns__add(soap, data) ( soap_begin(soap), soap_serialize_ns__add(soap, data), soap_begin_send(soap) || soap_put_ns__add(soap, data, "ns:add", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__add * SOAP_FMAC4 soap_get_ns__add(struct soap*, struct ns__add *, const char*, const char*);

#ifndef soap_read_ns__add
#define soap_read_ns__add(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__add(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__add * SOAP_FMAC2 soap_instantiate_ns__add(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__add * soap_new_ns__add(struct soap *soap, int n = -1) { return soap_instantiate_ns__add(soap, n, NULL, NULL, NULL); }

inline struct ns__add * soap_new_req_ns__add(struct soap *soap, std::string& InputMatFilename1, std::string& InputMatFilename2, std::string& maskFilename_D, int dtype_D) { struct ns__add *_p = soap_instantiate_ns__add(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__add(soap, _p); _p->InputMatFilename1 = InputMatFilename1; _p->InputMatFilename2 = InputMatFilename2; _p->maskFilename_D = maskFilename_D; _p->dtype_D = dtype_D; } return _p; }

inline struct ns__add * soap_new_set_ns__add(struct soap *soap, std::string& InputMatFilename1, std::string& InputMatFilename2, std::string& maskFilename_D, int dtype_D) { struct ns__add *_p = soap_instantiate_ns__add(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__add(soap, _p); _p->InputMatFilename1 = InputMatFilename1; _p->InputMatFilename2 = InputMatFilename2; _p->maskFilename_D = maskFilename_D; _p->dtype_D = dtype_D; } return _p; }

inline void soap_delete_ns__add(struct soap *soap, struct ns__add *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__add(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addResponse
#define SOAP_TYPE_ns__addResponse (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addResponse(struct soap*, struct ns__addResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addResponse(struct soap*, const struct ns__addResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addResponse(struct soap*, const char*, int, const struct ns__addResponse *, const char*);
SOAP_FMAC3 struct ns__addResponse * SOAP_FMAC4 soap_in_ns__addResponse(struct soap*, const char*, struct ns__addResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addResponse(struct soap*, const struct ns__addResponse *, const char*, const char*);

#ifndef soap_write_ns__addResponse
#define soap_write_ns__addResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__addResponse(soap, data), soap_begin_send(soap) || soap_put_ns__addResponse(soap, data, "ns:addResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__addResponse * SOAP_FMAC4 soap_get_ns__addResponse(struct soap*, struct ns__addResponse *, const char*, const char*);

#ifndef soap_read_ns__addResponse
#define soap_read_ns__addResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__addResponse * SOAP_FMAC2 soap_instantiate_ns__addResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addResponse * soap_new_ns__addResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__addResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__addResponse * soap_new_req_ns__addResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__addResponse *_p = soap_instantiate_ns__addResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__addResponse * soap_new_set_ns__addResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__addResponse *_p = soap_instantiate_ns__addResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__addResponse(struct soap *soap, struct ns__addResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addWeighted
#define SOAP_TYPE_ns__addWeighted (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addWeighted(struct soap*, struct ns__addWeighted *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addWeighted(struct soap*, const struct ns__addWeighted *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addWeighted(struct soap*, const char*, int, const struct ns__addWeighted *, const char*);
SOAP_FMAC3 struct ns__addWeighted * SOAP_FMAC4 soap_in_ns__addWeighted(struct soap*, const char*, struct ns__addWeighted *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addWeighted(struct soap*, const struct ns__addWeighted *, const char*, const char*);

#ifndef soap_write_ns__addWeighted
#define soap_write_ns__addWeighted(soap, data) ( soap_begin(soap), soap_serialize_ns__addWeighted(soap, data), soap_begin_send(soap) || soap_put_ns__addWeighted(soap, data, "ns:addWeighted", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__addWeighted * SOAP_FMAC4 soap_get_ns__addWeighted(struct soap*, struct ns__addWeighted *, const char*, const char*);

#ifndef soap_read_ns__addWeighted
#define soap_read_ns__addWeighted(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addWeighted(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__addWeighted * SOAP_FMAC2 soap_instantiate_ns__addWeighted(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addWeighted * soap_new_ns__addWeighted(struct soap *soap, int n = -1) { return soap_instantiate_ns__addWeighted(soap, n, NULL, NULL, NULL); }

inline struct ns__addWeighted * soap_new_req_ns__addWeighted(struct soap *soap, std::string& InputMatFilename1, double alpha, std::string& InputMatFilename2, double beta, double gamma, int dtype_D) { struct ns__addWeighted *_p = soap_instantiate_ns__addWeighted(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addWeighted(soap, _p); _p->InputMatFilename1 = InputMatFilename1; _p->alpha = alpha; _p->InputMatFilename2 = InputMatFilename2; _p->beta = beta; _p->gamma = gamma; _p->dtype_D = dtype_D; } return _p; }

inline struct ns__addWeighted * soap_new_set_ns__addWeighted(struct soap *soap, std::string& InputMatFilename1, double alpha, std::string& InputMatFilename2, double beta, double gamma, int dtype_D) { struct ns__addWeighted *_p = soap_instantiate_ns__addWeighted(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addWeighted(soap, _p); _p->InputMatFilename1 = InputMatFilename1; _p->alpha = alpha; _p->InputMatFilename2 = InputMatFilename2; _p->beta = beta; _p->gamma = gamma; _p->dtype_D = dtype_D; } return _p; }

inline void soap_delete_ns__addWeighted(struct soap *soap, struct ns__addWeighted *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addWeighted(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addWeightedResponse
#define SOAP_TYPE_ns__addWeightedResponse (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addWeightedResponse(struct soap*, struct ns__addWeightedResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addWeightedResponse(struct soap*, const struct ns__addWeightedResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addWeightedResponse(struct soap*, const char*, int, const struct ns__addWeightedResponse *, const char*);
SOAP_FMAC3 struct ns__addWeightedResponse * SOAP_FMAC4 soap_in_ns__addWeightedResponse(struct soap*, const char*, struct ns__addWeightedResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addWeightedResponse(struct soap*, const struct ns__addWeightedResponse *, const char*, const char*);

#ifndef soap_write_ns__addWeightedResponse
#define soap_write_ns__addWeightedResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__addWeightedResponse(soap, data), soap_begin_send(soap) || soap_put_ns__addWeightedResponse(soap, data, "ns:addWeightedResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__addWeightedResponse * SOAP_FMAC4 soap_get_ns__addWeightedResponse(struct soap*, struct ns__addWeightedResponse *, const char*, const char*);

#ifndef soap_read_ns__addWeightedResponse
#define soap_read_ns__addWeightedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addWeightedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__addWeightedResponse * SOAP_FMAC2 soap_instantiate_ns__addWeightedResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addWeightedResponse * soap_new_ns__addWeightedResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__addWeightedResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__addWeightedResponse * soap_new_req_ns__addWeightedResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__addWeightedResponse *_p = soap_instantiate_ns__addWeightedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addWeightedResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__addWeightedResponse * soap_new_set_ns__addWeightedResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__addWeightedResponse *_p = soap_instantiate_ns__addWeightedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addWeightedResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__addWeightedResponse(struct soap *soap, struct ns__addWeightedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addWeightedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__Not
#define SOAP_TYPE_ns__Not (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Not(struct soap*, struct ns__Not *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Not(struct soap*, const struct ns__Not *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Not(struct soap*, const char*, int, const struct ns__Not *, const char*);
SOAP_FMAC3 struct ns__Not * SOAP_FMAC4 soap_in_ns__Not(struct soap*, const char*, struct ns__Not *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Not(struct soap*, const struct ns__Not *, const char*, const char*);

#ifndef soap_write_ns__Not
#define soap_write_ns__Not(soap, data) ( soap_begin(soap), soap_serialize_ns__Not(soap, data), soap_begin_send(soap) || soap_put_ns__Not(soap, data, "ns:Not", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__Not * SOAP_FMAC4 soap_get_ns__Not(struct soap*, struct ns__Not *, const char*, const char*);

#ifndef soap_read_ns__Not
#define soap_read_ns__Not(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__Not(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__Not * SOAP_FMAC2 soap_instantiate_ns__Not(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Not * soap_new_ns__Not(struct soap *soap, int n = -1) { return soap_instantiate_ns__Not(soap, n, NULL, NULL, NULL); }

inline struct ns__Not * soap_new_req_ns__Not(struct soap *soap, std::string& src) { struct ns__Not *_p = soap_instantiate_ns__Not(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Not(soap, _p); _p->src = src; } return _p; }

inline struct ns__Not * soap_new_set_ns__Not(struct soap *soap, std::string& src) { struct ns__Not *_p = soap_instantiate_ns__Not(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Not(soap, _p); _p->src = src; } return _p; }

inline void soap_delete_ns__Not(struct soap *soap, struct ns__Not *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Not(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__NotResponse
#define SOAP_TYPE_ns__NotResponse (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NotResponse(struct soap*, struct ns__NotResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NotResponse(struct soap*, const struct ns__NotResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NotResponse(struct soap*, const char*, int, const struct ns__NotResponse *, const char*);
SOAP_FMAC3 struct ns__NotResponse * SOAP_FMAC4 soap_in_ns__NotResponse(struct soap*, const char*, struct ns__NotResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NotResponse(struct soap*, const struct ns__NotResponse *, const char*, const char*);

#ifndef soap_write_ns__NotResponse
#define soap_write_ns__NotResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__NotResponse(soap, data), soap_begin_send(soap) || soap_put_ns__NotResponse(soap, data, "ns:NotResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__NotResponse * SOAP_FMAC4 soap_get_ns__NotResponse(struct soap*, struct ns__NotResponse *, const char*, const char*);

#ifndef soap_read_ns__NotResponse
#define soap_read_ns__NotResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__NotResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__NotResponse * SOAP_FMAC2 soap_instantiate_ns__NotResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__NotResponse * soap_new_ns__NotResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__NotResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__NotResponse * soap_new_req_ns__NotResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__NotResponse *_p = soap_instantiate_ns__NotResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__NotResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__NotResponse * soap_new_set_ns__NotResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__NotResponse *_p = soap_instantiate_ns__NotResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__NotResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__NotResponse(struct soap *soap, struct ns__NotResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__NotResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__Xor
#define SOAP_TYPE_ns__Xor (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Xor(struct soap*, struct ns__Xor *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Xor(struct soap*, const struct ns__Xor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Xor(struct soap*, const char*, int, const struct ns__Xor *, const char*);
SOAP_FMAC3 struct ns__Xor * SOAP_FMAC4 soap_in_ns__Xor(struct soap*, const char*, struct ns__Xor *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Xor(struct soap*, const struct ns__Xor *, const char*, const char*);

#ifndef soap_write_ns__Xor
#define soap_write_ns__Xor(soap, data) ( soap_begin(soap), soap_serialize_ns__Xor(soap, data), soap_begin_send(soap) || soap_put_ns__Xor(soap, data, "ns:Xor", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__Xor * SOAP_FMAC4 soap_get_ns__Xor(struct soap*, struct ns__Xor *, const char*, const char*);

#ifndef soap_read_ns__Xor
#define soap_read_ns__Xor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__Xor(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__Xor * SOAP_FMAC2 soap_instantiate_ns__Xor(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Xor * soap_new_ns__Xor(struct soap *soap, int n = -1) { return soap_instantiate_ns__Xor(soap, n, NULL, NULL, NULL); }

inline struct ns__Xor * soap_new_req_ns__Xor(struct soap *soap, std::string& src1, std::string& src2) { struct ns__Xor *_p = soap_instantiate_ns__Xor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Xor(soap, _p); _p->src1 = src1; _p->src2 = src2; } return _p; }

inline struct ns__Xor * soap_new_set_ns__Xor(struct soap *soap, std::string& src1, std::string& src2) { struct ns__Xor *_p = soap_instantiate_ns__Xor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Xor(soap, _p); _p->src1 = src1; _p->src2 = src2; } return _p; }

inline void soap_delete_ns__Xor(struct soap *soap, struct ns__Xor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Xor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__XorResponse
#define SOAP_TYPE_ns__XorResponse (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__XorResponse(struct soap*, struct ns__XorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__XorResponse(struct soap*, const struct ns__XorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__XorResponse(struct soap*, const char*, int, const struct ns__XorResponse *, const char*);
SOAP_FMAC3 struct ns__XorResponse * SOAP_FMAC4 soap_in_ns__XorResponse(struct soap*, const char*, struct ns__XorResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__XorResponse(struct soap*, const struct ns__XorResponse *, const char*, const char*);

#ifndef soap_write_ns__XorResponse
#define soap_write_ns__XorResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__XorResponse(soap, data), soap_begin_send(soap) || soap_put_ns__XorResponse(soap, data, "ns:XorResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__XorResponse * SOAP_FMAC4 soap_get_ns__XorResponse(struct soap*, struct ns__XorResponse *, const char*, const char*);

#ifndef soap_read_ns__XorResponse
#define soap_read_ns__XorResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__XorResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__XorResponse * SOAP_FMAC2 soap_instantiate_ns__XorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__XorResponse * soap_new_ns__XorResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__XorResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__XorResponse * soap_new_req_ns__XorResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__XorResponse *_p = soap_instantiate_ns__XorResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__XorResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__XorResponse * soap_new_set_ns__XorResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__XorResponse *_p = soap_instantiate_ns__XorResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__XorResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__XorResponse(struct soap *soap, struct ns__XorResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__XorResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__And
#define SOAP_TYPE_ns__And (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__And(struct soap*, struct ns__And *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__And(struct soap*, const struct ns__And *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__And(struct soap*, const char*, int, const struct ns__And *, const char*);
SOAP_FMAC3 struct ns__And * SOAP_FMAC4 soap_in_ns__And(struct soap*, const char*, struct ns__And *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__And(struct soap*, const struct ns__And *, const char*, const char*);

#ifndef soap_write_ns__And
#define soap_write_ns__And(soap, data) ( soap_begin(soap), soap_serialize_ns__And(soap, data), soap_begin_send(soap) || soap_put_ns__And(soap, data, "ns:And", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__And * SOAP_FMAC4 soap_get_ns__And(struct soap*, struct ns__And *, const char*, const char*);

#ifndef soap_read_ns__And
#define soap_read_ns__And(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__And(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__And * SOAP_FMAC2 soap_instantiate_ns__And(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__And * soap_new_ns__And(struct soap *soap, int n = -1) { return soap_instantiate_ns__And(soap, n, NULL, NULL, NULL); }

inline struct ns__And * soap_new_req_ns__And(struct soap *soap, std::string& src1, std::string& src2) { struct ns__And *_p = soap_instantiate_ns__And(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__And(soap, _p); _p->src1 = src1; _p->src2 = src2; } return _p; }

inline struct ns__And * soap_new_set_ns__And(struct soap *soap, std::string& src1, std::string& src2) { struct ns__And *_p = soap_instantiate_ns__And(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__And(soap, _p); _p->src1 = src1; _p->src2 = src2; } return _p; }

inline void soap_delete_ns__And(struct soap *soap, struct ns__And *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__And(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__AndResponse
#define SOAP_TYPE_ns__AndResponse (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AndResponse(struct soap*, struct ns__AndResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AndResponse(struct soap*, const struct ns__AndResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AndResponse(struct soap*, const char*, int, const struct ns__AndResponse *, const char*);
SOAP_FMAC3 struct ns__AndResponse * SOAP_FMAC4 soap_in_ns__AndResponse(struct soap*, const char*, struct ns__AndResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AndResponse(struct soap*, const struct ns__AndResponse *, const char*, const char*);

#ifndef soap_write_ns__AndResponse
#define soap_write_ns__AndResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__AndResponse(soap, data), soap_begin_send(soap) || soap_put_ns__AndResponse(soap, data, "ns:AndResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__AndResponse * SOAP_FMAC4 soap_get_ns__AndResponse(struct soap*, struct ns__AndResponse *, const char*, const char*);

#ifndef soap_read_ns__AndResponse
#define soap_read_ns__AndResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__AndResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__AndResponse * SOAP_FMAC2 soap_instantiate_ns__AndResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__AndResponse * soap_new_ns__AndResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__AndResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__AndResponse * soap_new_req_ns__AndResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__AndResponse *_p = soap_instantiate_ns__AndResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__AndResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__AndResponse * soap_new_set_ns__AndResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__AndResponse *_p = soap_instantiate_ns__AndResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__AndResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__AndResponse(struct soap *soap, struct ns__AndResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__AndResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__Or
#define SOAP_TYPE_ns__Or (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Or(struct soap*, struct ns__Or *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Or(struct soap*, const struct ns__Or *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Or(struct soap*, const char*, int, const struct ns__Or *, const char*);
SOAP_FMAC3 struct ns__Or * SOAP_FMAC4 soap_in_ns__Or(struct soap*, const char*, struct ns__Or *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Or(struct soap*, const struct ns__Or *, const char*, const char*);

#ifndef soap_write_ns__Or
#define soap_write_ns__Or(soap, data) ( soap_begin(soap), soap_serialize_ns__Or(soap, data), soap_begin_send(soap) || soap_put_ns__Or(soap, data, "ns:Or", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__Or * SOAP_FMAC4 soap_get_ns__Or(struct soap*, struct ns__Or *, const char*, const char*);

#ifndef soap_read_ns__Or
#define soap_read_ns__Or(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__Or(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__Or * SOAP_FMAC2 soap_instantiate_ns__Or(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Or * soap_new_ns__Or(struct soap *soap, int n = -1) { return soap_instantiate_ns__Or(soap, n, NULL, NULL, NULL); }

inline struct ns__Or * soap_new_req_ns__Or(struct soap *soap, std::string& src1, std::string& src2) { struct ns__Or *_p = soap_instantiate_ns__Or(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Or(soap, _p); _p->src1 = src1; _p->src2 = src2; } return _p; }

inline struct ns__Or * soap_new_set_ns__Or(struct soap *soap, std::string& src1, std::string& src2) { struct ns__Or *_p = soap_instantiate_ns__Or(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__Or(soap, _p); _p->src1 = src1; _p->src2 = src2; } return _p; }

inline void soap_delete_ns__Or(struct soap *soap, struct ns__Or *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Or(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__OrResponse
#define SOAP_TYPE_ns__OrResponse (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__OrResponse(struct soap*, struct ns__OrResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__OrResponse(struct soap*, const struct ns__OrResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__OrResponse(struct soap*, const char*, int, const struct ns__OrResponse *, const char*);
SOAP_FMAC3 struct ns__OrResponse * SOAP_FMAC4 soap_in_ns__OrResponse(struct soap*, const char*, struct ns__OrResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__OrResponse(struct soap*, const struct ns__OrResponse *, const char*, const char*);

#ifndef soap_write_ns__OrResponse
#define soap_write_ns__OrResponse(soap, data) ( soap_begin(soap), soap_serialize_ns__OrResponse(soap, data), soap_begin_send(soap) || soap_put_ns__OrResponse(soap, data, "ns:OrResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns__OrResponse * SOAP_FMAC4 soap_get_ns__OrResponse(struct soap*, struct ns__OrResponse *, const char*, const char*);

#ifndef soap_read_ns__OrResponse
#define soap_read_ns__OrResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__OrResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns__OrResponse * SOAP_FMAC2 soap_instantiate_ns__OrResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__OrResponse * soap_new_ns__OrResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__OrResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__OrResponse * soap_new_req_ns__OrResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__OrResponse *_p = soap_instantiate_ns__OrResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__OrResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline struct ns__OrResponse * soap_new_set_ns__OrResponse(struct soap *soap, std::string& OutputMatFilename) { struct ns__OrResponse *_p = soap_instantiate_ns__OrResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__OrResponse(soap, _p); _p->OutputMatFilename = OutputMatFilename; } return _p; }

inline void soap_delete_ns__OrResponse(struct soap *soap, struct ns__OrResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__OrResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin(soap), soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin(soap), soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

/* End of soapH.h */
