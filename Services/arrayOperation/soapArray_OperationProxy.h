/* soapArray_OperationProxy.h
   Generated by gSOAP 2.8.8 from ArrayOperation.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapArray_OperationProxy_H
#define soapArray_OperationProxy_H
#include "soapH.h"
class Array_Operation
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'Array_Operation' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	Array_Operation()
	{ soap = soap_new(); endpoint = "http://localhost/cgi-bin/ArrayOperationServer"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:aropt", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~Array_Operation() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'Or' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__Or(std::string src1, std::string src2, std::string &OutputMatFilename) { return soap ? soap_call_ns__Or(soap, endpoint, NULL, src1, src2, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'And' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__And(std::string src1, std::string src2, std::string &OutputMatFilename) { return soap ? soap_call_ns__And(soap, endpoint, NULL, src1, src2, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'Xor' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__Xor(std::string src1, std::string src2, std::string &OutputMatFilename) { return soap ? soap_call_ns__Xor(soap, endpoint, NULL, src1, src2, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'Not' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__Not(std::string src, std::string &OutputMatFilename) { return soap ? soap_call_ns__Not(soap, endpoint, NULL, src, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'addWeighted' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__addWeighted(std::string InputMatFilename1, double alpha, std::string InputMatFilename2, double beta, double gamma, int dtype_D, std::string &OutputMatFilename) { return soap ? soap_call_ns__addWeighted(soap, endpoint, NULL, InputMatFilename1, alpha, InputMatFilename2, beta, gamma, dtype_D, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'add' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__add(std::string InputMatFilename1, std::string InputMatFilename2, std::string maskFilename_D, int dtype_D, std::string &OutputMatFilename) { return soap ? soap_call_ns__add(soap, endpoint, NULL, InputMatFilename1, InputMatFilename2, maskFilename_D, dtype_D, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'subtract' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__subtract(std::string InputMatFilename1, std::string InputMatFilename2, std::string maskFilename_D, int dtype_D, std::string &OutputMatFilename) { return soap ? soap_call_ns__subtract(soap, endpoint, NULL, InputMatFilename1, InputMatFilename2, maskFilename_D, dtype_D, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'abs' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__abs(std::string InputMatFilename, std::string &OutputMatFilename) { return soap ? soap_call_ns__abs(soap, endpoint, NULL, InputMatFilename, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'absdiff' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__absdiff(std::string InputMatFilename1, std::string InputMatFilename2, std::string &OutputMatFilename) { return soap ? soap_call_ns__absdiff(soap, endpoint, NULL, InputMatFilename1, InputMatFilename2, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'sqrt' of service 'Array_Operation' and return error code (or SOAP_OK)
	virtual int ns__sqrt(std::string InputMatFilename, std::string &OutputMatFilename) { return soap ? soap_call_ns__sqrt(soap, endpoint, NULL, InputMatFilename, OutputMatFilename) : SOAP_EOM; };
};
#endif
