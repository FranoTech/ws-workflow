/* soapClient.cpp
   Generated by gSOAP 2.8.8 from Drawing.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.8 2012-09-19 07:40:33 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__circle(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, int centerX, int centerY, int radius, int scalarColor0, int scalarColor1, int scalarColor2, int thickness_D, int lineType_D, int shift_D, std::string &OutputMatFilename)
{	struct ns__circle soap_tmp_ns__circle;
	struct ns__circleResponse *soap_tmp_ns__circleResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/DrawingServer";
	soap->encodingStyle = "";
	soap_tmp_ns__circle.InputMatFilename = InputMatFilename;
	soap_tmp_ns__circle.centerX = centerX;
	soap_tmp_ns__circle.centerY = centerY;
	soap_tmp_ns__circle.radius = radius;
	soap_tmp_ns__circle.scalarColor0 = scalarColor0;
	soap_tmp_ns__circle.scalarColor1 = scalarColor1;
	soap_tmp_ns__circle.scalarColor2 = scalarColor2;
	soap_tmp_ns__circle.thickness_D = thickness_D;
	soap_tmp_ns__circle.lineType_D = lineType_D;
	soap_tmp_ns__circle.shift_D = shift_D;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__circle(soap, &soap_tmp_ns__circle);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__circle(soap, &soap_tmp_ns__circle, "ns:circle", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__circle(soap, &soap_tmp_ns__circle, "ns:circle", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&OutputMatFilename)
		return soap_closesock(soap);
	soap_default_std__string(soap, &OutputMatFilename);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__circleResponse = soap_get_ns__circleResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	OutputMatFilename = soap_tmp_ns__circleResponse->OutputMatFilename;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__ellipse(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, int centerX, int centerY, int axeX, int axeY, double angle, double startAngle, double endAngle, int scalarColor0, int scalarColor1, int scalarColor2, int thickness_D, int lineType_D, int shift_D, std::string &OutputMatFilename)
{	struct ns__ellipse soap_tmp_ns__ellipse;
	struct ns__ellipseResponse *soap_tmp_ns__ellipseResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/DrawingServer";
	soap->encodingStyle = "";
	soap_tmp_ns__ellipse.InputMatFilename = InputMatFilename;
	soap_tmp_ns__ellipse.centerX = centerX;
	soap_tmp_ns__ellipse.centerY = centerY;
	soap_tmp_ns__ellipse.axeX = axeX;
	soap_tmp_ns__ellipse.axeY = axeY;
	soap_tmp_ns__ellipse.angle = angle;
	soap_tmp_ns__ellipse.startAngle = startAngle;
	soap_tmp_ns__ellipse.endAngle = endAngle;
	soap_tmp_ns__ellipse.scalarColor0 = scalarColor0;
	soap_tmp_ns__ellipse.scalarColor1 = scalarColor1;
	soap_tmp_ns__ellipse.scalarColor2 = scalarColor2;
	soap_tmp_ns__ellipse.thickness_D = thickness_D;
	soap_tmp_ns__ellipse.lineType_D = lineType_D;
	soap_tmp_ns__ellipse.shift_D = shift_D;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__ellipse(soap, &soap_tmp_ns__ellipse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__ellipse(soap, &soap_tmp_ns__ellipse, "ns:ellipse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__ellipse(soap, &soap_tmp_ns__ellipse, "ns:ellipse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&OutputMatFilename)
		return soap_closesock(soap);
	soap_default_std__string(soap, &OutputMatFilename);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__ellipseResponse = soap_get_ns__ellipseResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	OutputMatFilename = soap_tmp_ns__ellipseResponse->OutputMatFilename;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
