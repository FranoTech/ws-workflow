/* soapClient.cpp
   Generated by gSOAP 2.8.8 from FeatureDetection.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.8 2013-01-14 17:08:19 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__Canny(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string InputMatFilename, double threshold1, double threshold2, int apertureSize_D, int L2gradient_D, std::string &OutputMatFilenameE)
{	struct ns__Canny soap_tmp_ns__Canny;
	struct ns__CannyResponse *soap_tmp_ns__CannyResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/cgi-bin/FeatureDetectionServer";
	soap->encodingStyle = "";
	soap_tmp_ns__Canny.InputMatFilename = InputMatFilename;
	soap_tmp_ns__Canny.threshold1 = threshold1;
	soap_tmp_ns__Canny.threshold2 = threshold2;
	soap_tmp_ns__Canny.apertureSize_D = apertureSize_D;
	soap_tmp_ns__Canny.L2gradient_D = L2gradient_D;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__Canny(soap, &soap_tmp_ns__Canny);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__Canny(soap, &soap_tmp_ns__Canny, "ns:Canny", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__Canny(soap, &soap_tmp_ns__Canny, "ns:Canny", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&OutputMatFilenameE)
		return soap_closesock(soap);
	soap_default_std__string(soap, &OutputMatFilenameE);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__CannyResponse = soap_get_ns__CannyResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	OutputMatFilenameE = soap_tmp_ns__CannyResponse->OutputMatFilenameE;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
