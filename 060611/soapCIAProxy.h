/* soapCIAProxy.h
   Generated by gSOAP 2.8.2 from CIA.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef soapCIAProxy_H
#define soapCIAProxy_H
#include "soapH.h"

class SOAP_CMAC CIAProxy : public soap
{ public:
	/// Endpoint URL of service 'CIAProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	CIAProxy();
	/// Constructor with copy of another engine state
	CIAProxy(const struct soap&);
	/// Constructor with endpoint URL
	CIAProxy(const char *url);
	/// Constructor with engine input+output mode control
	CIAProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	CIAProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	CIAProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~CIAProxy();
	/// Initializer used by constructors
	virtual	void CIAProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Ipl1ChToMat' (returns error code or SOAP_OK)
	virtual	int Ipl1ChToMat(void *_, ns__ImageData &output);

	/// Web service operation 'MatToIpl1Ch' (returns error code or SOAP_OK)
	virtual	int MatToIpl1Ch(void *_, ns__ImageData &output);

	/// Web service operation 'BinaryThreshold' (returns error code or SOAP_OK)
	virtual	int BinaryThreshold(double threshold, double maxValue, ns__ImageData &output);

	/// Web service operation 'MorphOpen' (returns error code or SOAP_OK)
	virtual	int MorphOpen(void *_, ns__ImageData &output);
};
#endif
