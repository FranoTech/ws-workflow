/* soaphelloService.cpp
   Generated by gSOAP 2.7.17 from hello.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soaphelloService.h"

helloService::helloService()
{	helloService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

helloService::helloService(const struct soap &_soap) :soap(_soap)
{ }

helloService::helloService(soap_mode iomode)
{	helloService_init(iomode, iomode);
}

helloService::helloService(soap_mode imode, soap_mode omode)
{	helloService_init(imode, omode);
}

helloService::~helloService()
{ }

void helloService::helloService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:hello", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
};

void helloService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

helloService *helloService::copy()
{	helloService *dup = SOAP_NEW_COPY(helloService(*(struct soap*)this));
	return dup;
}

int helloService::soap_close_socket()
{	return soap_closesock(this);
}

int helloService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int helloService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int helloService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int helloService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void helloService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void helloService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *helloService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void helloService::soap_noheader()
{	header = NULL;
}

int helloService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET helloService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET helloService::accept()
{	return soap_accept(this);
}

int helloService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__hello(helloService*);

int helloService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns:hello"))
		return serve_ns__hello(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns__hello(helloService *soap)
{	struct ns__hello soap_tmp_ns__hello;
	struct ns__helloResponse soap_tmp_ns__helloResponse;
	soap_default_ns__helloResponse(soap, &soap_tmp_ns__helloResponse);
	soap_default_ns__hello(soap, &soap_tmp_ns__hello);
	soap->encodingStyle = "";
	if (!soap_get_ns__hello(soap, &soap_tmp_ns__hello, "ns:hello", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->hello(soap_tmp_ns__hello._param_1, soap_tmp_ns__helloResponse._param_2);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__helloResponse(soap, &soap_tmp_ns__helloResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__helloResponse(soap, &soap_tmp_ns__helloResponse, "ns:helloResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__helloResponse(soap, &soap_tmp_ns__helloResponse, "ns:helloResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
