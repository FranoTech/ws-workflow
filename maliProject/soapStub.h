/* soapStub.h
   Generated by gSOAP 2.8.8 from mali.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20808
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns__RemoveSmallCell
#define SOAP_TYPE_ns__RemoveSmallCell (7)
/* ns:RemoveSmallCell */
class SOAP_CMAC ns__RemoveSmallCell
{
public:
	char *keepedArea;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	char *biggerArea;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_ns__RemoveSmallCell */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__RemoveSmallCell() { ns__RemoveSmallCell::soap_default(NULL); }
	virtual ~ns__RemoveSmallCell() { }
};
#endif

#ifndef SOAP_TYPE_ns__base64Binary
#define SOAP_TYPE_ns__base64Binary (8)
/* Base64 schema type: */
class SOAP_CMAC ns__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__base64Binary() { ns__base64Binary::soap_default(NULL); }
	virtual ~ns__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_ns__loadMatResponse
#define SOAP_TYPE_ns__loadMatResponse (14)
/* ns:loadMatResponse */
struct ns__loadMatResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__loadMat
#define SOAP_TYPE_ns__loadMat (15)
/* ns:loadMat */
struct ns__loadMat
{
public:
	char *InputImageFilename;	/* optional element of type xsd:string */
	int colorflag;	/* required element of type xsd:int */
	char *types;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__MatToJPGResponse
#define SOAP_TYPE_ns__MatToJPGResponse (17)
/* ns:MatToJPGResponse */
struct ns__MatToJPGResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__MatToJPG
#define SOAP_TYPE_ns__MatToJPG (18)
/* ns:MatToJPG */
struct ns__MatToJPG
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__ConvertToResponse
#define SOAP_TYPE_ns__ConvertToResponse (20)
/* ns:ConvertToResponse */
struct ns__ConvertToResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__ConvertTo
#define SOAP_TYPE_ns__ConvertTo (21)
/* ns:ConvertTo */
struct ns__ConvertTo
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
	char *types;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__ThresholdResponse
#define SOAP_TYPE_ns__ThresholdResponse (25)
/* ns:ThresholdResponse */
struct ns__ThresholdResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__Threshold
#define SOAP_TYPE_ns__Threshold (26)
/* ns:Threshold */
struct ns__Threshold
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
	double thresholdValue;	/* required element of type xsd:double */
	double maxValue;	/* required element of type xsd:double */
	char *thresholdType;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__MorphologyExResponse
#define SOAP_TYPE_ns__MorphologyExResponse (28)
/* ns:MorphologyExResponse */
struct ns__MorphologyExResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__MorphologyEx
#define SOAP_TYPE_ns__MorphologyEx (29)
/* ns:MorphologyEx */
struct ns__MorphologyEx
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
	char *morphOperation;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__erodeResponse
#define SOAP_TYPE_ns__erodeResponse (31)
/* ns:erodeResponse */
struct ns__erodeResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__erode
#define SOAP_TYPE_ns__erode (32)
/* ns:erode */
struct ns__erode
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
	char *elementFilename;	/* optional element of type xsd:string */
	int iteration;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__dilateResponse
#define SOAP_TYPE_ns__dilateResponse (34)
/* ns:dilateResponse */
struct ns__dilateResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__dilate
#define SOAP_TYPE_ns__dilate (35)
/* ns:dilate */
struct ns__dilate
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
	char *elementFilename;	/* optional element of type xsd:string */
	int iteration;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__OrResponse
#define SOAP_TYPE_ns__OrResponse (37)
/* ns:OrResponse */
struct ns__OrResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__Or
#define SOAP_TYPE_ns__Or (38)
/* ns:Or */
struct ns__Or
{
public:
	char *src1;	/* optional element of type xsd:string */
	char *src2;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__AndResponse
#define SOAP_TYPE_ns__AndResponse (40)
/* ns:AndResponse */
struct ns__AndResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__And
#define SOAP_TYPE_ns__And (41)
/* ns:And */
struct ns__And
{
public:
	char *src1;	/* optional element of type xsd:string */
	char *src2;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__NotResponse
#define SOAP_TYPE_ns__NotResponse (43)
/* ns:NotResponse */
struct ns__NotResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__Not
#define SOAP_TYPE_ns__Not (44)
/* ns:Not */
struct ns__Not
{
public:
	char *src;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__removeSmallCell
#define SOAP_TYPE_ns__removeSmallCell (47)
/* ns:removeSmallCell */
struct ns__removeSmallCell
{
public:
	char *inputMatFilename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__scanningCellResponse
#define SOAP_TYPE_ns__scanningCellResponse (49)
/* ns:scanningCellResponse */
struct ns__scanningCellResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__scanningCell
#define SOAP_TYPE_ns__scanningCell (50)
/* ns:scanningCell */
struct ns__scanningCell
{
public:
	char *biggerArea;	/* optional element of type xsd:string */
	char *keepArea;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__trainANNResponse
#define SOAP_TYPE_ns__trainANNResponse (52)
/* ns:trainANNResponse */
struct ns__trainANNResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__trainANN
#define SOAP_TYPE_ns__trainANN (53)
/* ns:trainANN */
struct ns__trainANN
{
public:
	char *inputMatFilename;	/* optional element of type xsd:string */
	char *neuralFile;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__separateCellResponse
#define SOAP_TYPE_ns__separateCellResponse (55)
/* ns:separateCellResponse */
struct ns__separateCellResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__separateCell
#define SOAP_TYPE_ns__separateCell (56)
/* ns:separateCell */
struct ns__separateCell
{
public:
	char *input1;	/* optional element of type xsd:string */
	char *input2;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__prepareResultResponse
#define SOAP_TYPE_ns__prepareResultResponse (58)
/* ns:prepareResultResponse */
struct ns__prepareResultResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__prepareResult
#define SOAP_TYPE_ns__prepareResult (59)
/* ns:prepareResult */
struct ns__prepareResult
{
public:
	char *inputMatFilename;	/* optional element of type xsd:string */
	char *afterthresNN;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__viewImageResponse
#define SOAP_TYPE_ns__viewImageResponse (62)
/* ns:viewImageResponse */
struct ns__viewImageResponse
{
public:
	ns__base64Binary image;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:base64Binary */
};
#endif

#ifndef SOAP_TYPE_ns__viewImage
#define SOAP_TYPE_ns__viewImage (63)
/* ns:viewImage */
struct ns__viewImage
{
public:
	char *inputMatFilename;	/* optional element of type xsd:string */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (64)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (65)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (67)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (70)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (71)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__loadMat(struct soap*, char *InputImageFilename, int colorflag, char *types, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__MatToJPG(struct soap*, char *InputMatFilename, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__ConvertTo(struct soap*, char *InputMatFilename, char *types, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__Threshold(struct soap*, char *InputMatFilename, double thresholdValue, double maxValue, char *thresholdType, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__MorphologyEx(struct soap*, char *InputMatFilename, char *morphOperation, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__erode(struct soap*, char *InputMatFilename, char *elementFilename, int iteration, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__dilate(struct soap*, char *InputMatFilename, char *elementFilename, int iteration, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__Or(struct soap*, char *src1, char *src2, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__And(struct soap*, char *src1, char *src2, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__Not(struct soap*, char *src, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__removeSmallCell(struct soap*, char *inputMatFilename, ns__RemoveSmallCell &out);

SOAP_FMAC5 int SOAP_FMAC6 ns__scanningCell(struct soap*, char *biggerArea, char *keepArea, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__trainANN(struct soap*, char *inputMatFilename, char *neuralFile, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__separateCell(struct soap*, char *input1, char *input2, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__prepareResult(struct soap*, char *inputMatFilename, char *afterthresNN, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__viewImage(struct soap*, char *inputMatFilename, ns__base64Binary &image);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__loadMat(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__MatToJPG(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__ConvertTo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__Threshold(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__MorphologyEx(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__erode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__dilate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__Or(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__And(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__Not(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__removeSmallCell(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__scanningCell(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__trainANN(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__separateCell(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__prepareResult(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__viewImage(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__loadMat(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputImageFilename, int colorflag, char *types, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__MatToJPG(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__ConvertTo(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, char *types, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__Threshold(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, double thresholdValue, double maxValue, char *thresholdType, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__MorphologyEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, char *morphOperation, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__erode(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, char *elementFilename, int iteration, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__dilate(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, char *elementFilename, int iteration, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__Or(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *src1, char *src2, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__And(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *src1, char *src2, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__Not(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *src, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__removeSmallCell(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *inputMatFilename, ns__RemoveSmallCell &out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__scanningCell(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *biggerArea, char *keepArea, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__trainANN(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *inputMatFilename, char *neuralFile, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__separateCell(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *input1, char *input2, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__prepareResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *inputMatFilename, char *afterthresNN, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__viewImage(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *inputMatFilename, ns__base64Binary &image);

#endif

/* End of soapStub.h */
