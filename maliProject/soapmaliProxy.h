/* soapmaliProxy.h
   Generated by gSOAP 2.8.8 from mali.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapmaliProxy_H
#define soapmaliProxy_H
#include "soapH.h"
class mali
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'mali' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	mali()
	{ soap = soap_new(); endpoint = "http://localhost/cgi-bin/maliServer"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:mali", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~mali() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'loadMat' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__loadMat(char *InputImageFilename, int colorflag, char *types, char **OutputMatFilename) { return soap ? soap_call_ns__loadMat(soap, endpoint, NULL, InputImageFilename, colorflag, types, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'MatToJPG' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__MatToJPG(char *InputMatFilename, char **OutputMatFilename) { return soap ? soap_call_ns__MatToJPG(soap, endpoint, NULL, InputMatFilename, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'ConvertTo' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__ConvertTo(char *InputMatFilename, char *types, char **OutputMatFilename) { return soap ? soap_call_ns__ConvertTo(soap, endpoint, NULL, InputMatFilename, types, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'Threshold' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__Threshold(char *InputMatFilename, double thresholdValue, double maxValue, char *thresholdType, char **OutputMatFilename) { return soap ? soap_call_ns__Threshold(soap, endpoint, NULL, InputMatFilename, thresholdValue, maxValue, thresholdType, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'MorphologyEx' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__MorphologyEx(char *InputMatFilename, char *morphOperation, char **OutputMatFilename) { return soap ? soap_call_ns__MorphologyEx(soap, endpoint, NULL, InputMatFilename, morphOperation, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'erode' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__erode(char *InputMatFilename, char *elementFilename, int iteration, char **OutputMatFilename) { return soap ? soap_call_ns__erode(soap, endpoint, NULL, InputMatFilename, elementFilename, iteration, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'dilate' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__dilate(char *InputMatFilename, char *elementFilename, int iteration, char **OutputMatFilename) { return soap ? soap_call_ns__dilate(soap, endpoint, NULL, InputMatFilename, elementFilename, iteration, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'Or' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__Or(char *src1, char *src2, char **OutputMatFilename) { return soap ? soap_call_ns__Or(soap, endpoint, NULL, src1, src2, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'And' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__And(char *src1, char *src2, char **OutputMatFilename) { return soap ? soap_call_ns__And(soap, endpoint, NULL, src1, src2, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'Not' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__Not(char *src, char **OutputMatFilename) { return soap ? soap_call_ns__Not(soap, endpoint, NULL, src, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'removeSmallCell' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__removeSmallCell(char *inputMatFilename, ns__RemoveSmallCell &out) { return soap ? soap_call_ns__removeSmallCell(soap, endpoint, NULL, inputMatFilename, out) : SOAP_EOM; };
	/// Invoke 'scanningCell' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__scanningCell(char *biggerArea, char *keepArea, char **OutputMatFilename) { return soap ? soap_call_ns__scanningCell(soap, endpoint, NULL, biggerArea, keepArea, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'trainANN' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__trainANN(char *inputMatFilename, char *neuralFile, char **OutputMatFilename) { return soap ? soap_call_ns__trainANN(soap, endpoint, NULL, inputMatFilename, neuralFile, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'separateCell' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__separateCell(char *input1, char *input2, char **OutputMatFilename) { return soap ? soap_call_ns__separateCell(soap, endpoint, NULL, input1, input2, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'prepareResult' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__prepareResult(char *inputMatFilename, char *afterthresNN, char **OutputMatFilename) { return soap ? soap_call_ns__prepareResult(soap, endpoint, NULL, inputMatFilename, afterthresNN, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'viewImage' of service 'mali' and return error code (or SOAP_OK)
	virtual int ns__viewImage(char *inputMatFilename, ns__base64Binary &image) { return soap ? soap_call_ns__viewImage(soap, endpoint, NULL, inputMatFilename, image) : SOAP_EOM; };
};
#endif
