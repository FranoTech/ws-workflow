/* soapStub.h
   Generated by gSOAP 2.8.2 from imgProcess.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns__FindContours
#define SOAP_TYPE_ns__FindContours (7)
/* ns:FindContours */
class SOAP_CMAC ns__FindContours
{
public:
	char *smallerArea;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	char *biggerArea;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_ns__FindContours */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__FindContours() { ns__FindContours::soap_default(NULL); }
	virtual ~ns__FindContours() { }
};
#endif

#ifndef SOAP_TYPE_ns__loadMatResponse
#define SOAP_TYPE_ns__loadMatResponse (10)
/* ns:loadMatResponse */
struct ns__loadMatResponse
{
public:
	char *OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__loadMat
#define SOAP_TYPE_ns__loadMat (11)
/* ns:loadMat */
struct ns__loadMat
{
public:
	char *InputImageFilename;	/* optional element of type xsd:string */
	int loadparam;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__binaryThresholdResponse
#define SOAP_TYPE_ns__binaryThresholdResponse (14)
/* ns:binaryThresholdResponse */
struct ns__binaryThresholdResponse
{
public:
	char *OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__binaryThreshold
#define SOAP_TYPE_ns__binaryThreshold (15)
/* ns:binaryThreshold */
struct ns__binaryThreshold
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
	double thresholdValue;	/* required element of type xsd:double */
	double maxValue;	/* required element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_ns__morphOpenResponse
#define SOAP_TYPE_ns__morphOpenResponse (17)
/* ns:morphOpenResponse */
struct ns__morphOpenResponse
{
public:
	char *OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__morphOpen
#define SOAP_TYPE_ns__morphOpen (18)
/* ns:morphOpen */
struct ns__morphOpen
{
public:
	char *InpuMattFilename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__MatToJPGResponse
#define SOAP_TYPE_ns__MatToJPGResponse (20)
/* ns:MatToJPGResponse */
struct ns__MatToJPGResponse
{
public:
	char *OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__MatToJPG
#define SOAP_TYPE_ns__MatToJPG (21)
/* ns:MatToJPG */
struct ns__MatToJPG
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__findContoursAndFillpoly
#define SOAP_TYPE_ns__findContoursAndFillpoly (24)
/* ns:findContoursAndFillpoly */
struct ns__findContoursAndFillpoly
{
public:
	char *InputMatFilename;	/* optional element of type xsd:string */
	int lowerBound;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__erodeResponse
#define SOAP_TYPE_ns__erodeResponse (27)
/* ns:erodeResponse */
struct ns__erodeResponse
{
public:
	char **OutputMatFilename;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__erode
#define SOAP_TYPE_ns__erode (28)
/* ns:erode */
struct ns__erode
{
public:
	char *src;	/* optional element of type xsd:string */
	char *element;	/* optional element of type xsd:string */
	int iteration;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__signalResponse
#define SOAP_TYPE_ns__signalResponse (29)
/* ns:signalResponse */
struct ns__signalResponse
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__viewResult
#define SOAP_TYPE_ns__viewResult (32)
/* ns:viewResult */
struct ns__viewResult
{
public:
	char *src;	/* optional element of type xsd:string */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (33)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (34)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (36)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (39)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (40)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__loadMat(struct soap*, char *InputImageFilename, int loadparam, char *&OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__binaryThreshold(struct soap*, char *InputMatFilename, double thresholdValue, double maxValue, char *&OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__morphOpen(struct soap*, char *InpuMattFilename, char *&OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__MatToJPG(struct soap*, char *InputMatFilename, char *&OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__findContoursAndFillpoly(struct soap*, char *InputMatFilename, int lowerBound, ns__FindContours &out);

SOAP_FMAC5 int SOAP_FMAC6 ns__erode(struct soap*, char *src, char *element, int iteration, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 ns__viewResult(struct soap*, char *src, struct ns__signalResponse *out);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__loadMat(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__binaryThreshold(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__morphOpen(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__MatToJPG(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__findContoursAndFillpoly(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__erode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__viewResult(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__loadMat(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputImageFilename, int loadparam, char *&OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__binaryThreshold(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, double thresholdValue, double maxValue, char *&OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__morphOpen(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InpuMattFilename, char *&OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__MatToJPG(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, char *&OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__findContoursAndFillpoly(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *InputMatFilename, int lowerBound, ns__FindContours &out);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__erode(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *src, char *element, int iteration, char **OutputMatFilename);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__viewResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *src, struct ns__signalResponse *out);

#endif

/* End of soapStub.h */
