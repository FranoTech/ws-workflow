/* soapC.cpp
   Generated by gSOAP 2.7.17 from imgProcess.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.17 2011-10-11 06:50:36 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_ns__RemoveSmallCell:
		return soap_in_ns__RemoveSmallCell(soap, NULL, NULL, "ns:RemoveSmallCell");
	case SOAP_TYPE_ns__FindContours:
		return soap_in_ns__FindContours(soap, NULL, NULL, "ns:FindContours");
	case SOAP_TYPE_ns__scanningCell:
		return soap_in_ns__scanningCell(soap, NULL, NULL, "ns:scanningCell");
	case SOAP_TYPE_ns__scanningCellResponse:
		return soap_in_ns__scanningCellResponse(soap, NULL, NULL, "ns:scanningCellResponse");
	case SOAP_TYPE_ns__removeSmallCell:
		return soap_in_ns__removeSmallCell(soap, NULL, NULL, "ns:removeSmallCell");
	case SOAP_TYPE_ns__Not:
		return soap_in_ns__Not(soap, NULL, NULL, "ns:Not");
	case SOAP_TYPE_ns__NotResponse:
		return soap_in_ns__NotResponse(soap, NULL, NULL, "ns:NotResponse");
	case SOAP_TYPE_ns__And:
		return soap_in_ns__And(soap, NULL, NULL, "ns:And");
	case SOAP_TYPE_ns__AndResponse:
		return soap_in_ns__AndResponse(soap, NULL, NULL, "ns:AndResponse");
	case SOAP_TYPE_ns__Or:
		return soap_in_ns__Or(soap, NULL, NULL, "ns:Or");
	case SOAP_TYPE_ns__OrResponse:
		return soap_in_ns__OrResponse(soap, NULL, NULL, "ns:OrResponse");
	case SOAP_TYPE_ns__dilate:
		return soap_in_ns__dilate(soap, NULL, NULL, "ns:dilate");
	case SOAP_TYPE_ns__dilateResponse:
		return soap_in_ns__dilateResponse(soap, NULL, NULL, "ns:dilateResponse");
	case SOAP_TYPE_ns__erode:
		return soap_in_ns__erode(soap, NULL, NULL, "ns:erode");
	case SOAP_TYPE_ns__erodeResponse:
		return soap_in_ns__erodeResponse(soap, NULL, NULL, "ns:erodeResponse");
	case SOAP_TYPE_ns__findContoursAndFillpoly:
		return soap_in_ns__findContoursAndFillpoly(soap, NULL, NULL, "ns:findContoursAndFillpoly");
	case SOAP_TYPE_ns__MatToJPG:
		return soap_in_ns__MatToJPG(soap, NULL, NULL, "ns:MatToJPG");
	case SOAP_TYPE_ns__MatToJPGResponse:
		return soap_in_ns__MatToJPGResponse(soap, NULL, NULL, "ns:MatToJPGResponse");
	case SOAP_TYPE_ns__morphOpen:
		return soap_in_ns__morphOpen(soap, NULL, NULL, "ns:morphOpen");
	case SOAP_TYPE_ns__morphOpenResponse:
		return soap_in_ns__morphOpenResponse(soap, NULL, NULL, "ns:morphOpenResponse");
	case SOAP_TYPE_ns__binaryThreshold:
		return soap_in_ns__binaryThreshold(soap, NULL, NULL, "ns:binaryThreshold");
	case SOAP_TYPE_ns__binaryThresholdResponse:
		return soap_in_ns__binaryThresholdResponse(soap, NULL, NULL, "ns:binaryThresholdResponse");
	case SOAP_TYPE_ns__loadMat:
		return soap_in_ns__loadMat(soap, NULL, NULL, "ns:loadMat");
	case SOAP_TYPE_ns__loadMatResponse:
		return soap_in_ns__loadMatResponse(soap, NULL, NULL, "ns:loadMatResponse");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns:RemoveSmallCell"))
		{	*type = SOAP_TYPE_ns__RemoveSmallCell;
			return soap_in_ns__RemoveSmallCell(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:FindContours"))
		{	*type = SOAP_TYPE_ns__FindContours;
			return soap_in_ns__FindContours(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:scanningCell"))
		{	*type = SOAP_TYPE_ns__scanningCell;
			return soap_in_ns__scanningCell(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:scanningCellResponse"))
		{	*type = SOAP_TYPE_ns__scanningCellResponse;
			return soap_in_ns__scanningCellResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:removeSmallCell"))
		{	*type = SOAP_TYPE_ns__removeSmallCell;
			return soap_in_ns__removeSmallCell(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Not"))
		{	*type = SOAP_TYPE_ns__Not;
			return soap_in_ns__Not(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:NotResponse"))
		{	*type = SOAP_TYPE_ns__NotResponse;
			return soap_in_ns__NotResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:And"))
		{	*type = SOAP_TYPE_ns__And;
			return soap_in_ns__And(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:AndResponse"))
		{	*type = SOAP_TYPE_ns__AndResponse;
			return soap_in_ns__AndResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Or"))
		{	*type = SOAP_TYPE_ns__Or;
			return soap_in_ns__Or(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:OrResponse"))
		{	*type = SOAP_TYPE_ns__OrResponse;
			return soap_in_ns__OrResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:dilate"))
		{	*type = SOAP_TYPE_ns__dilate;
			return soap_in_ns__dilate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:dilateResponse"))
		{	*type = SOAP_TYPE_ns__dilateResponse;
			return soap_in_ns__dilateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:erode"))
		{	*type = SOAP_TYPE_ns__erode;
			return soap_in_ns__erode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:erodeResponse"))
		{	*type = SOAP_TYPE_ns__erodeResponse;
			return soap_in_ns__erodeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:findContoursAndFillpoly"))
		{	*type = SOAP_TYPE_ns__findContoursAndFillpoly;
			return soap_in_ns__findContoursAndFillpoly(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:MatToJPG"))
		{	*type = SOAP_TYPE_ns__MatToJPG;
			return soap_in_ns__MatToJPG(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:MatToJPGResponse"))
		{	*type = SOAP_TYPE_ns__MatToJPGResponse;
			return soap_in_ns__MatToJPGResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:morphOpen"))
		{	*type = SOAP_TYPE_ns__morphOpen;
			return soap_in_ns__morphOpen(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:morphOpenResponse"))
		{	*type = SOAP_TYPE_ns__morphOpenResponse;
			return soap_in_ns__morphOpenResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:binaryThreshold"))
		{	*type = SOAP_TYPE_ns__binaryThreshold;
			return soap_in_ns__binaryThreshold(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:binaryThresholdResponse"))
		{	*type = SOAP_TYPE_ns__binaryThresholdResponse;
			return soap_in_ns__binaryThresholdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:loadMat"))
		{	*type = SOAP_TYPE_ns__loadMat;
			return soap_in_ns__loadMat(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:loadMatResponse"))
		{	*type = SOAP_TYPE_ns__loadMatResponse;
			return soap_in_ns__loadMatResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_ns__RemoveSmallCell:
		return ((ns__RemoveSmallCell *)ptr)->soap_out(soap, tag, id, "ns:RemoveSmallCell");
	case SOAP_TYPE_ns__FindContours:
		return ((ns__FindContours *)ptr)->soap_out(soap, tag, id, "ns:FindContours");
	case SOAP_TYPE_ns__scanningCell:
		return soap_out_ns__scanningCell(soap, tag, id, (const struct ns__scanningCell *)ptr, "ns:scanningCell");
	case SOAP_TYPE_ns__scanningCellResponse:
		return soap_out_ns__scanningCellResponse(soap, tag, id, (const struct ns__scanningCellResponse *)ptr, "ns:scanningCellResponse");
	case SOAP_TYPE_ns__removeSmallCell:
		return soap_out_ns__removeSmallCell(soap, tag, id, (const struct ns__removeSmallCell *)ptr, "ns:removeSmallCell");
	case SOAP_TYPE_ns__Not:
		return soap_out_ns__Not(soap, tag, id, (const struct ns__Not *)ptr, "ns:Not");
	case SOAP_TYPE_ns__NotResponse:
		return soap_out_ns__NotResponse(soap, tag, id, (const struct ns__NotResponse *)ptr, "ns:NotResponse");
	case SOAP_TYPE_ns__And:
		return soap_out_ns__And(soap, tag, id, (const struct ns__And *)ptr, "ns:And");
	case SOAP_TYPE_ns__AndResponse:
		return soap_out_ns__AndResponse(soap, tag, id, (const struct ns__AndResponse *)ptr, "ns:AndResponse");
	case SOAP_TYPE_ns__Or:
		return soap_out_ns__Or(soap, tag, id, (const struct ns__Or *)ptr, "ns:Or");
	case SOAP_TYPE_ns__OrResponse:
		return soap_out_ns__OrResponse(soap, tag, id, (const struct ns__OrResponse *)ptr, "ns:OrResponse");
	case SOAP_TYPE_ns__dilate:
		return soap_out_ns__dilate(soap, tag, id, (const struct ns__dilate *)ptr, "ns:dilate");
	case SOAP_TYPE_ns__dilateResponse:
		return soap_out_ns__dilateResponse(soap, tag, id, (const struct ns__dilateResponse *)ptr, "ns:dilateResponse");
	case SOAP_TYPE_ns__erode:
		return soap_out_ns__erode(soap, tag, id, (const struct ns__erode *)ptr, "ns:erode");
	case SOAP_TYPE_ns__erodeResponse:
		return soap_out_ns__erodeResponse(soap, tag, id, (const struct ns__erodeResponse *)ptr, "ns:erodeResponse");
	case SOAP_TYPE_ns__findContoursAndFillpoly:
		return soap_out_ns__findContoursAndFillpoly(soap, tag, id, (const struct ns__findContoursAndFillpoly *)ptr, "ns:findContoursAndFillpoly");
	case SOAP_TYPE_ns__MatToJPG:
		return soap_out_ns__MatToJPG(soap, tag, id, (const struct ns__MatToJPG *)ptr, "ns:MatToJPG");
	case SOAP_TYPE_ns__MatToJPGResponse:
		return soap_out_ns__MatToJPGResponse(soap, tag, id, (const struct ns__MatToJPGResponse *)ptr, "ns:MatToJPGResponse");
	case SOAP_TYPE_ns__morphOpen:
		return soap_out_ns__morphOpen(soap, tag, id, (const struct ns__morphOpen *)ptr, "ns:morphOpen");
	case SOAP_TYPE_ns__morphOpenResponse:
		return soap_out_ns__morphOpenResponse(soap, tag, id, (const struct ns__morphOpenResponse *)ptr, "ns:morphOpenResponse");
	case SOAP_TYPE_ns__binaryThreshold:
		return soap_out_ns__binaryThreshold(soap, tag, id, (const struct ns__binaryThreshold *)ptr, "ns:binaryThreshold");
	case SOAP_TYPE_ns__binaryThresholdResponse:
		return soap_out_ns__binaryThresholdResponse(soap, tag, id, (const struct ns__binaryThresholdResponse *)ptr, "ns:binaryThresholdResponse");
	case SOAP_TYPE_ns__loadMat:
		return soap_out_ns__loadMat(soap, tag, id, (const struct ns__loadMat *)ptr, "ns:loadMat");
	case SOAP_TYPE_ns__loadMatResponse:
		return soap_out_ns__loadMatResponse(soap, tag, id, (const struct ns__loadMatResponse *)ptr, "ns:loadMatResponse");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__RemoveSmallCell:
		((ns__RemoveSmallCell *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__FindContours:
		((ns__FindContours *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__scanningCell:
		soap_serialize_ns__scanningCell(soap, (const struct ns__scanningCell *)ptr);
		break;
	case SOAP_TYPE_ns__scanningCellResponse:
		soap_serialize_ns__scanningCellResponse(soap, (const struct ns__scanningCellResponse *)ptr);
		break;
	case SOAP_TYPE_ns__removeSmallCell:
		soap_serialize_ns__removeSmallCell(soap, (const struct ns__removeSmallCell *)ptr);
		break;
	case SOAP_TYPE_ns__Not:
		soap_serialize_ns__Not(soap, (const struct ns__Not *)ptr);
		break;
	case SOAP_TYPE_ns__NotResponse:
		soap_serialize_ns__NotResponse(soap, (const struct ns__NotResponse *)ptr);
		break;
	case SOAP_TYPE_ns__And:
		soap_serialize_ns__And(soap, (const struct ns__And *)ptr);
		break;
	case SOAP_TYPE_ns__AndResponse:
		soap_serialize_ns__AndResponse(soap, (const struct ns__AndResponse *)ptr);
		break;
	case SOAP_TYPE_ns__Or:
		soap_serialize_ns__Or(soap, (const struct ns__Or *)ptr);
		break;
	case SOAP_TYPE_ns__OrResponse:
		soap_serialize_ns__OrResponse(soap, (const struct ns__OrResponse *)ptr);
		break;
	case SOAP_TYPE_ns__dilate:
		soap_serialize_ns__dilate(soap, (const struct ns__dilate *)ptr);
		break;
	case SOAP_TYPE_ns__dilateResponse:
		soap_serialize_ns__dilateResponse(soap, (const struct ns__dilateResponse *)ptr);
		break;
	case SOAP_TYPE_ns__erode:
		soap_serialize_ns__erode(soap, (const struct ns__erode *)ptr);
		break;
	case SOAP_TYPE_ns__erodeResponse:
		soap_serialize_ns__erodeResponse(soap, (const struct ns__erodeResponse *)ptr);
		break;
	case SOAP_TYPE_ns__findContoursAndFillpoly:
		soap_serialize_ns__findContoursAndFillpoly(soap, (const struct ns__findContoursAndFillpoly *)ptr);
		break;
	case SOAP_TYPE_ns__MatToJPG:
		soap_serialize_ns__MatToJPG(soap, (const struct ns__MatToJPG *)ptr);
		break;
	case SOAP_TYPE_ns__MatToJPGResponse:
		soap_serialize_ns__MatToJPGResponse(soap, (const struct ns__MatToJPGResponse *)ptr);
		break;
	case SOAP_TYPE_ns__morphOpen:
		soap_serialize_ns__morphOpen(soap, (const struct ns__morphOpen *)ptr);
		break;
	case SOAP_TYPE_ns__morphOpenResponse:
		soap_serialize_ns__morphOpenResponse(soap, (const struct ns__morphOpenResponse *)ptr);
		break;
	case SOAP_TYPE_ns__binaryThreshold:
		soap_serialize_ns__binaryThreshold(soap, (const struct ns__binaryThreshold *)ptr);
		break;
	case SOAP_TYPE_ns__binaryThresholdResponse:
		soap_serialize_ns__binaryThresholdResponse(soap, (const struct ns__binaryThresholdResponse *)ptr);
		break;
	case SOAP_TYPE_ns__loadMat:
		soap_serialize_ns__loadMat(soap, (const struct ns__loadMat *)ptr);
		break;
	case SOAP_TYPE_ns__loadMatResponse:
		soap_serialize_ns__loadMatResponse(soap, (const struct ns__loadMatResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_ns__FindContours:
		return (void*)soap_instantiate_ns__FindContours(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__RemoveSmallCell:
		return (void*)soap_instantiate_ns__RemoveSmallCell(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__loadMatResponse:
		return (void*)soap_instantiate_ns__loadMatResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__loadMat:
		return (void*)soap_instantiate_ns__loadMat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__binaryThresholdResponse:
		return (void*)soap_instantiate_ns__binaryThresholdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__binaryThreshold:
		return (void*)soap_instantiate_ns__binaryThreshold(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__morphOpenResponse:
		return (void*)soap_instantiate_ns__morphOpenResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__morphOpen:
		return (void*)soap_instantiate_ns__morphOpen(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__MatToJPGResponse:
		return (void*)soap_instantiate_ns__MatToJPGResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__MatToJPG:
		return (void*)soap_instantiate_ns__MatToJPG(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__findContoursAndFillpoly:
		return (void*)soap_instantiate_ns__findContoursAndFillpoly(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__erodeResponse:
		return (void*)soap_instantiate_ns__erodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__erode:
		return (void*)soap_instantiate_ns__erode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__dilateResponse:
		return (void*)soap_instantiate_ns__dilateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__dilate:
		return (void*)soap_instantiate_ns__dilate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__OrResponse:
		return (void*)soap_instantiate_ns__OrResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Or:
		return (void*)soap_instantiate_ns__Or(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__AndResponse:
		return (void*)soap_instantiate_ns__AndResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__And:
		return (void*)soap_instantiate_ns__And(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__NotResponse:
		return (void*)soap_instantiate_ns__NotResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__Not:
		return (void*)soap_instantiate_ns__Not(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__removeSmallCell:
		return (void*)soap_instantiate_ns__removeSmallCell(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__scanningCellResponse:
		return (void*)soap_instantiate_ns__scanningCellResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__scanningCell:
		return (void*)soap_instantiate_ns__scanningCell(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns__FindContours:
		if (p->size < 0)
			SOAP_DELETE((ns__FindContours*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__FindContours*)p->ptr);
		break;
	case SOAP_TYPE_ns__RemoveSmallCell:
		if (p->size < 0)
			SOAP_DELETE((ns__RemoveSmallCell*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__RemoveSmallCell*)p->ptr);
		break;
	case SOAP_TYPE_ns__loadMatResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__loadMatResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__loadMatResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__loadMat:
		if (p->size < 0)
			SOAP_DELETE((struct ns__loadMat*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__loadMat*)p->ptr);
		break;
	case SOAP_TYPE_ns__binaryThresholdResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__binaryThresholdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__binaryThresholdResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__binaryThreshold:
		if (p->size < 0)
			SOAP_DELETE((struct ns__binaryThreshold*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__binaryThreshold*)p->ptr);
		break;
	case SOAP_TYPE_ns__morphOpenResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__morphOpenResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__morphOpenResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__morphOpen:
		if (p->size < 0)
			SOAP_DELETE((struct ns__morphOpen*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__morphOpen*)p->ptr);
		break;
	case SOAP_TYPE_ns__MatToJPGResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__MatToJPGResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__MatToJPGResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__MatToJPG:
		if (p->size < 0)
			SOAP_DELETE((struct ns__MatToJPG*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__MatToJPG*)p->ptr);
		break;
	case SOAP_TYPE_ns__findContoursAndFillpoly:
		if (p->size < 0)
			SOAP_DELETE((struct ns__findContoursAndFillpoly*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__findContoursAndFillpoly*)p->ptr);
		break;
	case SOAP_TYPE_ns__erodeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__erodeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__erodeResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__erode:
		if (p->size < 0)
			SOAP_DELETE((struct ns__erode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__erode*)p->ptr);
		break;
	case SOAP_TYPE_ns__dilateResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__dilateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__dilateResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__dilate:
		if (p->size < 0)
			SOAP_DELETE((struct ns__dilate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__dilate*)p->ptr);
		break;
	case SOAP_TYPE_ns__OrResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__OrResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__OrResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Or:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Or*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Or*)p->ptr);
		break;
	case SOAP_TYPE_ns__AndResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__AndResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__AndResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__And:
		if (p->size < 0)
			SOAP_DELETE((struct ns__And*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__And*)p->ptr);
		break;
	case SOAP_TYPE_ns__NotResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__NotResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__NotResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__Not:
		if (p->size < 0)
			SOAP_DELETE((struct ns__Not*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__Not*)p->ptr);
		break;
	case SOAP_TYPE_ns__removeSmallCell:
		if (p->size < 0)
			SOAP_DELETE((struct ns__removeSmallCell*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__removeSmallCell*)p->ptr);
		break;
	case SOAP_TYPE_ns__scanningCellResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__scanningCellResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__scanningCellResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__scanningCell:
		if (p->size < 0)
			SOAP_DELETE((struct ns__scanningCell*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__scanningCell*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns__RemoveSmallCell::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_string(soap, &this->ns__RemoveSmallCell::keepedArea);
	soap_default_string(soap, &this->ns__RemoveSmallCell::biggerArea);
}

void ns__RemoveSmallCell::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns__RemoveSmallCell::keepedArea);
	soap_serialize_string(soap, &this->ns__RemoveSmallCell::biggerArea);
}

int ns__RemoveSmallCell::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__RemoveSmallCell(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RemoveSmallCell(struct soap *soap, const char *tag, int id, const ns__RemoveSmallCell *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__RemoveSmallCell), type))
		return soap->error;
	if (soap_out_string(soap, "keepedArea", -1, &(a->ns__RemoveSmallCell::keepedArea), ""))
		return soap->error;
	if (soap_out_string(soap, "biggerArea", -1, &(a->ns__RemoveSmallCell::biggerArea), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__RemoveSmallCell::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__RemoveSmallCell(soap, tag, this, type);
}

SOAP_FMAC3 ns__RemoveSmallCell * SOAP_FMAC4 soap_in_ns__RemoveSmallCell(struct soap *soap, const char *tag, ns__RemoveSmallCell *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__RemoveSmallCell *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__RemoveSmallCell, sizeof(ns__RemoveSmallCell), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__RemoveSmallCell)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__RemoveSmallCell *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_keepedArea1 = 1;
	size_t soap_flag_biggerArea1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_keepedArea1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "keepedArea", &(a->ns__RemoveSmallCell::keepedArea), "xsd:string"))
				{	soap_flag_keepedArea1--;
					continue;
				}
			if (soap_flag_biggerArea1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "biggerArea", &(a->ns__RemoveSmallCell::biggerArea), "xsd:string"))
				{	soap_flag_biggerArea1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__RemoveSmallCell *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__RemoveSmallCell, 0, sizeof(ns__RemoveSmallCell), 0, soap_copy_ns__RemoveSmallCell);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns__RemoveSmallCell::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__RemoveSmallCell);
	if (this->soap_out(soap, tag?tag:"ns:RemoveSmallCell", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__RemoveSmallCell::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__RemoveSmallCell(soap, this, tag, type);
}

SOAP_FMAC3 ns__RemoveSmallCell * SOAP_FMAC4 soap_get_ns__RemoveSmallCell(struct soap *soap, ns__RemoveSmallCell *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__RemoveSmallCell(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__RemoveSmallCell * SOAP_FMAC2 soap_instantiate_ns__RemoveSmallCell(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__RemoveSmallCell(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__RemoveSmallCell, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__RemoveSmallCell);
		if (size)
			*size = sizeof(ns__RemoveSmallCell);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__RemoveSmallCell[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__RemoveSmallCell);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__RemoveSmallCell*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__RemoveSmallCell(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__RemoveSmallCell %p -> %p\n", q, p));
	*(ns__RemoveSmallCell*)p = *(ns__RemoveSmallCell*)q;
}

void ns__FindContours::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_string(soap, &this->ns__FindContours::smallerArea);
	soap_default_string(soap, &this->ns__FindContours::biggerArea);
}

void ns__FindContours::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns__FindContours::smallerArea);
	soap_serialize_string(soap, &this->ns__FindContours::biggerArea);
}

int ns__FindContours::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__FindContours(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__FindContours(struct soap *soap, const char *tag, int id, const ns__FindContours *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__FindContours), type))
		return soap->error;
	if (soap_out_string(soap, "smallerArea", -1, &(a->ns__FindContours::smallerArea), ""))
		return soap->error;
	if (soap_out_string(soap, "biggerArea", -1, &(a->ns__FindContours::biggerArea), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__FindContours::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__FindContours(soap, tag, this, type);
}

SOAP_FMAC3 ns__FindContours * SOAP_FMAC4 soap_in_ns__FindContours(struct soap *soap, const char *tag, ns__FindContours *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__FindContours *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__FindContours, sizeof(ns__FindContours), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__FindContours)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__FindContours *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_smallerArea1 = 1;
	size_t soap_flag_biggerArea1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_smallerArea1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "smallerArea", &(a->ns__FindContours::smallerArea), "xsd:string"))
				{	soap_flag_smallerArea1--;
					continue;
				}
			if (soap_flag_biggerArea1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "biggerArea", &(a->ns__FindContours::biggerArea), "xsd:string"))
				{	soap_flag_biggerArea1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__FindContours *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__FindContours, 0, sizeof(ns__FindContours), 0, soap_copy_ns__FindContours);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns__FindContours::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__FindContours);
	if (this->soap_out(soap, tag?tag:"ns:FindContours", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__FindContours::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__FindContours(soap, this, tag, type);
}

SOAP_FMAC3 ns__FindContours * SOAP_FMAC4 soap_get_ns__FindContours(struct soap *soap, ns__FindContours *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__FindContours(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__FindContours * SOAP_FMAC2 soap_instantiate_ns__FindContours(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__FindContours(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__FindContours, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__FindContours);
		if (size)
			*size = sizeof(ns__FindContours);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__FindContours[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__FindContours);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__FindContours*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__FindContours(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__FindContours %p -> %p\n", q, p));
	*(ns__FindContours*)p = *(ns__FindContours*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__scanningCell(struct soap *soap, struct ns__scanningCell *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->inputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__scanningCell(struct soap *soap, const struct ns__scanningCell *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->inputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__scanningCell(struct soap *soap, const char *tag, int id, const struct ns__scanningCell *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__scanningCell), type))
		return soap->error;
	if (soap_out_string(soap, "inputMatFilename", -1, &a->inputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__scanningCell * SOAP_FMAC4 soap_in_ns__scanningCell(struct soap *soap, const char *tag, struct ns__scanningCell *a, const char *type)
{
	size_t soap_flag_inputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__scanningCell *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__scanningCell, sizeof(struct ns__scanningCell), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__scanningCell(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_inputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "inputMatFilename", &a->inputMatFilename, "xsd:string"))
				{	soap_flag_inputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__scanningCell *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__scanningCell, 0, sizeof(struct ns__scanningCell), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__scanningCell(struct soap *soap, const struct ns__scanningCell *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__scanningCell);
	if (soap_out_ns__scanningCell(soap, tag?tag:"ns:scanningCell", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__scanningCell * SOAP_FMAC4 soap_get_ns__scanningCell(struct soap *soap, struct ns__scanningCell *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__scanningCell(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__scanningCell * SOAP_FMAC2 soap_instantiate_ns__scanningCell(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__scanningCell(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__scanningCell, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__scanningCell);
		if (size)
			*size = sizeof(struct ns__scanningCell);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__scanningCell[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__scanningCell);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__scanningCell*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__scanningCell(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__scanningCell %p -> %p\n", q, p));
	*(struct ns__scanningCell*)p = *(struct ns__scanningCell*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__scanningCellResponse(struct soap *soap, struct ns__scanningCellResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->outputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__scanningCellResponse(struct soap *soap, const struct ns__scanningCellResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->outputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__scanningCellResponse(struct soap *soap, const char *tag, int id, const struct ns__scanningCellResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__scanningCellResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "outputMatFilename", -1, &a->outputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__scanningCellResponse * SOAP_FMAC4 soap_in_ns__scanningCellResponse(struct soap *soap, const char *tag, struct ns__scanningCellResponse *a, const char *type)
{
	size_t soap_flag_outputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__scanningCellResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__scanningCellResponse, sizeof(struct ns__scanningCellResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__scanningCellResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_outputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "outputMatFilename", &a->outputMatFilename, "xsd:string"))
				{	soap_flag_outputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__scanningCellResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__scanningCellResponse, 0, sizeof(struct ns__scanningCellResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__scanningCellResponse(struct soap *soap, const struct ns__scanningCellResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__scanningCellResponse);
	if (soap_out_ns__scanningCellResponse(soap, tag?tag:"ns:scanningCellResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__scanningCellResponse * SOAP_FMAC4 soap_get_ns__scanningCellResponse(struct soap *soap, struct ns__scanningCellResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__scanningCellResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__scanningCellResponse * SOAP_FMAC2 soap_instantiate_ns__scanningCellResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__scanningCellResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__scanningCellResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__scanningCellResponse);
		if (size)
			*size = sizeof(struct ns__scanningCellResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__scanningCellResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__scanningCellResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__scanningCellResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__scanningCellResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__scanningCellResponse %p -> %p\n", q, p));
	*(struct ns__scanningCellResponse*)p = *(struct ns__scanningCellResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeSmallCell(struct soap *soap, struct ns__removeSmallCell *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->inputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeSmallCell(struct soap *soap, const struct ns__removeSmallCell *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->inputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeSmallCell(struct soap *soap, const char *tag, int id, const struct ns__removeSmallCell *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__removeSmallCell), type))
		return soap->error;
	if (soap_out_string(soap, "inputMatFilename", -1, &a->inputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__removeSmallCell * SOAP_FMAC4 soap_in_ns__removeSmallCell(struct soap *soap, const char *tag, struct ns__removeSmallCell *a, const char *type)
{
	size_t soap_flag_inputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__removeSmallCell *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__removeSmallCell, sizeof(struct ns__removeSmallCell), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__removeSmallCell(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_inputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "inputMatFilename", &a->inputMatFilename, "xsd:string"))
				{	soap_flag_inputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__removeSmallCell *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__removeSmallCell, 0, sizeof(struct ns__removeSmallCell), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeSmallCell(struct soap *soap, const struct ns__removeSmallCell *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__removeSmallCell);
	if (soap_out_ns__removeSmallCell(soap, tag?tag:"ns:removeSmallCell", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__removeSmallCell * SOAP_FMAC4 soap_get_ns__removeSmallCell(struct soap *soap, struct ns__removeSmallCell *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__removeSmallCell(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__removeSmallCell * SOAP_FMAC2 soap_instantiate_ns__removeSmallCell(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__removeSmallCell(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__removeSmallCell, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__removeSmallCell);
		if (size)
			*size = sizeof(struct ns__removeSmallCell);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__removeSmallCell[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__removeSmallCell);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__removeSmallCell*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeSmallCell(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__removeSmallCell %p -> %p\n", q, p));
	*(struct ns__removeSmallCell*)p = *(struct ns__removeSmallCell*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Not(struct soap *soap, struct ns__Not *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->src);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Not(struct soap *soap, const struct ns__Not *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->src);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Not(struct soap *soap, const char *tag, int id, const struct ns__Not *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Not), type))
		return soap->error;
	if (soap_out_string(soap, "src", -1, &a->src, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Not * SOAP_FMAC4 soap_in_ns__Not(struct soap *soap, const char *tag, struct ns__Not *a, const char *type)
{
	size_t soap_flag_src = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Not *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Not, sizeof(struct ns__Not), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__Not(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "src", &a->src, "xsd:string"))
				{	soap_flag_src--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Not *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Not, 0, sizeof(struct ns__Not), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Not(struct soap *soap, const struct ns__Not *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Not);
	if (soap_out_ns__Not(soap, tag?tag:"ns:Not", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Not * SOAP_FMAC4 soap_get_ns__Not(struct soap *soap, struct ns__Not *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Not(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Not * SOAP_FMAC2 soap_instantiate_ns__Not(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Not(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Not, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Not);
		if (size)
			*size = sizeof(struct ns__Not);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Not[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__Not);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__Not*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Not(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Not %p -> %p\n", q, p));
	*(struct ns__Not*)p = *(struct ns__Not*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__NotResponse(struct soap *soap, struct ns__NotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__NotResponse(struct soap *soap, const struct ns__NotResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__NotResponse(struct soap *soap, const char *tag, int id, const struct ns__NotResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__NotResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__NotResponse * SOAP_FMAC4 soap_in_ns__NotResponse(struct soap *soap, const char *tag, struct ns__NotResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__NotResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__NotResponse, sizeof(struct ns__NotResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__NotResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__NotResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__NotResponse, 0, sizeof(struct ns__NotResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__NotResponse(struct soap *soap, const struct ns__NotResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__NotResponse);
	if (soap_out_ns__NotResponse(soap, tag?tag:"ns:NotResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__NotResponse * SOAP_FMAC4 soap_get_ns__NotResponse(struct soap *soap, struct ns__NotResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__NotResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__NotResponse * SOAP_FMAC2 soap_instantiate_ns__NotResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__NotResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__NotResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__NotResponse);
		if (size)
			*size = sizeof(struct ns__NotResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__NotResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__NotResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__NotResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__NotResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__NotResponse %p -> %p\n", q, p));
	*(struct ns__NotResponse*)p = *(struct ns__NotResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__And(struct soap *soap, struct ns__And *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->src1);
	soap_default_string(soap, &a->src2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__And(struct soap *soap, const struct ns__And *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->src1);
	soap_serialize_string(soap, &a->src2);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__And(struct soap *soap, const char *tag, int id, const struct ns__And *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__And), type))
		return soap->error;
	if (soap_out_string(soap, "src1", -1, &a->src1, ""))
		return soap->error;
	if (soap_out_string(soap, "src2", -1, &a->src2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__And * SOAP_FMAC4 soap_in_ns__And(struct soap *soap, const char *tag, struct ns__And *a, const char *type)
{
	size_t soap_flag_src1 = 1;
	size_t soap_flag_src2 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__And *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__And, sizeof(struct ns__And), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__And(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "src1", &a->src1, "xsd:string"))
				{	soap_flag_src1--;
					continue;
				}
			if (soap_flag_src2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "src2", &a->src2, "xsd:string"))
				{	soap_flag_src2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__And *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__And, 0, sizeof(struct ns__And), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__And(struct soap *soap, const struct ns__And *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__And);
	if (soap_out_ns__And(soap, tag?tag:"ns:And", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__And * SOAP_FMAC4 soap_get_ns__And(struct soap *soap, struct ns__And *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__And(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__And * SOAP_FMAC2 soap_instantiate_ns__And(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__And(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__And, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__And);
		if (size)
			*size = sizeof(struct ns__And);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__And[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__And);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__And*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__And(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__And %p -> %p\n", q, p));
	*(struct ns__And*)p = *(struct ns__And*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AndResponse(struct soap *soap, struct ns__AndResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AndResponse(struct soap *soap, const struct ns__AndResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AndResponse(struct soap *soap, const char *tag, int id, const struct ns__AndResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__AndResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__AndResponse * SOAP_FMAC4 soap_in_ns__AndResponse(struct soap *soap, const char *tag, struct ns__AndResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__AndResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__AndResponse, sizeof(struct ns__AndResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__AndResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__AndResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__AndResponse, 0, sizeof(struct ns__AndResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AndResponse(struct soap *soap, const struct ns__AndResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__AndResponse);
	if (soap_out_ns__AndResponse(soap, tag?tag:"ns:AndResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__AndResponse * SOAP_FMAC4 soap_get_ns__AndResponse(struct soap *soap, struct ns__AndResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__AndResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__AndResponse * SOAP_FMAC2 soap_instantiate_ns__AndResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__AndResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__AndResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AndResponse);
		if (size)
			*size = sizeof(struct ns__AndResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__AndResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__AndResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__AndResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__AndResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__AndResponse %p -> %p\n", q, p));
	*(struct ns__AndResponse*)p = *(struct ns__AndResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Or(struct soap *soap, struct ns__Or *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->src1);
	soap_default_string(soap, &a->src2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Or(struct soap *soap, const struct ns__Or *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->src1);
	soap_serialize_string(soap, &a->src2);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Or(struct soap *soap, const char *tag, int id, const struct ns__Or *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__Or), type))
		return soap->error;
	if (soap_out_string(soap, "src1", -1, &a->src1, ""))
		return soap->error;
	if (soap_out_string(soap, "src2", -1, &a->src2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__Or * SOAP_FMAC4 soap_in_ns__Or(struct soap *soap, const char *tag, struct ns__Or *a, const char *type)
{
	size_t soap_flag_src1 = 1;
	size_t soap_flag_src2 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__Or *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Or, sizeof(struct ns__Or), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__Or(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "src1", &a->src1, "xsd:string"))
				{	soap_flag_src1--;
					continue;
				}
			if (soap_flag_src2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "src2", &a->src2, "xsd:string"))
				{	soap_flag_src2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__Or *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Or, 0, sizeof(struct ns__Or), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Or(struct soap *soap, const struct ns__Or *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__Or);
	if (soap_out_ns__Or(soap, tag?tag:"ns:Or", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__Or * SOAP_FMAC4 soap_get_ns__Or(struct soap *soap, struct ns__Or *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Or(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__Or * SOAP_FMAC2 soap_instantiate_ns__Or(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Or(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Or, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Or);
		if (size)
			*size = sizeof(struct ns__Or);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__Or[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__Or);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__Or*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Or(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__Or %p -> %p\n", q, p));
	*(struct ns__Or*)p = *(struct ns__Or*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__OrResponse(struct soap *soap, struct ns__OrResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__OrResponse(struct soap *soap, const struct ns__OrResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__OrResponse(struct soap *soap, const char *tag, int id, const struct ns__OrResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__OrResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__OrResponse * SOAP_FMAC4 soap_in_ns__OrResponse(struct soap *soap, const char *tag, struct ns__OrResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__OrResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__OrResponse, sizeof(struct ns__OrResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__OrResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__OrResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__OrResponse, 0, sizeof(struct ns__OrResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__OrResponse(struct soap *soap, const struct ns__OrResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__OrResponse);
	if (soap_out_ns__OrResponse(soap, tag?tag:"ns:OrResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__OrResponse * SOAP_FMAC4 soap_get_ns__OrResponse(struct soap *soap, struct ns__OrResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__OrResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__OrResponse * SOAP_FMAC2 soap_instantiate_ns__OrResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__OrResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__OrResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__OrResponse);
		if (size)
			*size = sizeof(struct ns__OrResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__OrResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__OrResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__OrResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__OrResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__OrResponse %p -> %p\n", q, p));
	*(struct ns__OrResponse*)p = *(struct ns__OrResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__dilate(struct soap *soap, struct ns__dilate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->src);
	soap_default_string(soap, &a->element);
	a->iteration = 1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__dilate(struct soap *soap, const struct ns__dilate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->src);
	soap_serialize_string(soap, &a->element);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__dilate(struct soap *soap, const char *tag, int id, const struct ns__dilate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__dilate), type))
		return soap->error;
	if (soap_out_string(soap, "src", -1, &a->src, ""))
		return soap->error;
	if (soap_out_string(soap, "element", -1, &a->element, ""))
		return soap->error;
	if (soap_out_int(soap, "iteration", -1, &a->iteration, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__dilate * SOAP_FMAC4 soap_in_ns__dilate(struct soap *soap, const char *tag, struct ns__dilate *a, const char *type)
{
	size_t soap_flag_src = 1;
	size_t soap_flag_element = 1;
	size_t soap_flag_iteration = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__dilate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__dilate, sizeof(struct ns__dilate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__dilate(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "src", &a->src, "xsd:string"))
				{	soap_flag_src--;
					continue;
				}
			if (soap_flag_element && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "element", &a->element, "xsd:string"))
				{	soap_flag_element--;
					continue;
				}
			if (soap_flag_iteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "iteration", &a->iteration, "xsd:int"))
				{	soap_flag_iteration--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__dilate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__dilate, 0, sizeof(struct ns__dilate), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__dilate(struct soap *soap, const struct ns__dilate *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__dilate);
	if (soap_out_ns__dilate(soap, tag?tag:"ns:dilate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__dilate * SOAP_FMAC4 soap_get_ns__dilate(struct soap *soap, struct ns__dilate *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__dilate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__dilate * SOAP_FMAC2 soap_instantiate_ns__dilate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__dilate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__dilate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__dilate);
		if (size)
			*size = sizeof(struct ns__dilate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__dilate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__dilate);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__dilate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__dilate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__dilate %p -> %p\n", q, p));
	*(struct ns__dilate*)p = *(struct ns__dilate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__dilateResponse(struct soap *soap, struct ns__dilateResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__dilateResponse(struct soap *soap, const struct ns__dilateResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__dilateResponse(struct soap *soap, const char *tag, int id, const struct ns__dilateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__dilateResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__dilateResponse * SOAP_FMAC4 soap_in_ns__dilateResponse(struct soap *soap, const char *tag, struct ns__dilateResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__dilateResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__dilateResponse, sizeof(struct ns__dilateResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__dilateResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__dilateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__dilateResponse, 0, sizeof(struct ns__dilateResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__dilateResponse(struct soap *soap, const struct ns__dilateResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__dilateResponse);
	if (soap_out_ns__dilateResponse(soap, tag?tag:"ns:dilateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__dilateResponse * SOAP_FMAC4 soap_get_ns__dilateResponse(struct soap *soap, struct ns__dilateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__dilateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__dilateResponse * SOAP_FMAC2 soap_instantiate_ns__dilateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__dilateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__dilateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__dilateResponse);
		if (size)
			*size = sizeof(struct ns__dilateResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__dilateResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__dilateResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__dilateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__dilateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__dilateResponse %p -> %p\n", q, p));
	*(struct ns__dilateResponse*)p = *(struct ns__dilateResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__erode(struct soap *soap, struct ns__erode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->src);
	soap_default_string(soap, &a->element);
	a->iteration = 1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__erode(struct soap *soap, const struct ns__erode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->src);
	soap_serialize_string(soap, &a->element);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__erode(struct soap *soap, const char *tag, int id, const struct ns__erode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__erode), type))
		return soap->error;
	if (soap_out_string(soap, "src", -1, &a->src, ""))
		return soap->error;
	if (soap_out_string(soap, "element", -1, &a->element, ""))
		return soap->error;
	if (soap_out_int(soap, "iteration", -1, &a->iteration, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__erode * SOAP_FMAC4 soap_in_ns__erode(struct soap *soap, const char *tag, struct ns__erode *a, const char *type)
{
	size_t soap_flag_src = 1;
	size_t soap_flag_element = 1;
	size_t soap_flag_iteration = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__erode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__erode, sizeof(struct ns__erode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__erode(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_src && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "src", &a->src, "xsd:string"))
				{	soap_flag_src--;
					continue;
				}
			if (soap_flag_element && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "element", &a->element, "xsd:string"))
				{	soap_flag_element--;
					continue;
				}
			if (soap_flag_iteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "iteration", &a->iteration, "xsd:int"))
				{	soap_flag_iteration--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__erode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__erode, 0, sizeof(struct ns__erode), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__erode(struct soap *soap, const struct ns__erode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__erode);
	if (soap_out_ns__erode(soap, tag?tag:"ns:erode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__erode * SOAP_FMAC4 soap_get_ns__erode(struct soap *soap, struct ns__erode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__erode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__erode * SOAP_FMAC2 soap_instantiate_ns__erode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__erode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__erode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__erode);
		if (size)
			*size = sizeof(struct ns__erode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__erode[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__erode);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__erode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__erode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__erode %p -> %p\n", q, p));
	*(struct ns__erode*)p = *(struct ns__erode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__erodeResponse(struct soap *soap, struct ns__erodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__erodeResponse(struct soap *soap, const struct ns__erodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__erodeResponse(struct soap *soap, const char *tag, int id, const struct ns__erodeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__erodeResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__erodeResponse * SOAP_FMAC4 soap_in_ns__erodeResponse(struct soap *soap, const char *tag, struct ns__erodeResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__erodeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__erodeResponse, sizeof(struct ns__erodeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__erodeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__erodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__erodeResponse, 0, sizeof(struct ns__erodeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__erodeResponse(struct soap *soap, const struct ns__erodeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__erodeResponse);
	if (soap_out_ns__erodeResponse(soap, tag?tag:"ns:erodeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__erodeResponse * SOAP_FMAC4 soap_get_ns__erodeResponse(struct soap *soap, struct ns__erodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__erodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__erodeResponse * SOAP_FMAC2 soap_instantiate_ns__erodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__erodeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__erodeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__erodeResponse);
		if (size)
			*size = sizeof(struct ns__erodeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__erodeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__erodeResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__erodeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__erodeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__erodeResponse %p -> %p\n", q, p));
	*(struct ns__erodeResponse*)p = *(struct ns__erodeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__findContoursAndFillpoly(struct soap *soap, struct ns__findContoursAndFillpoly *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->InputMatFilename);
	soap_default_int(soap, &a->lowerBound);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__findContoursAndFillpoly(struct soap *soap, const struct ns__findContoursAndFillpoly *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__findContoursAndFillpoly(struct soap *soap, const char *tag, int id, const struct ns__findContoursAndFillpoly *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__findContoursAndFillpoly), type))
		return soap->error;
	if (soap_out_string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "lowerBound", -1, &a->lowerBound, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__findContoursAndFillpoly * SOAP_FMAC4 soap_in_ns__findContoursAndFillpoly(struct soap *soap, const char *tag, struct ns__findContoursAndFillpoly *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_lowerBound = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__findContoursAndFillpoly *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__findContoursAndFillpoly, sizeof(struct ns__findContoursAndFillpoly), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__findContoursAndFillpoly(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_lowerBound && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "lowerBound", &a->lowerBound, "xsd:int"))
				{	soap_flag_lowerBound--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__findContoursAndFillpoly *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__findContoursAndFillpoly, 0, sizeof(struct ns__findContoursAndFillpoly), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_lowerBound > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__findContoursAndFillpoly(struct soap *soap, const struct ns__findContoursAndFillpoly *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__findContoursAndFillpoly);
	if (soap_out_ns__findContoursAndFillpoly(soap, tag?tag:"ns:findContoursAndFillpoly", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__findContoursAndFillpoly * SOAP_FMAC4 soap_get_ns__findContoursAndFillpoly(struct soap *soap, struct ns__findContoursAndFillpoly *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__findContoursAndFillpoly(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__findContoursAndFillpoly * SOAP_FMAC2 soap_instantiate_ns__findContoursAndFillpoly(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__findContoursAndFillpoly(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__findContoursAndFillpoly, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__findContoursAndFillpoly);
		if (size)
			*size = sizeof(struct ns__findContoursAndFillpoly);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__findContoursAndFillpoly[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__findContoursAndFillpoly);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__findContoursAndFillpoly*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__findContoursAndFillpoly(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__findContoursAndFillpoly %p -> %p\n", q, p));
	*(struct ns__findContoursAndFillpoly*)p = *(struct ns__findContoursAndFillpoly*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__MatToJPG(struct soap *soap, struct ns__MatToJPG *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__MatToJPG(struct soap *soap, const struct ns__MatToJPG *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MatToJPG(struct soap *soap, const char *tag, int id, const struct ns__MatToJPG *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__MatToJPG), type))
		return soap->error;
	if (soap_out_string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__MatToJPG * SOAP_FMAC4 soap_in_ns__MatToJPG(struct soap *soap, const char *tag, struct ns__MatToJPG *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__MatToJPG *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__MatToJPG, sizeof(struct ns__MatToJPG), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__MatToJPG(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__MatToJPG *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__MatToJPG, 0, sizeof(struct ns__MatToJPG), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__MatToJPG(struct soap *soap, const struct ns__MatToJPG *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__MatToJPG);
	if (soap_out_ns__MatToJPG(soap, tag?tag:"ns:MatToJPG", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__MatToJPG * SOAP_FMAC4 soap_get_ns__MatToJPG(struct soap *soap, struct ns__MatToJPG *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__MatToJPG(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__MatToJPG * SOAP_FMAC2 soap_instantiate_ns__MatToJPG(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__MatToJPG(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__MatToJPG, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__MatToJPG);
		if (size)
			*size = sizeof(struct ns__MatToJPG);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__MatToJPG[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__MatToJPG);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__MatToJPG*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MatToJPG(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__MatToJPG %p -> %p\n", q, p));
	*(struct ns__MatToJPG*)p = *(struct ns__MatToJPG*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__MatToJPGResponse(struct soap *soap, struct ns__MatToJPGResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__MatToJPGResponse(struct soap *soap, const struct ns__MatToJPGResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MatToJPGResponse(struct soap *soap, const char *tag, int id, const struct ns__MatToJPGResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__MatToJPGResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__MatToJPGResponse * SOAP_FMAC4 soap_in_ns__MatToJPGResponse(struct soap *soap, const char *tag, struct ns__MatToJPGResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__MatToJPGResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__MatToJPGResponse, sizeof(struct ns__MatToJPGResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__MatToJPGResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__MatToJPGResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__MatToJPGResponse, 0, sizeof(struct ns__MatToJPGResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__MatToJPGResponse(struct soap *soap, const struct ns__MatToJPGResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__MatToJPGResponse);
	if (soap_out_ns__MatToJPGResponse(soap, tag?tag:"ns:MatToJPGResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__MatToJPGResponse * SOAP_FMAC4 soap_get_ns__MatToJPGResponse(struct soap *soap, struct ns__MatToJPGResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__MatToJPGResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__MatToJPGResponse * SOAP_FMAC2 soap_instantiate_ns__MatToJPGResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__MatToJPGResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__MatToJPGResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__MatToJPGResponse);
		if (size)
			*size = sizeof(struct ns__MatToJPGResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__MatToJPGResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__MatToJPGResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__MatToJPGResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MatToJPGResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__MatToJPGResponse %p -> %p\n", q, p));
	*(struct ns__MatToJPGResponse*)p = *(struct ns__MatToJPGResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__morphOpen(struct soap *soap, struct ns__morphOpen *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->InpuMattFilename);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__morphOpen(struct soap *soap, const struct ns__morphOpen *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->InpuMattFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__morphOpen(struct soap *soap, const char *tag, int id, const struct ns__morphOpen *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__morphOpen), type))
		return soap->error;
	if (soap_out_string(soap, "InpuMattFilename", -1, &a->InpuMattFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__morphOpen * SOAP_FMAC4 soap_in_ns__morphOpen(struct soap *soap, const char *tag, struct ns__morphOpen *a, const char *type)
{
	size_t soap_flag_InpuMattFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__morphOpen *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__morphOpen, sizeof(struct ns__morphOpen), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__morphOpen(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InpuMattFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "InpuMattFilename", &a->InpuMattFilename, "xsd:string"))
				{	soap_flag_InpuMattFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__morphOpen *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__morphOpen, 0, sizeof(struct ns__morphOpen), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__morphOpen(struct soap *soap, const struct ns__morphOpen *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__morphOpen);
	if (soap_out_ns__morphOpen(soap, tag?tag:"ns:morphOpen", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__morphOpen * SOAP_FMAC4 soap_get_ns__morphOpen(struct soap *soap, struct ns__morphOpen *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__morphOpen(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__morphOpen * SOAP_FMAC2 soap_instantiate_ns__morphOpen(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__morphOpen(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__morphOpen, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__morphOpen);
		if (size)
			*size = sizeof(struct ns__morphOpen);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__morphOpen[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__morphOpen);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__morphOpen*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__morphOpen(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__morphOpen %p -> %p\n", q, p));
	*(struct ns__morphOpen*)p = *(struct ns__morphOpen*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__morphOpenResponse(struct soap *soap, struct ns__morphOpenResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__morphOpenResponse(struct soap *soap, const struct ns__morphOpenResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__morphOpenResponse(struct soap *soap, const char *tag, int id, const struct ns__morphOpenResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__morphOpenResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__morphOpenResponse * SOAP_FMAC4 soap_in_ns__morphOpenResponse(struct soap *soap, const char *tag, struct ns__morphOpenResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__morphOpenResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__morphOpenResponse, sizeof(struct ns__morphOpenResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__morphOpenResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__morphOpenResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__morphOpenResponse, 0, sizeof(struct ns__morphOpenResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__morphOpenResponse(struct soap *soap, const struct ns__morphOpenResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__morphOpenResponse);
	if (soap_out_ns__morphOpenResponse(soap, tag?tag:"ns:morphOpenResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__morphOpenResponse * SOAP_FMAC4 soap_get_ns__morphOpenResponse(struct soap *soap, struct ns__morphOpenResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__morphOpenResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__morphOpenResponse * SOAP_FMAC2 soap_instantiate_ns__morphOpenResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__morphOpenResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__morphOpenResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__morphOpenResponse);
		if (size)
			*size = sizeof(struct ns__morphOpenResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__morphOpenResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__morphOpenResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__morphOpenResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__morphOpenResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__morphOpenResponse %p -> %p\n", q, p));
	*(struct ns__morphOpenResponse*)p = *(struct ns__morphOpenResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__binaryThreshold(struct soap *soap, struct ns__binaryThreshold *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->InputMatFilename);
	a->thresholdValue = 127.000000;
	a->maxValue = 255.000000;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__binaryThreshold(struct soap *soap, const struct ns__binaryThreshold *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->InputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__binaryThreshold(struct soap *soap, const char *tag, int id, const struct ns__binaryThreshold *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__binaryThreshold), type))
		return soap->error;
	if (soap_out_string(soap, "InputMatFilename", -1, &a->InputMatFilename, ""))
		return soap->error;
	if (soap_out_double(soap, "thresholdValue", -1, &a->thresholdValue, ""))
		return soap->error;
	if (soap_out_double(soap, "maxValue", -1, &a->maxValue, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__binaryThreshold * SOAP_FMAC4 soap_in_ns__binaryThreshold(struct soap *soap, const char *tag, struct ns__binaryThreshold *a, const char *type)
{
	size_t soap_flag_InputMatFilename = 1;
	size_t soap_flag_thresholdValue = 1;
	size_t soap_flag_maxValue = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__binaryThreshold *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__binaryThreshold, sizeof(struct ns__binaryThreshold), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__binaryThreshold(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputMatFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "InputMatFilename", &a->InputMatFilename, "xsd:string"))
				{	soap_flag_InputMatFilename--;
					continue;
				}
			if (soap_flag_thresholdValue && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "thresholdValue", &a->thresholdValue, "xsd:double"))
				{	soap_flag_thresholdValue--;
					continue;
				}
			if (soap_flag_maxValue && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "maxValue", &a->maxValue, "xsd:double"))
				{	soap_flag_maxValue--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__binaryThreshold *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__binaryThreshold, 0, sizeof(struct ns__binaryThreshold), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__binaryThreshold(struct soap *soap, const struct ns__binaryThreshold *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__binaryThreshold);
	if (soap_out_ns__binaryThreshold(soap, tag?tag:"ns:binaryThreshold", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__binaryThreshold * SOAP_FMAC4 soap_get_ns__binaryThreshold(struct soap *soap, struct ns__binaryThreshold *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__binaryThreshold(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__binaryThreshold * SOAP_FMAC2 soap_instantiate_ns__binaryThreshold(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__binaryThreshold(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__binaryThreshold, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__binaryThreshold);
		if (size)
			*size = sizeof(struct ns__binaryThreshold);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__binaryThreshold[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__binaryThreshold);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__binaryThreshold*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__binaryThreshold(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__binaryThreshold %p -> %p\n", q, p));
	*(struct ns__binaryThreshold*)p = *(struct ns__binaryThreshold*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__binaryThresholdResponse(struct soap *soap, struct ns__binaryThresholdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__binaryThresholdResponse(struct soap *soap, const struct ns__binaryThresholdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__binaryThresholdResponse(struct soap *soap, const char *tag, int id, const struct ns__binaryThresholdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__binaryThresholdResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__binaryThresholdResponse * SOAP_FMAC4 soap_in_ns__binaryThresholdResponse(struct soap *soap, const char *tag, struct ns__binaryThresholdResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__binaryThresholdResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__binaryThresholdResponse, sizeof(struct ns__binaryThresholdResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__binaryThresholdResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__binaryThresholdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__binaryThresholdResponse, 0, sizeof(struct ns__binaryThresholdResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__binaryThresholdResponse(struct soap *soap, const struct ns__binaryThresholdResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__binaryThresholdResponse);
	if (soap_out_ns__binaryThresholdResponse(soap, tag?tag:"ns:binaryThresholdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__binaryThresholdResponse * SOAP_FMAC4 soap_get_ns__binaryThresholdResponse(struct soap *soap, struct ns__binaryThresholdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__binaryThresholdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__binaryThresholdResponse * SOAP_FMAC2 soap_instantiate_ns__binaryThresholdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__binaryThresholdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__binaryThresholdResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__binaryThresholdResponse);
		if (size)
			*size = sizeof(struct ns__binaryThresholdResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__binaryThresholdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__binaryThresholdResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__binaryThresholdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__binaryThresholdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__binaryThresholdResponse %p -> %p\n", q, p));
	*(struct ns__binaryThresholdResponse*)p = *(struct ns__binaryThresholdResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__loadMat(struct soap *soap, struct ns__loadMat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->InputImageFilename);
	a->loadparam = 0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__loadMat(struct soap *soap, const struct ns__loadMat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->InputImageFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__loadMat(struct soap *soap, const char *tag, int id, const struct ns__loadMat *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__loadMat), type))
		return soap->error;
	if (soap_out_string(soap, "InputImageFilename", -1, &a->InputImageFilename, ""))
		return soap->error;
	if (soap_out_int(soap, "loadparam", -1, &a->loadparam, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__loadMat * SOAP_FMAC4 soap_in_ns__loadMat(struct soap *soap, const char *tag, struct ns__loadMat *a, const char *type)
{
	size_t soap_flag_InputImageFilename = 1;
	size_t soap_flag_loadparam = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__loadMat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__loadMat, sizeof(struct ns__loadMat), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__loadMat(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InputImageFilename && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "InputImageFilename", &a->InputImageFilename, "xsd:string"))
				{	soap_flag_InputImageFilename--;
					continue;
				}
			if (soap_flag_loadparam && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "loadparam", &a->loadparam, "xsd:int"))
				{	soap_flag_loadparam--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__loadMat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__loadMat, 0, sizeof(struct ns__loadMat), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__loadMat(struct soap *soap, const struct ns__loadMat *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__loadMat);
	if (soap_out_ns__loadMat(soap, tag?tag:"ns:loadMat", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__loadMat * SOAP_FMAC4 soap_get_ns__loadMat(struct soap *soap, struct ns__loadMat *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__loadMat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__loadMat * SOAP_FMAC2 soap_instantiate_ns__loadMat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__loadMat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__loadMat, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__loadMat);
		if (size)
			*size = sizeof(struct ns__loadMat);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__loadMat[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__loadMat);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__loadMat*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__loadMat(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__loadMat %p -> %p\n", q, p));
	*(struct ns__loadMat*)p = *(struct ns__loadMat*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__loadMatResponse(struct soap *soap, struct ns__loadMatResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->OutputMatFilename = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__loadMatResponse(struct soap *soap, const struct ns__loadMatResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTostring(soap, &a->OutputMatFilename);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__loadMatResponse(struct soap *soap, const char *tag, int id, const struct ns__loadMatResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__loadMatResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "OutputMatFilename", -1, &a->OutputMatFilename, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__loadMatResponse * SOAP_FMAC4 soap_in_ns__loadMatResponse(struct soap *soap, const char *tag, struct ns__loadMatResponse *a, const char *type)
{
	size_t soap_flag_OutputMatFilename = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__loadMatResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__loadMatResponse, sizeof(struct ns__loadMatResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__loadMatResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OutputMatFilename && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostring(soap, "OutputMatFilename", &a->OutputMatFilename, "xsd:string"))
				{	soap_flag_OutputMatFilename--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__loadMatResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__loadMatResponse, 0, sizeof(struct ns__loadMatResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__loadMatResponse(struct soap *soap, const struct ns__loadMatResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__loadMatResponse);
	if (soap_out_ns__loadMatResponse(soap, tag?tag:"ns:loadMatResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__loadMatResponse * SOAP_FMAC4 soap_get_ns__loadMatResponse(struct soap *soap, struct ns__loadMatResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__loadMatResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__loadMatResponse * SOAP_FMAC2 soap_instantiate_ns__loadMatResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__loadMatResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__loadMatResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__loadMatResponse);
		if (size)
			*size = sizeof(struct ns__loadMatResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct ns__loadMatResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__loadMatResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__loadMatResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__loadMatResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__loadMatResponse %p -> %p\n", q, p));
	*(struct ns__loadMatResponse*)p = *(struct ns__loadMatResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
