/* soapServer.cpp
   Generated by gSOAP 2.8.2 from imgProcess.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.2 2011-10-03 17:21:44 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:loadMat"))
		return soap_serve_ns__loadMat(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:binaryThreshold"))
		return soap_serve_ns__binaryThreshold(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:morphOpen"))
		return soap_serve_ns__morphOpen(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:MatToJPG"))
		return soap_serve_ns__MatToJPG(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:findContoursAndFillpoly"))
		return soap_serve_ns__findContoursAndFillpoly(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:erode"))
		return soap_serve_ns__erode(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:viewResult"))
		return soap_serve_ns__viewResult(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__loadMat(struct soap *soap)
{	struct ns__loadMat soap_tmp_ns__loadMat;
	struct ns__loadMatResponse soap_tmp_ns__loadMatResponse;
	soap_default_ns__loadMatResponse(soap, &soap_tmp_ns__loadMatResponse);
	soap_default_ns__loadMat(soap, &soap_tmp_ns__loadMat);
	soap->encodingStyle = "";
	if (!soap_get_ns__loadMat(soap, &soap_tmp_ns__loadMat, "ns:loadMat", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__loadMat(soap, soap_tmp_ns__loadMat.InputImageFilename, soap_tmp_ns__loadMat.loadparam, soap_tmp_ns__loadMatResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__loadMatResponse(soap, &soap_tmp_ns__loadMatResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__loadMatResponse(soap, &soap_tmp_ns__loadMatResponse, "ns:loadMatResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__loadMatResponse(soap, &soap_tmp_ns__loadMatResponse, "ns:loadMatResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__binaryThreshold(struct soap *soap)
{	struct ns__binaryThreshold soap_tmp_ns__binaryThreshold;
	struct ns__binaryThresholdResponse soap_tmp_ns__binaryThresholdResponse;
	soap_default_ns__binaryThresholdResponse(soap, &soap_tmp_ns__binaryThresholdResponse);
	soap_default_ns__binaryThreshold(soap, &soap_tmp_ns__binaryThreshold);
	soap->encodingStyle = "";
	if (!soap_get_ns__binaryThreshold(soap, &soap_tmp_ns__binaryThreshold, "ns:binaryThreshold", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__binaryThreshold(soap, soap_tmp_ns__binaryThreshold.InputMatFilename, soap_tmp_ns__binaryThreshold.thresholdValue, soap_tmp_ns__binaryThreshold.maxValue, soap_tmp_ns__binaryThresholdResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__binaryThresholdResponse(soap, &soap_tmp_ns__binaryThresholdResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__binaryThresholdResponse(soap, &soap_tmp_ns__binaryThresholdResponse, "ns:binaryThresholdResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__binaryThresholdResponse(soap, &soap_tmp_ns__binaryThresholdResponse, "ns:binaryThresholdResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__morphOpen(struct soap *soap)
{	struct ns__morphOpen soap_tmp_ns__morphOpen;
	struct ns__morphOpenResponse soap_tmp_ns__morphOpenResponse;
	soap_default_ns__morphOpenResponse(soap, &soap_tmp_ns__morphOpenResponse);
	soap_default_ns__morphOpen(soap, &soap_tmp_ns__morphOpen);
	soap->encodingStyle = "";
	if (!soap_get_ns__morphOpen(soap, &soap_tmp_ns__morphOpen, "ns:morphOpen", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__morphOpen(soap, soap_tmp_ns__morphOpen.InpuMattFilename, soap_tmp_ns__morphOpenResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__morphOpenResponse(soap, &soap_tmp_ns__morphOpenResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__morphOpenResponse(soap, &soap_tmp_ns__morphOpenResponse, "ns:morphOpenResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__morphOpenResponse(soap, &soap_tmp_ns__morphOpenResponse, "ns:morphOpenResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__MatToJPG(struct soap *soap)
{	struct ns__MatToJPG soap_tmp_ns__MatToJPG;
	struct ns__MatToJPGResponse soap_tmp_ns__MatToJPGResponse;
	soap_default_ns__MatToJPGResponse(soap, &soap_tmp_ns__MatToJPGResponse);
	soap_default_ns__MatToJPG(soap, &soap_tmp_ns__MatToJPG);
	soap->encodingStyle = "";
	if (!soap_get_ns__MatToJPG(soap, &soap_tmp_ns__MatToJPG, "ns:MatToJPG", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__MatToJPG(soap, soap_tmp_ns__MatToJPG.InputMatFilename, soap_tmp_ns__MatToJPGResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__MatToJPGResponse(soap, &soap_tmp_ns__MatToJPGResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__MatToJPGResponse(soap, &soap_tmp_ns__MatToJPGResponse, "ns:MatToJPGResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__MatToJPGResponse(soap, &soap_tmp_ns__MatToJPGResponse, "ns:MatToJPGResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__findContoursAndFillpoly(struct soap *soap)
{	struct ns__findContoursAndFillpoly soap_tmp_ns__findContoursAndFillpoly;
	ns__FindContours out;
	out.soap_default(soap);
	soap_default_ns__findContoursAndFillpoly(soap, &soap_tmp_ns__findContoursAndFillpoly);
	soap->encodingStyle = "";
	if (!soap_get_ns__findContoursAndFillpoly(soap, &soap_tmp_ns__findContoursAndFillpoly, "ns:findContoursAndFillpoly", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__findContoursAndFillpoly(soap, soap_tmp_ns__findContoursAndFillpoly.InputMatFilename, soap_tmp_ns__findContoursAndFillpoly.lowerBound, out);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	out.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || out.soap_put(soap, "ns:FindContours", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || out.soap_put(soap, "ns:FindContours", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__erode(struct soap *soap)
{	struct ns__erode soap_tmp_ns__erode;
	struct ns__erodeResponse soap_tmp_ns__erodeResponse;
	char * soap_tmp_string;
	soap_default_ns__erodeResponse(soap, &soap_tmp_ns__erodeResponse);
	soap_tmp_string = NULL;
	soap_tmp_ns__erodeResponse.OutputMatFilename = &soap_tmp_string;
	soap_default_ns__erode(soap, &soap_tmp_ns__erode);
	soap->encodingStyle = "";
	if (!soap_get_ns__erode(soap, &soap_tmp_ns__erode, "ns:erode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__erode(soap, soap_tmp_ns__erode.src, soap_tmp_ns__erode.element, soap_tmp_ns__erode.iteration, soap_tmp_ns__erodeResponse.OutputMatFilename);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__erodeResponse(soap, &soap_tmp_ns__erodeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__erodeResponse(soap, &soap_tmp_ns__erodeResponse, "ns:erodeResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__erodeResponse(soap, &soap_tmp_ns__erodeResponse, "ns:erodeResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__viewResult(struct soap *soap)
{	struct ns__viewResult soap_tmp_ns__viewResult;
	struct ns__signalResponse out;
	soap_default_ns__signalResponse(soap, &out);
	soap_default_ns__viewResult(soap, &soap_tmp_ns__viewResult);
	soap->encodingStyle = "";
	if (!soap_get_ns__viewResult(soap, &soap_tmp_ns__viewResult, "ns:viewResult", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__viewResult(soap, soap_tmp_ns__viewResult.src, &out);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__signalResponse(soap, &out);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__signalResponse(soap, &out, "ns:signalResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__signalResponse(soap, &out, "ns:signalResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
