/* soapimgProcessProxy.h
   Generated by gSOAP 2.7.17 from imgProcess.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapimgProcessProxy_H
#define soapimgProcessProxy_H
#include "soapH.h"
class imgProcess
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'imgProcess' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	imgProcess()
	{ soap = soap_new(); endpoint = "http://localhost/cgi-bin/imgProcessServer"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:img", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~imgProcess() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'loadMat' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__loadMat(char *InputImageFilename, int loadparam, char *&OutputMatFilename) { return soap ? soap_call_ns__loadMat(soap, endpoint, NULL, InputImageFilename, loadparam, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'binaryThreshold' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__binaryThreshold(char *InputMatFilename, double thresholdValue, double maxValue, char *&OutputMatFilename) { return soap ? soap_call_ns__binaryThreshold(soap, endpoint, NULL, InputMatFilename, thresholdValue, maxValue, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'morphOpen' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__morphOpen(char *InpuMattFilename, char *&OutputMatFilename) { return soap ? soap_call_ns__morphOpen(soap, endpoint, NULL, InpuMattFilename, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'MatToJPG' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__MatToJPG(char *InputMatFilename, char *&OutputMatFilename) { return soap ? soap_call_ns__MatToJPG(soap, endpoint, NULL, InputMatFilename, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'findContoursAndFillpoly' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__findContoursAndFillpoly(char *InputMatFilename, int lowerBound, ns__FindContours &out) { return soap ? soap_call_ns__findContoursAndFillpoly(soap, endpoint, NULL, InputMatFilename, lowerBound, out) : SOAP_EOM; };
	/// Invoke 'erode' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__erode(char *src, char *element, int iteration, char **OutputMatFilename) { return soap ? soap_call_ns__erode(soap, endpoint, NULL, src, element, iteration, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'dilate' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__dilate(char *src, char *element, int iteration, char **OutputMatFilename) { return soap ? soap_call_ns__dilate(soap, endpoint, NULL, src, element, iteration, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'Or' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__Or(char *src1, char *src2, char **OutputMatFilename) { return soap ? soap_call_ns__Or(soap, endpoint, NULL, src1, src2, OutputMatFilename) : SOAP_EOM; };
	/// Invoke 'removeSmallCell' of service 'imgProcess' and return error code (or SOAP_OK)
	virtual int ns__removeSmallCell(char *inputMatFilename, ns__RemoveSmallCell &out) { return soap ? soap_call_ns__removeSmallCell(soap, endpoint, NULL, inputMatFilename, out) : SOAP_EOM; };
};
#endif
